# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_libtraci')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_libtraci')
    _libtraci = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_libtraci', [dirname(__file__)])
        except ImportError:
            import _libtraci
            return _libtraci
        try:
            _mod = imp.load_module('_libtraci', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _libtraci = swig_import_helper()
    del swig_import_helper
else:
    import _libtraci
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

LIBTRACI = _libtraci.LIBTRACI
class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libtraci.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _libtraci.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _libtraci.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _libtraci.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _libtraci.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _libtraci.SwigPyIterator_equal(self, x)

    def copy(self):
        return _libtraci.SwigPyIterator_copy(self)

    def next(self):
        return _libtraci.SwigPyIterator_next(self)

    def __next__(self):
        return _libtraci.SwigPyIterator___next__(self)

    def previous(self):
        return _libtraci.SwigPyIterator_previous(self)

    def advance(self, n):
        return _libtraci.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _libtraci.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _libtraci.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _libtraci.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _libtraci.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _libtraci.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _libtraci.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _libtraci.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _libtraci.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libtraci.StringVector___nonzero__(self)

    def __bool__(self):
        return _libtraci.StringVector___bool__(self)

    def __len__(self):
        return _libtraci.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _libtraci.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libtraci.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libtraci.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libtraci.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libtraci.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libtraci.StringVector___setitem__(self, *args)

    def pop(self):
        return _libtraci.StringVector_pop(self)

    def append(self, x):
        return _libtraci.StringVector_append(self, x)

    def empty(self):
        return _libtraci.StringVector_empty(self)

    def size(self):
        return _libtraci.StringVector_size(self)

    def swap(self, v):
        return _libtraci.StringVector_swap(self, v)

    def begin(self):
        return _libtraci.StringVector_begin(self)

    def end(self):
        return _libtraci.StringVector_end(self)

    def rbegin(self):
        return _libtraci.StringVector_rbegin(self)

    def rend(self):
        return _libtraci.StringVector_rend(self)

    def clear(self):
        return _libtraci.StringVector_clear(self)

    def get_allocator(self):
        return _libtraci.StringVector_get_allocator(self)

    def pop_back(self):
        return _libtraci.StringVector_pop_back(self)

    def erase(self, *args):
        return _libtraci.StringVector_erase(self, *args)

    def __init__(self, *args):
        this = _libtraci.new_StringVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _libtraci.StringVector_push_back(self, x)

    def front(self):
        return _libtraci.StringVector_front(self)

    def back(self):
        return _libtraci.StringVector_back(self)

    def assign(self, n, x):
        return _libtraci.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _libtraci.StringVector_resize(self, *args)

    def insert(self, *args):
        return _libtraci.StringVector_insert(self, *args)

    def reserve(self, n):
        return _libtraci.StringVector_reserve(self, n)

    def capacity(self):
        return _libtraci.StringVector_capacity(self)
    __swig_destroy__ = _libtraci.delete_StringVector
    __del__ = lambda self: None
StringVector_swigregister = _libtraci.StringVector_swigregister
StringVector_swigregister(StringVector)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _libtraci.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libtraci.IntVector___nonzero__(self)

    def __bool__(self):
        return _libtraci.IntVector___bool__(self)

    def __len__(self):
        return _libtraci.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _libtraci.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libtraci.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libtraci.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libtraci.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libtraci.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libtraci.IntVector___setitem__(self, *args)

    def pop(self):
        return _libtraci.IntVector_pop(self)

    def append(self, x):
        return _libtraci.IntVector_append(self, x)

    def empty(self):
        return _libtraci.IntVector_empty(self)

    def size(self):
        return _libtraci.IntVector_size(self)

    def swap(self, v):
        return _libtraci.IntVector_swap(self, v)

    def begin(self):
        return _libtraci.IntVector_begin(self)

    def end(self):
        return _libtraci.IntVector_end(self)

    def rbegin(self):
        return _libtraci.IntVector_rbegin(self)

    def rend(self):
        return _libtraci.IntVector_rend(self)

    def clear(self):
        return _libtraci.IntVector_clear(self)

    def get_allocator(self):
        return _libtraci.IntVector_get_allocator(self)

    def pop_back(self):
        return _libtraci.IntVector_pop_back(self)

    def erase(self, *args):
        return _libtraci.IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _libtraci.new_IntVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _libtraci.IntVector_push_back(self, x)

    def front(self):
        return _libtraci.IntVector_front(self)

    def back(self):
        return _libtraci.IntVector_back(self)

    def assign(self, n, x):
        return _libtraci.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _libtraci.IntVector_resize(self, *args)

    def insert(self, *args):
        return _libtraci.IntVector_insert(self, *args)

    def reserve(self, n):
        return _libtraci.IntVector_reserve(self, n)

    def capacity(self):
        return _libtraci.IntVector_capacity(self)
    __swig_destroy__ = _libtraci.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _libtraci.IntVector_swigregister
IntVector_swigregister(IntVector)

class TraCIException(Exception):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TraCIException, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TraCIException, name)
    __repr__ = _swig_repr

    def __init__(self, what):
        this = _libtraci.new_TraCIException(what)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libtraci.delete_TraCIException
    __del__ = lambda self: None
TraCIException_swigregister = _libtraci.TraCIException_swigregister
TraCIException_swigregister(TraCIException)

class FatalTraCIError(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FatalTraCIError, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FatalTraCIError, name)
    __repr__ = _swig_repr

    def __init__(self, what):
        this = _libtraci.new_FatalTraCIError(what)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libtraci.delete_FatalTraCIError
    __del__ = lambda self: None
FatalTraCIError_swigregister = _libtraci.FatalTraCIError_swigregister
FatalTraCIError_swigregister(FatalTraCIError)

class TraCIResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TraCIResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TraCIResult, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libtraci.delete_TraCIResult
    __del__ = lambda self: None

    def getString(self):
        return _libtraci.TraCIResult_getString(self)

    def getType(self):
        return _libtraci.TraCIResult_getType(self)

    def __init__(self):
        this = _libtraci.new_TraCIResult()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
TraCIResult_swigregister = _libtraci.TraCIResult_swigregister
TraCIResult_swigregister(TraCIResult)

class TraCIPosition(TraCIResult):
    __swig_setmethods__ = {}
    for _s in [TraCIResult]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TraCIPosition, name, value)
    __swig_getmethods__ = {}
    for _s in [TraCIResult]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TraCIPosition, name)
    __repr__ = _swig_repr

    def getString(self):
        return _libtraci.TraCIPosition_getString(self)
    __swig_setmethods__["x"] = _libtraci.TraCIPosition_x_set
    __swig_getmethods__["x"] = _libtraci.TraCIPosition_x_get
    if _newclass:
        x = _swig_property(_libtraci.TraCIPosition_x_get, _libtraci.TraCIPosition_x_set)
    __swig_setmethods__["y"] = _libtraci.TraCIPosition_y_set
    __swig_getmethods__["y"] = _libtraci.TraCIPosition_y_get
    if _newclass:
        y = _swig_property(_libtraci.TraCIPosition_y_get, _libtraci.TraCIPosition_y_set)
    __swig_setmethods__["z"] = _libtraci.TraCIPosition_z_set
    __swig_getmethods__["z"] = _libtraci.TraCIPosition_z_get
    if _newclass:
        z = _swig_property(_libtraci.TraCIPosition_z_get, _libtraci.TraCIPosition_z_set)

    def __init__(self):
        this = _libtraci.new_TraCIPosition()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libtraci.delete_TraCIPosition
    __del__ = lambda self: None
TraCIPosition_swigregister = _libtraci.TraCIPosition_swigregister
TraCIPosition_swigregister(TraCIPosition)

class TraCIRoadPosition(TraCIResult):
    __swig_setmethods__ = {}
    for _s in [TraCIResult]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TraCIRoadPosition, name, value)
    __swig_getmethods__ = {}
    for _s in [TraCIResult]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TraCIRoadPosition, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _libtraci.new_TraCIRoadPosition(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getString(self):
        return _libtraci.TraCIRoadPosition_getString(self)
    __swig_setmethods__["edgeID"] = _libtraci.TraCIRoadPosition_edgeID_set
    __swig_getmethods__["edgeID"] = _libtraci.TraCIRoadPosition_edgeID_get
    if _newclass:
        edgeID = _swig_property(_libtraci.TraCIRoadPosition_edgeID_get, _libtraci.TraCIRoadPosition_edgeID_set)
    __swig_setmethods__["pos"] = _libtraci.TraCIRoadPosition_pos_set
    __swig_getmethods__["pos"] = _libtraci.TraCIRoadPosition_pos_get
    if _newclass:
        pos = _swig_property(_libtraci.TraCIRoadPosition_pos_get, _libtraci.TraCIRoadPosition_pos_set)
    __swig_setmethods__["laneIndex"] = _libtraci.TraCIRoadPosition_laneIndex_set
    __swig_getmethods__["laneIndex"] = _libtraci.TraCIRoadPosition_laneIndex_get
    if _newclass:
        laneIndex = _swig_property(_libtraci.TraCIRoadPosition_laneIndex_get, _libtraci.TraCIRoadPosition_laneIndex_set)
    __swig_destroy__ = _libtraci.delete_TraCIRoadPosition
    __del__ = lambda self: None
TraCIRoadPosition_swigregister = _libtraci.TraCIRoadPosition_swigregister
TraCIRoadPosition_swigregister(TraCIRoadPosition)

class TraCIColor(TraCIResult):
    __swig_setmethods__ = {}
    for _s in [TraCIResult]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TraCIColor, name, value)
    __swig_getmethods__ = {}
    for _s in [TraCIResult]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TraCIColor, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _libtraci.new_TraCIColor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getString(self):
        return _libtraci.TraCIColor_getString(self)
    __swig_setmethods__["r"] = _libtraci.TraCIColor_r_set
    __swig_getmethods__["r"] = _libtraci.TraCIColor_r_get
    if _newclass:
        r = _swig_property(_libtraci.TraCIColor_r_get, _libtraci.TraCIColor_r_set)
    __swig_setmethods__["g"] = _libtraci.TraCIColor_g_set
    __swig_getmethods__["g"] = _libtraci.TraCIColor_g_get
    if _newclass:
        g = _swig_property(_libtraci.TraCIColor_g_get, _libtraci.TraCIColor_g_set)
    __swig_setmethods__["b"] = _libtraci.TraCIColor_b_set
    __swig_getmethods__["b"] = _libtraci.TraCIColor_b_get
    if _newclass:
        b = _swig_property(_libtraci.TraCIColor_b_get, _libtraci.TraCIColor_b_set)
    __swig_setmethods__["a"] = _libtraci.TraCIColor_a_set
    __swig_getmethods__["a"] = _libtraci.TraCIColor_a_get
    if _newclass:
        a = _swig_property(_libtraci.TraCIColor_a_get, _libtraci.TraCIColor_a_set)
    __swig_destroy__ = _libtraci.delete_TraCIColor
    __del__ = lambda self: None
TraCIColor_swigregister = _libtraci.TraCIColor_swigregister
TraCIColor_swigregister(TraCIColor)

class TraCIPositionVector(TraCIResult):
    __swig_setmethods__ = {}
    for _s in [TraCIResult]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TraCIPositionVector, name, value)
    __swig_getmethods__ = {}
    for _s in [TraCIResult]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TraCIPositionVector, name)
    __repr__ = _swig_repr

    def getString(self):
        return _libtraci.TraCIPositionVector_getString(self)
    __swig_setmethods__["value"] = _libtraci.TraCIPositionVector_value_set
    __swig_getmethods__["value"] = _libtraci.TraCIPositionVector_value_get
    if _newclass:
        value = _swig_property(_libtraci.TraCIPositionVector_value_get, _libtraci.TraCIPositionVector_value_set)

    def __init__(self):
        this = _libtraci.new_TraCIPositionVector()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libtraci.delete_TraCIPositionVector
    __del__ = lambda self: None
TraCIPositionVector_swigregister = _libtraci.TraCIPositionVector_swigregister
TraCIPositionVector_swigregister(TraCIPositionVector)

class TraCIInt(TraCIResult):
    __swig_setmethods__ = {}
    for _s in [TraCIResult]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TraCIInt, name, value)
    __swig_getmethods__ = {}
    for _s in [TraCIResult]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TraCIInt, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _libtraci.new_TraCIInt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getString(self):
        return _libtraci.TraCIInt_getString(self)
    __swig_setmethods__["value"] = _libtraci.TraCIInt_value_set
    __swig_getmethods__["value"] = _libtraci.TraCIInt_value_get
    if _newclass:
        value = _swig_property(_libtraci.TraCIInt_value_get, _libtraci.TraCIInt_value_set)
    __swig_destroy__ = _libtraci.delete_TraCIInt
    __del__ = lambda self: None
TraCIInt_swigregister = _libtraci.TraCIInt_swigregister
TraCIInt_swigregister(TraCIInt)

class TraCIDouble(TraCIResult):
    __swig_setmethods__ = {}
    for _s in [TraCIResult]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TraCIDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [TraCIResult]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TraCIDouble, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _libtraci.new_TraCIDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getString(self):
        return _libtraci.TraCIDouble_getString(self)

    def getType(self):
        return _libtraci.TraCIDouble_getType(self)
    __swig_setmethods__["value"] = _libtraci.TraCIDouble_value_set
    __swig_getmethods__["value"] = _libtraci.TraCIDouble_value_get
    if _newclass:
        value = _swig_property(_libtraci.TraCIDouble_value_get, _libtraci.TraCIDouble_value_set)
    __swig_destroy__ = _libtraci.delete_TraCIDouble
    __del__ = lambda self: None
TraCIDouble_swigregister = _libtraci.TraCIDouble_swigregister
TraCIDouble_swigregister(TraCIDouble)

class TraCIString(TraCIResult):
    __swig_setmethods__ = {}
    for _s in [TraCIResult]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TraCIString, name, value)
    __swig_getmethods__ = {}
    for _s in [TraCIResult]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TraCIString, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _libtraci.new_TraCIString(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getString(self):
        return _libtraci.TraCIString_getString(self)

    def getType(self):
        return _libtraci.TraCIString_getType(self)
    __swig_setmethods__["value"] = _libtraci.TraCIString_value_set
    __swig_getmethods__["value"] = _libtraci.TraCIString_value_get
    if _newclass:
        value = _swig_property(_libtraci.TraCIString_value_get, _libtraci.TraCIString_value_set)
    __swig_destroy__ = _libtraci.delete_TraCIString
    __del__ = lambda self: None
TraCIString_swigregister = _libtraci.TraCIString_swigregister
TraCIString_swigregister(TraCIString)

class TraCIStringList(TraCIResult):
    __swig_setmethods__ = {}
    for _s in [TraCIResult]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TraCIStringList, name, value)
    __swig_getmethods__ = {}
    for _s in [TraCIResult]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TraCIStringList, name)
    __repr__ = _swig_repr

    def getString(self):
        return _libtraci.TraCIStringList_getString(self)
    __swig_setmethods__["value"] = _libtraci.TraCIStringList_value_set
    __swig_getmethods__["value"] = _libtraci.TraCIStringList_value_get
    if _newclass:
        value = _swig_property(_libtraci.TraCIStringList_value_get, _libtraci.TraCIStringList_value_set)

    def __init__(self):
        this = _libtraci.new_TraCIStringList()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libtraci.delete_TraCIStringList
    __del__ = lambda self: None
TraCIStringList_swigregister = _libtraci.TraCIStringList_swigregister
TraCIStringList_swigregister(TraCIStringList)

class TraCIPhase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TraCIPhase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TraCIPhase, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _libtraci.new_TraCIPhase(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libtraci.delete_TraCIPhase
    __del__ = lambda self: None
    __swig_setmethods__["duration"] = _libtraci.TraCIPhase_duration_set
    __swig_getmethods__["duration"] = _libtraci.TraCIPhase_duration_get
    if _newclass:
        duration = _swig_property(_libtraci.TraCIPhase_duration_get, _libtraci.TraCIPhase_duration_set)
    __swig_setmethods__["state"] = _libtraci.TraCIPhase_state_set
    __swig_getmethods__["state"] = _libtraci.TraCIPhase_state_get
    if _newclass:
        state = _swig_property(_libtraci.TraCIPhase_state_get, _libtraci.TraCIPhase_state_set)
    __swig_setmethods__["minDur"] = _libtraci.TraCIPhase_minDur_set
    __swig_getmethods__["minDur"] = _libtraci.TraCIPhase_minDur_get
    if _newclass:
        minDur = _swig_property(_libtraci.TraCIPhase_minDur_get, _libtraci.TraCIPhase_minDur_set)
    __swig_setmethods__["maxDur"] = _libtraci.TraCIPhase_maxDur_set
    __swig_getmethods__["maxDur"] = _libtraci.TraCIPhase_maxDur_get
    if _newclass:
        maxDur = _swig_property(_libtraci.TraCIPhase_maxDur_get, _libtraci.TraCIPhase_maxDur_set)
    __swig_setmethods__["next"] = _libtraci.TraCIPhase_next_set
    __swig_getmethods__["next"] = _libtraci.TraCIPhase_next_get
    if _newclass:
        next = _swig_property(_libtraci.TraCIPhase_next_get, _libtraci.TraCIPhase_next_set)
    __swig_setmethods__["name"] = _libtraci.TraCIPhase_name_set
    __swig_getmethods__["name"] = _libtraci.TraCIPhase_name_get
    if _newclass:
        name = _swig_property(_libtraci.TraCIPhase_name_get, _libtraci.TraCIPhase_name_set)
TraCIPhase_swigregister = _libtraci.TraCIPhase_swigregister
TraCIPhase_swigregister(TraCIPhase)

class TraCIPhaseVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TraCIPhaseVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TraCIPhaseVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _libtraci.TraCIPhaseVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libtraci.TraCIPhaseVector___nonzero__(self)

    def __bool__(self):
        return _libtraci.TraCIPhaseVector___bool__(self)

    def __len__(self):
        return _libtraci.TraCIPhaseVector___len__(self)

    def __getslice__(self, i, j):
        return _libtraci.TraCIPhaseVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libtraci.TraCIPhaseVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libtraci.TraCIPhaseVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libtraci.TraCIPhaseVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libtraci.TraCIPhaseVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libtraci.TraCIPhaseVector___setitem__(self, *args)

    def pop(self):
        return _libtraci.TraCIPhaseVector_pop(self)

    def append(self, x):
        return _libtraci.TraCIPhaseVector_append(self, x)

    def empty(self):
        return _libtraci.TraCIPhaseVector_empty(self)

    def size(self):
        return _libtraci.TraCIPhaseVector_size(self)

    def swap(self, v):
        return _libtraci.TraCIPhaseVector_swap(self, v)

    def begin(self):
        return _libtraci.TraCIPhaseVector_begin(self)

    def end(self):
        return _libtraci.TraCIPhaseVector_end(self)

    def rbegin(self):
        return _libtraci.TraCIPhaseVector_rbegin(self)

    def rend(self):
        return _libtraci.TraCIPhaseVector_rend(self)

    def clear(self):
        return _libtraci.TraCIPhaseVector_clear(self)

    def get_allocator(self):
        return _libtraci.TraCIPhaseVector_get_allocator(self)

    def pop_back(self):
        return _libtraci.TraCIPhaseVector_pop_back(self)

    def erase(self, *args):
        return _libtraci.TraCIPhaseVector_erase(self, *args)

    def __init__(self, *args):
        this = _libtraci.new_TraCIPhaseVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _libtraci.TraCIPhaseVector_push_back(self, x)

    def front(self):
        return _libtraci.TraCIPhaseVector_front(self)

    def back(self):
        return _libtraci.TraCIPhaseVector_back(self)

    def assign(self, n, x):
        return _libtraci.TraCIPhaseVector_assign(self, n, x)

    def resize(self, *args):
        return _libtraci.TraCIPhaseVector_resize(self, *args)

    def insert(self, *args):
        return _libtraci.TraCIPhaseVector_insert(self, *args)

    def reserve(self, n):
        return _libtraci.TraCIPhaseVector_reserve(self, n)

    def capacity(self):
        return _libtraci.TraCIPhaseVector_capacity(self)
    __swig_destroy__ = _libtraci.delete_TraCIPhaseVector
    __del__ = lambda self: None
TraCIPhaseVector_swigregister = _libtraci.TraCIPhaseVector_swigregister
TraCIPhaseVector_swigregister(TraCIPhaseVector)

class TraCILogic(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TraCILogic, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TraCILogic, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _libtraci.new_TraCILogic(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libtraci.delete_TraCILogic
    __del__ = lambda self: None
    __swig_setmethods__["programID"] = _libtraci.TraCILogic_programID_set
    __swig_getmethods__["programID"] = _libtraci.TraCILogic_programID_get
    if _newclass:
        programID = _swig_property(_libtraci.TraCILogic_programID_get, _libtraci.TraCILogic_programID_set)
    __swig_setmethods__["type"] = _libtraci.TraCILogic_type_set
    __swig_getmethods__["type"] = _libtraci.TraCILogic_type_get
    if _newclass:
        type = _swig_property(_libtraci.TraCILogic_type_get, _libtraci.TraCILogic_type_set)
    __swig_setmethods__["currentPhaseIndex"] = _libtraci.TraCILogic_currentPhaseIndex_set
    __swig_getmethods__["currentPhaseIndex"] = _libtraci.TraCILogic_currentPhaseIndex_get
    if _newclass:
        currentPhaseIndex = _swig_property(_libtraci.TraCILogic_currentPhaseIndex_get, _libtraci.TraCILogic_currentPhaseIndex_set)
    __swig_setmethods__["phases"] = _libtraci.TraCILogic_phases_set
    __swig_getmethods__["phases"] = _libtraci.TraCILogic_phases_get
    if _newclass:
        phases = _swig_property(_libtraci.TraCILogic_phases_get, _libtraci.TraCILogic_phases_set)
    __swig_setmethods__["subParameter"] = _libtraci.TraCILogic_subParameter_set
    __swig_getmethods__["subParameter"] = _libtraci.TraCILogic_subParameter_get
    if _newclass:
        subParameter = _swig_property(_libtraci.TraCILogic_subParameter_get, _libtraci.TraCILogic_subParameter_set)
TraCILogic_swigregister = _libtraci.TraCILogic_swigregister
TraCILogic_swigregister(TraCILogic)

class TraCILink(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TraCILink, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TraCILink, name)
    __repr__ = _swig_repr

    def __init__(self, _from, _via, _to):
        this = _libtraci.new_TraCILink(_from, _via, _to)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libtraci.delete_TraCILink
    __del__ = lambda self: None
    __swig_setmethods__["fromLane"] = _libtraci.TraCILink_fromLane_set
    __swig_getmethods__["fromLane"] = _libtraci.TraCILink_fromLane_get
    if _newclass:
        fromLane = _swig_property(_libtraci.TraCILink_fromLane_get, _libtraci.TraCILink_fromLane_set)
    __swig_setmethods__["viaLane"] = _libtraci.TraCILink_viaLane_set
    __swig_getmethods__["viaLane"] = _libtraci.TraCILink_viaLane_get
    if _newclass:
        viaLane = _swig_property(_libtraci.TraCILink_viaLane_get, _libtraci.TraCILink_viaLane_set)
    __swig_setmethods__["toLane"] = _libtraci.TraCILink_toLane_set
    __swig_getmethods__["toLane"] = _libtraci.TraCILink_toLane_get
    if _newclass:
        toLane = _swig_property(_libtraci.TraCILink_toLane_get, _libtraci.TraCILink_toLane_set)
TraCILink_swigregister = _libtraci.TraCILink_swigregister
TraCILink_swigregister(TraCILink)

class TraCIConnection(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TraCIConnection, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TraCIConnection, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _libtraci.new_TraCIConnection(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libtraci.delete_TraCIConnection
    __del__ = lambda self: None
    __swig_setmethods__["approachedLane"] = _libtraci.TraCIConnection_approachedLane_set
    __swig_getmethods__["approachedLane"] = _libtraci.TraCIConnection_approachedLane_get
    if _newclass:
        approachedLane = _swig_property(_libtraci.TraCIConnection_approachedLane_get, _libtraci.TraCIConnection_approachedLane_set)
    __swig_setmethods__["hasPrio"] = _libtraci.TraCIConnection_hasPrio_set
    __swig_getmethods__["hasPrio"] = _libtraci.TraCIConnection_hasPrio_get
    if _newclass:
        hasPrio = _swig_property(_libtraci.TraCIConnection_hasPrio_get, _libtraci.TraCIConnection_hasPrio_set)
    __swig_setmethods__["isOpen"] = _libtraci.TraCIConnection_isOpen_set
    __swig_getmethods__["isOpen"] = _libtraci.TraCIConnection_isOpen_get
    if _newclass:
        isOpen = _swig_property(_libtraci.TraCIConnection_isOpen_get, _libtraci.TraCIConnection_isOpen_set)
    __swig_setmethods__["hasFoe"] = _libtraci.TraCIConnection_hasFoe_set
    __swig_getmethods__["hasFoe"] = _libtraci.TraCIConnection_hasFoe_get
    if _newclass:
        hasFoe = _swig_property(_libtraci.TraCIConnection_hasFoe_get, _libtraci.TraCIConnection_hasFoe_set)
    __swig_setmethods__["approachedInternal"] = _libtraci.TraCIConnection_approachedInternal_set
    __swig_getmethods__["approachedInternal"] = _libtraci.TraCIConnection_approachedInternal_get
    if _newclass:
        approachedInternal = _swig_property(_libtraci.TraCIConnection_approachedInternal_get, _libtraci.TraCIConnection_approachedInternal_set)
    __swig_setmethods__["state"] = _libtraci.TraCIConnection_state_set
    __swig_getmethods__["state"] = _libtraci.TraCIConnection_state_get
    if _newclass:
        state = _swig_property(_libtraci.TraCIConnection_state_get, _libtraci.TraCIConnection_state_set)
    __swig_setmethods__["direction"] = _libtraci.TraCIConnection_direction_set
    __swig_getmethods__["direction"] = _libtraci.TraCIConnection_direction_get
    if _newclass:
        direction = _swig_property(_libtraci.TraCIConnection_direction_get, _libtraci.TraCIConnection_direction_set)
    __swig_setmethods__["length"] = _libtraci.TraCIConnection_length_set
    __swig_getmethods__["length"] = _libtraci.TraCIConnection_length_get
    if _newclass:
        length = _swig_property(_libtraci.TraCIConnection_length_get, _libtraci.TraCIConnection_length_set)
TraCIConnection_swigregister = _libtraci.TraCIConnection_swigregister
TraCIConnection_swigregister(TraCIConnection)

class TraCIVehicleData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TraCIVehicleData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TraCIVehicleData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["id"] = _libtraci.TraCIVehicleData_id_set
    __swig_getmethods__["id"] = _libtraci.TraCIVehicleData_id_get
    if _newclass:
        id = _swig_property(_libtraci.TraCIVehicleData_id_get, _libtraci.TraCIVehicleData_id_set)
    __swig_setmethods__["length"] = _libtraci.TraCIVehicleData_length_set
    __swig_getmethods__["length"] = _libtraci.TraCIVehicleData_length_get
    if _newclass:
        length = _swig_property(_libtraci.TraCIVehicleData_length_get, _libtraci.TraCIVehicleData_length_set)
    __swig_setmethods__["entryTime"] = _libtraci.TraCIVehicleData_entryTime_set
    __swig_getmethods__["entryTime"] = _libtraci.TraCIVehicleData_entryTime_get
    if _newclass:
        entryTime = _swig_property(_libtraci.TraCIVehicleData_entryTime_get, _libtraci.TraCIVehicleData_entryTime_set)
    __swig_setmethods__["leaveTime"] = _libtraci.TraCIVehicleData_leaveTime_set
    __swig_getmethods__["leaveTime"] = _libtraci.TraCIVehicleData_leaveTime_get
    if _newclass:
        leaveTime = _swig_property(_libtraci.TraCIVehicleData_leaveTime_get, _libtraci.TraCIVehicleData_leaveTime_set)
    __swig_setmethods__["typeID"] = _libtraci.TraCIVehicleData_typeID_set
    __swig_getmethods__["typeID"] = _libtraci.TraCIVehicleData_typeID_get
    if _newclass:
        typeID = _swig_property(_libtraci.TraCIVehicleData_typeID_get, _libtraci.TraCIVehicleData_typeID_set)

    def __init__(self):
        this = _libtraci.new_TraCIVehicleData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libtraci.delete_TraCIVehicleData
    __del__ = lambda self: None
TraCIVehicleData_swigregister = _libtraci.TraCIVehicleData_swigregister
TraCIVehicleData_swigregister(TraCIVehicleData)

class TraCINextTLSData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TraCINextTLSData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TraCINextTLSData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["id"] = _libtraci.TraCINextTLSData_id_set
    __swig_getmethods__["id"] = _libtraci.TraCINextTLSData_id_get
    if _newclass:
        id = _swig_property(_libtraci.TraCINextTLSData_id_get, _libtraci.TraCINextTLSData_id_set)
    __swig_setmethods__["tlIndex"] = _libtraci.TraCINextTLSData_tlIndex_set
    __swig_getmethods__["tlIndex"] = _libtraci.TraCINextTLSData_tlIndex_get
    if _newclass:
        tlIndex = _swig_property(_libtraci.TraCINextTLSData_tlIndex_get, _libtraci.TraCINextTLSData_tlIndex_set)
    __swig_setmethods__["dist"] = _libtraci.TraCINextTLSData_dist_set
    __swig_getmethods__["dist"] = _libtraci.TraCINextTLSData_dist_get
    if _newclass:
        dist = _swig_property(_libtraci.TraCINextTLSData_dist_get, _libtraci.TraCINextTLSData_dist_set)
    __swig_setmethods__["state"] = _libtraci.TraCINextTLSData_state_set
    __swig_getmethods__["state"] = _libtraci.TraCINextTLSData_state_get
    if _newclass:
        state = _swig_property(_libtraci.TraCINextTLSData_state_get, _libtraci.TraCINextTLSData_state_set)

    def __init__(self):
        this = _libtraci.new_TraCINextTLSData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libtraci.delete_TraCINextTLSData
    __del__ = lambda self: None
TraCINextTLSData_swigregister = _libtraci.TraCINextTLSData_swigregister
TraCINextTLSData_swigregister(TraCINextTLSData)

class TraCINextStopData(TraCIResult):
    __swig_setmethods__ = {}
    for _s in [TraCIResult]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TraCINextStopData, name, value)
    __swig_getmethods__ = {}
    for _s in [TraCIResult]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TraCINextStopData, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _libtraci.new_TraCINextStopData(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getString(self):
        return _libtraci.TraCINextStopData_getString(self)
    __swig_setmethods__["lane"] = _libtraci.TraCINextStopData_lane_set
    __swig_getmethods__["lane"] = _libtraci.TraCINextStopData_lane_get
    if _newclass:
        lane = _swig_property(_libtraci.TraCINextStopData_lane_get, _libtraci.TraCINextStopData_lane_set)
    __swig_setmethods__["startPos"] = _libtraci.TraCINextStopData_startPos_set
    __swig_getmethods__["startPos"] = _libtraci.TraCINextStopData_startPos_get
    if _newclass:
        startPos = _swig_property(_libtraci.TraCINextStopData_startPos_get, _libtraci.TraCINextStopData_startPos_set)
    __swig_setmethods__["endPos"] = _libtraci.TraCINextStopData_endPos_set
    __swig_getmethods__["endPos"] = _libtraci.TraCINextStopData_endPos_get
    if _newclass:
        endPos = _swig_property(_libtraci.TraCINextStopData_endPos_get, _libtraci.TraCINextStopData_endPos_set)
    __swig_setmethods__["stoppingPlaceID"] = _libtraci.TraCINextStopData_stoppingPlaceID_set
    __swig_getmethods__["stoppingPlaceID"] = _libtraci.TraCINextStopData_stoppingPlaceID_get
    if _newclass:
        stoppingPlaceID = _swig_property(_libtraci.TraCINextStopData_stoppingPlaceID_get, _libtraci.TraCINextStopData_stoppingPlaceID_set)
    __swig_setmethods__["stopFlags"] = _libtraci.TraCINextStopData_stopFlags_set
    __swig_getmethods__["stopFlags"] = _libtraci.TraCINextStopData_stopFlags_get
    if _newclass:
        stopFlags = _swig_property(_libtraci.TraCINextStopData_stopFlags_get, _libtraci.TraCINextStopData_stopFlags_set)
    __swig_setmethods__["duration"] = _libtraci.TraCINextStopData_duration_set
    __swig_getmethods__["duration"] = _libtraci.TraCINextStopData_duration_get
    if _newclass:
        duration = _swig_property(_libtraci.TraCINextStopData_duration_get, _libtraci.TraCINextStopData_duration_set)
    __swig_setmethods__["until"] = _libtraci.TraCINextStopData_until_set
    __swig_getmethods__["until"] = _libtraci.TraCINextStopData_until_get
    if _newclass:
        until = _swig_property(_libtraci.TraCINextStopData_until_get, _libtraci.TraCINextStopData_until_set)
    __swig_setmethods__["intendedArrival"] = _libtraci.TraCINextStopData_intendedArrival_set
    __swig_getmethods__["intendedArrival"] = _libtraci.TraCINextStopData_intendedArrival_get
    if _newclass:
        intendedArrival = _swig_property(_libtraci.TraCINextStopData_intendedArrival_get, _libtraci.TraCINextStopData_intendedArrival_set)
    __swig_setmethods__["arrival"] = _libtraci.TraCINextStopData_arrival_set
    __swig_getmethods__["arrival"] = _libtraci.TraCINextStopData_arrival_get
    if _newclass:
        arrival = _swig_property(_libtraci.TraCINextStopData_arrival_get, _libtraci.TraCINextStopData_arrival_set)
    __swig_setmethods__["depart"] = _libtraci.TraCINextStopData_depart_set
    __swig_getmethods__["depart"] = _libtraci.TraCINextStopData_depart_get
    if _newclass:
        depart = _swig_property(_libtraci.TraCINextStopData_depart_get, _libtraci.TraCINextStopData_depart_set)
    __swig_setmethods__["split"] = _libtraci.TraCINextStopData_split_set
    __swig_getmethods__["split"] = _libtraci.TraCINextStopData_split_get
    if _newclass:
        split = _swig_property(_libtraci.TraCINextStopData_split_get, _libtraci.TraCINextStopData_split_set)
    __swig_setmethods__["join"] = _libtraci.TraCINextStopData_join_set
    __swig_getmethods__["join"] = _libtraci.TraCINextStopData_join_get
    if _newclass:
        join = _swig_property(_libtraci.TraCINextStopData_join_get, _libtraci.TraCINextStopData_join_set)
    __swig_setmethods__["actType"] = _libtraci.TraCINextStopData_actType_set
    __swig_getmethods__["actType"] = _libtraci.TraCINextStopData_actType_get
    if _newclass:
        actType = _swig_property(_libtraci.TraCINextStopData_actType_get, _libtraci.TraCINextStopData_actType_set)
    __swig_setmethods__["tripId"] = _libtraci.TraCINextStopData_tripId_set
    __swig_getmethods__["tripId"] = _libtraci.TraCINextStopData_tripId_get
    if _newclass:
        tripId = _swig_property(_libtraci.TraCINextStopData_tripId_get, _libtraci.TraCINextStopData_tripId_set)
    __swig_setmethods__["line"] = _libtraci.TraCINextStopData_line_set
    __swig_getmethods__["line"] = _libtraci.TraCINextStopData_line_get
    if _newclass:
        line = _swig_property(_libtraci.TraCINextStopData_line_get, _libtraci.TraCINextStopData_line_set)
    __swig_setmethods__["speed"] = _libtraci.TraCINextStopData_speed_set
    __swig_getmethods__["speed"] = _libtraci.TraCINextStopData_speed_get
    if _newclass:
        speed = _swig_property(_libtraci.TraCINextStopData_speed_get, _libtraci.TraCINextStopData_speed_set)
    __swig_destroy__ = _libtraci.delete_TraCINextStopData
    __del__ = lambda self: None
TraCINextStopData_swigregister = _libtraci.TraCINextStopData_swigregister
TraCINextStopData_swigregister(TraCINextStopData)

class TraCINextStopDataVector(TraCIResult):
    __swig_setmethods__ = {}
    for _s in [TraCIResult]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TraCINextStopDataVector, name, value)
    __swig_getmethods__ = {}
    for _s in [TraCIResult]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TraCINextStopDataVector, name)
    __repr__ = _swig_repr

    def getString(self):
        return _libtraci.TraCINextStopDataVector_getString(self)
    __swig_setmethods__["value"] = _libtraci.TraCINextStopDataVector_value_set
    __swig_getmethods__["value"] = _libtraci.TraCINextStopDataVector_value_get
    if _newclass:
        value = _swig_property(_libtraci.TraCINextStopDataVector_value_get, _libtraci.TraCINextStopDataVector_value_set)

    def __init__(self):
        this = _libtraci.new_TraCINextStopDataVector()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libtraci.delete_TraCINextStopDataVector
    __del__ = lambda self: None
TraCINextStopDataVector_swigregister = _libtraci.TraCINextStopDataVector_swigregister
TraCINextStopDataVector_swigregister(TraCINextStopDataVector)

class TraCIBestLanesData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TraCIBestLanesData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TraCIBestLanesData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["laneID"] = _libtraci.TraCIBestLanesData_laneID_set
    __swig_getmethods__["laneID"] = _libtraci.TraCIBestLanesData_laneID_get
    if _newclass:
        laneID = _swig_property(_libtraci.TraCIBestLanesData_laneID_get, _libtraci.TraCIBestLanesData_laneID_set)
    __swig_setmethods__["length"] = _libtraci.TraCIBestLanesData_length_set
    __swig_getmethods__["length"] = _libtraci.TraCIBestLanesData_length_get
    if _newclass:
        length = _swig_property(_libtraci.TraCIBestLanesData_length_get, _libtraci.TraCIBestLanesData_length_set)
    __swig_setmethods__["occupation"] = _libtraci.TraCIBestLanesData_occupation_set
    __swig_getmethods__["occupation"] = _libtraci.TraCIBestLanesData_occupation_get
    if _newclass:
        occupation = _swig_property(_libtraci.TraCIBestLanesData_occupation_get, _libtraci.TraCIBestLanesData_occupation_set)
    __swig_setmethods__["bestLaneOffset"] = _libtraci.TraCIBestLanesData_bestLaneOffset_set
    __swig_getmethods__["bestLaneOffset"] = _libtraci.TraCIBestLanesData_bestLaneOffset_get
    if _newclass:
        bestLaneOffset = _swig_property(_libtraci.TraCIBestLanesData_bestLaneOffset_get, _libtraci.TraCIBestLanesData_bestLaneOffset_set)
    __swig_setmethods__["allowsContinuation"] = _libtraci.TraCIBestLanesData_allowsContinuation_set
    __swig_getmethods__["allowsContinuation"] = _libtraci.TraCIBestLanesData_allowsContinuation_get
    if _newclass:
        allowsContinuation = _swig_property(_libtraci.TraCIBestLanesData_allowsContinuation_get, _libtraci.TraCIBestLanesData_allowsContinuation_set)
    __swig_setmethods__["continuationLanes"] = _libtraci.TraCIBestLanesData_continuationLanes_set
    __swig_getmethods__["continuationLanes"] = _libtraci.TraCIBestLanesData_continuationLanes_get
    if _newclass:
        continuationLanes = _swig_property(_libtraci.TraCIBestLanesData_continuationLanes_get, _libtraci.TraCIBestLanesData_continuationLanes_set)

    def __init__(self):
        this = _libtraci.new_TraCIBestLanesData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libtraci.delete_TraCIBestLanesData
    __del__ = lambda self: None
TraCIBestLanesData_swigregister = _libtraci.TraCIBestLanesData_swigregister
TraCIBestLanesData_swigregister(TraCIBestLanesData)

class TraCIStage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TraCIStage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TraCIStage, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _libtraci.new_TraCIStage(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["type"] = _libtraci.TraCIStage_type_set
    __swig_getmethods__["type"] = _libtraci.TraCIStage_type_get
    if _newclass:
        type = _swig_property(_libtraci.TraCIStage_type_get, _libtraci.TraCIStage_type_set)
    __swig_setmethods__["vType"] = _libtraci.TraCIStage_vType_set
    __swig_getmethods__["vType"] = _libtraci.TraCIStage_vType_get
    if _newclass:
        vType = _swig_property(_libtraci.TraCIStage_vType_get, _libtraci.TraCIStage_vType_set)
    __swig_setmethods__["line"] = _libtraci.TraCIStage_line_set
    __swig_getmethods__["line"] = _libtraci.TraCIStage_line_get
    if _newclass:
        line = _swig_property(_libtraci.TraCIStage_line_get, _libtraci.TraCIStage_line_set)
    __swig_setmethods__["destStop"] = _libtraci.TraCIStage_destStop_set
    __swig_getmethods__["destStop"] = _libtraci.TraCIStage_destStop_get
    if _newclass:
        destStop = _swig_property(_libtraci.TraCIStage_destStop_get, _libtraci.TraCIStage_destStop_set)
    __swig_setmethods__["edges"] = _libtraci.TraCIStage_edges_set
    __swig_getmethods__["edges"] = _libtraci.TraCIStage_edges_get
    if _newclass:
        edges = _swig_property(_libtraci.TraCIStage_edges_get, _libtraci.TraCIStage_edges_set)
    __swig_setmethods__["travelTime"] = _libtraci.TraCIStage_travelTime_set
    __swig_getmethods__["travelTime"] = _libtraci.TraCIStage_travelTime_get
    if _newclass:
        travelTime = _swig_property(_libtraci.TraCIStage_travelTime_get, _libtraci.TraCIStage_travelTime_set)
    __swig_setmethods__["cost"] = _libtraci.TraCIStage_cost_set
    __swig_getmethods__["cost"] = _libtraci.TraCIStage_cost_get
    if _newclass:
        cost = _swig_property(_libtraci.TraCIStage_cost_get, _libtraci.TraCIStage_cost_set)
    __swig_setmethods__["length"] = _libtraci.TraCIStage_length_set
    __swig_getmethods__["length"] = _libtraci.TraCIStage_length_get
    if _newclass:
        length = _swig_property(_libtraci.TraCIStage_length_get, _libtraci.TraCIStage_length_set)
    __swig_setmethods__["intended"] = _libtraci.TraCIStage_intended_set
    __swig_getmethods__["intended"] = _libtraci.TraCIStage_intended_get
    if _newclass:
        intended = _swig_property(_libtraci.TraCIStage_intended_get, _libtraci.TraCIStage_intended_set)
    __swig_setmethods__["depart"] = _libtraci.TraCIStage_depart_set
    __swig_getmethods__["depart"] = _libtraci.TraCIStage_depart_get
    if _newclass:
        depart = _swig_property(_libtraci.TraCIStage_depart_get, _libtraci.TraCIStage_depart_set)
    __swig_setmethods__["departPos"] = _libtraci.TraCIStage_departPos_set
    __swig_getmethods__["departPos"] = _libtraci.TraCIStage_departPos_get
    if _newclass:
        departPos = _swig_property(_libtraci.TraCIStage_departPos_get, _libtraci.TraCIStage_departPos_set)
    __swig_setmethods__["arrivalPos"] = _libtraci.TraCIStage_arrivalPos_set
    __swig_getmethods__["arrivalPos"] = _libtraci.TraCIStage_arrivalPos_get
    if _newclass:
        arrivalPos = _swig_property(_libtraci.TraCIStage_arrivalPos_get, _libtraci.TraCIStage_arrivalPos_set)
    __swig_setmethods__["description"] = _libtraci.TraCIStage_description_set
    __swig_getmethods__["description"] = _libtraci.TraCIStage_description_get
    if _newclass:
        description = _swig_property(_libtraci.TraCIStage_description_get, _libtraci.TraCIStage_description_set)
    __swig_destroy__ = _libtraci.delete_TraCIStage
    __del__ = lambda self: None
TraCIStage_swigregister = _libtraci.TraCIStage_swigregister
TraCIStage_swigregister(TraCIStage)

class TraCIReservation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TraCIReservation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TraCIReservation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _libtraci.new_TraCIReservation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["id"] = _libtraci.TraCIReservation_id_set
    __swig_getmethods__["id"] = _libtraci.TraCIReservation_id_get
    if _newclass:
        id = _swig_property(_libtraci.TraCIReservation_id_get, _libtraci.TraCIReservation_id_set)
    __swig_setmethods__["persons"] = _libtraci.TraCIReservation_persons_set
    __swig_getmethods__["persons"] = _libtraci.TraCIReservation_persons_get
    if _newclass:
        persons = _swig_property(_libtraci.TraCIReservation_persons_get, _libtraci.TraCIReservation_persons_set)
    __swig_setmethods__["group"] = _libtraci.TraCIReservation_group_set
    __swig_getmethods__["group"] = _libtraci.TraCIReservation_group_get
    if _newclass:
        group = _swig_property(_libtraci.TraCIReservation_group_get, _libtraci.TraCIReservation_group_set)
    __swig_setmethods__["fromEdge"] = _libtraci.TraCIReservation_fromEdge_set
    __swig_getmethods__["fromEdge"] = _libtraci.TraCIReservation_fromEdge_get
    if _newclass:
        fromEdge = _swig_property(_libtraci.TraCIReservation_fromEdge_get, _libtraci.TraCIReservation_fromEdge_set)
    __swig_setmethods__["toEdge"] = _libtraci.TraCIReservation_toEdge_set
    __swig_getmethods__["toEdge"] = _libtraci.TraCIReservation_toEdge_get
    if _newclass:
        toEdge = _swig_property(_libtraci.TraCIReservation_toEdge_get, _libtraci.TraCIReservation_toEdge_set)
    __swig_setmethods__["departPos"] = _libtraci.TraCIReservation_departPos_set
    __swig_getmethods__["departPos"] = _libtraci.TraCIReservation_departPos_get
    if _newclass:
        departPos = _swig_property(_libtraci.TraCIReservation_departPos_get, _libtraci.TraCIReservation_departPos_set)
    __swig_setmethods__["arrivalPos"] = _libtraci.TraCIReservation_arrivalPos_set
    __swig_getmethods__["arrivalPos"] = _libtraci.TraCIReservation_arrivalPos_get
    if _newclass:
        arrivalPos = _swig_property(_libtraci.TraCIReservation_arrivalPos_get, _libtraci.TraCIReservation_arrivalPos_set)
    __swig_setmethods__["depart"] = _libtraci.TraCIReservation_depart_set
    __swig_getmethods__["depart"] = _libtraci.TraCIReservation_depart_get
    if _newclass:
        depart = _swig_property(_libtraci.TraCIReservation_depart_get, _libtraci.TraCIReservation_depart_set)
    __swig_setmethods__["reservationTime"] = _libtraci.TraCIReservation_reservationTime_set
    __swig_getmethods__["reservationTime"] = _libtraci.TraCIReservation_reservationTime_get
    if _newclass:
        reservationTime = _swig_property(_libtraci.TraCIReservation_reservationTime_get, _libtraci.TraCIReservation_reservationTime_set)
    __swig_destroy__ = _libtraci.delete_TraCIReservation
    __del__ = lambda self: None
TraCIReservation_swigregister = _libtraci.TraCIReservation_swigregister
TraCIReservation_swigregister(TraCIReservation)

class TraCICollision(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TraCICollision, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TraCICollision, name)
    __repr__ = _swig_repr
    __swig_setmethods__["collider"] = _libtraci.TraCICollision_collider_set
    __swig_getmethods__["collider"] = _libtraci.TraCICollision_collider_get
    if _newclass:
        collider = _swig_property(_libtraci.TraCICollision_collider_get, _libtraci.TraCICollision_collider_set)
    __swig_setmethods__["victim"] = _libtraci.TraCICollision_victim_set
    __swig_getmethods__["victim"] = _libtraci.TraCICollision_victim_get
    if _newclass:
        victim = _swig_property(_libtraci.TraCICollision_victim_get, _libtraci.TraCICollision_victim_set)
    __swig_setmethods__["colliderType"] = _libtraci.TraCICollision_colliderType_set
    __swig_getmethods__["colliderType"] = _libtraci.TraCICollision_colliderType_get
    if _newclass:
        colliderType = _swig_property(_libtraci.TraCICollision_colliderType_get, _libtraci.TraCICollision_colliderType_set)
    __swig_setmethods__["victimType"] = _libtraci.TraCICollision_victimType_set
    __swig_getmethods__["victimType"] = _libtraci.TraCICollision_victimType_get
    if _newclass:
        victimType = _swig_property(_libtraci.TraCICollision_victimType_get, _libtraci.TraCICollision_victimType_set)
    __swig_setmethods__["colliderSpeed"] = _libtraci.TraCICollision_colliderSpeed_set
    __swig_getmethods__["colliderSpeed"] = _libtraci.TraCICollision_colliderSpeed_get
    if _newclass:
        colliderSpeed = _swig_property(_libtraci.TraCICollision_colliderSpeed_get, _libtraci.TraCICollision_colliderSpeed_set)
    __swig_setmethods__["victimSpeed"] = _libtraci.TraCICollision_victimSpeed_set
    __swig_getmethods__["victimSpeed"] = _libtraci.TraCICollision_victimSpeed_get
    if _newclass:
        victimSpeed = _swig_property(_libtraci.TraCICollision_victimSpeed_get, _libtraci.TraCICollision_victimSpeed_set)
    __swig_setmethods__["type"] = _libtraci.TraCICollision_type_set
    __swig_getmethods__["type"] = _libtraci.TraCICollision_type_get
    if _newclass:
        type = _swig_property(_libtraci.TraCICollision_type_get, _libtraci.TraCICollision_type_set)
    __swig_setmethods__["lane"] = _libtraci.TraCICollision_lane_set
    __swig_getmethods__["lane"] = _libtraci.TraCICollision_lane_get
    if _newclass:
        lane = _swig_property(_libtraci.TraCICollision_lane_get, _libtraci.TraCICollision_lane_set)
    __swig_setmethods__["pos"] = _libtraci.TraCICollision_pos_set
    __swig_getmethods__["pos"] = _libtraci.TraCICollision_pos_get
    if _newclass:
        pos = _swig_property(_libtraci.TraCICollision_pos_get, _libtraci.TraCICollision_pos_set)

    def __init__(self):
        this = _libtraci.new_TraCICollision()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libtraci.delete_TraCICollision
    __del__ = lambda self: None
TraCICollision_swigregister = _libtraci.TraCICollision_swigregister
TraCICollision_swigregister(TraCICollision)

class TraCILogicVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TraCILogicVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TraCILogicVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _libtraci.TraCILogicVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libtraci.TraCILogicVector___nonzero__(self)

    def __bool__(self):
        return _libtraci.TraCILogicVector___bool__(self)

    def __len__(self):
        return _libtraci.TraCILogicVector___len__(self)

    def __getslice__(self, i, j):
        return _libtraci.TraCILogicVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libtraci.TraCILogicVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libtraci.TraCILogicVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libtraci.TraCILogicVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libtraci.TraCILogicVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libtraci.TraCILogicVector___setitem__(self, *args)

    def pop(self):
        return _libtraci.TraCILogicVector_pop(self)

    def append(self, x):
        return _libtraci.TraCILogicVector_append(self, x)

    def empty(self):
        return _libtraci.TraCILogicVector_empty(self)

    def size(self):
        return _libtraci.TraCILogicVector_size(self)

    def swap(self, v):
        return _libtraci.TraCILogicVector_swap(self, v)

    def begin(self):
        return _libtraci.TraCILogicVector_begin(self)

    def end(self):
        return _libtraci.TraCILogicVector_end(self)

    def rbegin(self):
        return _libtraci.TraCILogicVector_rbegin(self)

    def rend(self):
        return _libtraci.TraCILogicVector_rend(self)

    def clear(self):
        return _libtraci.TraCILogicVector_clear(self)

    def get_allocator(self):
        return _libtraci.TraCILogicVector_get_allocator(self)

    def pop_back(self):
        return _libtraci.TraCILogicVector_pop_back(self)

    def erase(self, *args):
        return _libtraci.TraCILogicVector_erase(self, *args)

    def __init__(self, *args):
        this = _libtraci.new_TraCILogicVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _libtraci.TraCILogicVector_push_back(self, x)

    def front(self):
        return _libtraci.TraCILogicVector_front(self)

    def back(self):
        return _libtraci.TraCILogicVector_back(self)

    def assign(self, n, x):
        return _libtraci.TraCILogicVector_assign(self, n, x)

    def resize(self, *args):
        return _libtraci.TraCILogicVector_resize(self, *args)

    def insert(self, *args):
        return _libtraci.TraCILogicVector_insert(self, *args)

    def reserve(self, n):
        return _libtraci.TraCILogicVector_reserve(self, n)

    def capacity(self):
        return _libtraci.TraCILogicVector_capacity(self)
    __swig_destroy__ = _libtraci.delete_TraCILogicVector
    __del__ = lambda self: None
TraCILogicVector_swigregister = _libtraci.TraCILogicVector_swigregister
TraCILogicVector_swigregister(TraCILogicVector)

class TraCIStageVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TraCIStageVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TraCIStageVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _libtraci.TraCIStageVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libtraci.TraCIStageVector___nonzero__(self)

    def __bool__(self):
        return _libtraci.TraCIStageVector___bool__(self)

    def __len__(self):
        return _libtraci.TraCIStageVector___len__(self)

    def __getslice__(self, i, j):
        return _libtraci.TraCIStageVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libtraci.TraCIStageVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libtraci.TraCIStageVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libtraci.TraCIStageVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libtraci.TraCIStageVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libtraci.TraCIStageVector___setitem__(self, *args)

    def pop(self):
        return _libtraci.TraCIStageVector_pop(self)

    def append(self, x):
        return _libtraci.TraCIStageVector_append(self, x)

    def empty(self):
        return _libtraci.TraCIStageVector_empty(self)

    def size(self):
        return _libtraci.TraCIStageVector_size(self)

    def swap(self, v):
        return _libtraci.TraCIStageVector_swap(self, v)

    def begin(self):
        return _libtraci.TraCIStageVector_begin(self)

    def end(self):
        return _libtraci.TraCIStageVector_end(self)

    def rbegin(self):
        return _libtraci.TraCIStageVector_rbegin(self)

    def rend(self):
        return _libtraci.TraCIStageVector_rend(self)

    def clear(self):
        return _libtraci.TraCIStageVector_clear(self)

    def get_allocator(self):
        return _libtraci.TraCIStageVector_get_allocator(self)

    def pop_back(self):
        return _libtraci.TraCIStageVector_pop_back(self)

    def erase(self, *args):
        return _libtraci.TraCIStageVector_erase(self, *args)

    def __init__(self, *args):
        this = _libtraci.new_TraCIStageVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _libtraci.TraCIStageVector_push_back(self, x)

    def front(self):
        return _libtraci.TraCIStageVector_front(self)

    def back(self):
        return _libtraci.TraCIStageVector_back(self)

    def assign(self, n, x):
        return _libtraci.TraCIStageVector_assign(self, n, x)

    def resize(self, *args):
        return _libtraci.TraCIStageVector_resize(self, *args)

    def insert(self, *args):
        return _libtraci.TraCIStageVector_insert(self, *args)

    def reserve(self, n):
        return _libtraci.TraCIStageVector_reserve(self, n)

    def capacity(self):
        return _libtraci.TraCIStageVector_capacity(self)
    __swig_destroy__ = _libtraci.delete_TraCIStageVector
    __del__ = lambda self: None
TraCIStageVector_swigregister = _libtraci.TraCIStageVector_swigregister
TraCIStageVector_swigregister(TraCIStageVector)

class TraCINextStopDataVector2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TraCINextStopDataVector2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TraCINextStopDataVector2, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _libtraci.TraCINextStopDataVector2_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libtraci.TraCINextStopDataVector2___nonzero__(self)

    def __bool__(self):
        return _libtraci.TraCINextStopDataVector2___bool__(self)

    def __len__(self):
        return _libtraci.TraCINextStopDataVector2___len__(self)

    def __getslice__(self, i, j):
        return _libtraci.TraCINextStopDataVector2___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libtraci.TraCINextStopDataVector2___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libtraci.TraCINextStopDataVector2___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libtraci.TraCINextStopDataVector2___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libtraci.TraCINextStopDataVector2___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libtraci.TraCINextStopDataVector2___setitem__(self, *args)

    def pop(self):
        return _libtraci.TraCINextStopDataVector2_pop(self)

    def append(self, x):
        return _libtraci.TraCINextStopDataVector2_append(self, x)

    def empty(self):
        return _libtraci.TraCINextStopDataVector2_empty(self)

    def size(self):
        return _libtraci.TraCINextStopDataVector2_size(self)

    def swap(self, v):
        return _libtraci.TraCINextStopDataVector2_swap(self, v)

    def begin(self):
        return _libtraci.TraCINextStopDataVector2_begin(self)

    def end(self):
        return _libtraci.TraCINextStopDataVector2_end(self)

    def rbegin(self):
        return _libtraci.TraCINextStopDataVector2_rbegin(self)

    def rend(self):
        return _libtraci.TraCINextStopDataVector2_rend(self)

    def clear(self):
        return _libtraci.TraCINextStopDataVector2_clear(self)

    def get_allocator(self):
        return _libtraci.TraCINextStopDataVector2_get_allocator(self)

    def pop_back(self):
        return _libtraci.TraCINextStopDataVector2_pop_back(self)

    def erase(self, *args):
        return _libtraci.TraCINextStopDataVector2_erase(self, *args)

    def __init__(self, *args):
        this = _libtraci.new_TraCINextStopDataVector2(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _libtraci.TraCINextStopDataVector2_push_back(self, x)

    def front(self):
        return _libtraci.TraCINextStopDataVector2_front(self)

    def back(self):
        return _libtraci.TraCINextStopDataVector2_back(self)

    def assign(self, n, x):
        return _libtraci.TraCINextStopDataVector2_assign(self, n, x)

    def resize(self, *args):
        return _libtraci.TraCINextStopDataVector2_resize(self, *args)

    def insert(self, *args):
        return _libtraci.TraCINextStopDataVector2_insert(self, *args)

    def reserve(self, n):
        return _libtraci.TraCINextStopDataVector2_reserve(self, n)

    def capacity(self):
        return _libtraci.TraCINextStopDataVector2_capacity(self)
    __swig_destroy__ = _libtraci.delete_TraCINextStopDataVector2
    __del__ = lambda self: None
TraCINextStopDataVector2_swigregister = _libtraci.TraCINextStopDataVector2_swigregister
TraCINextStopDataVector2_swigregister(TraCINextStopDataVector2)

class TraCIReservationVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TraCIReservationVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TraCIReservationVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _libtraci.TraCIReservationVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libtraci.TraCIReservationVector___nonzero__(self)

    def __bool__(self):
        return _libtraci.TraCIReservationVector___bool__(self)

    def __len__(self):
        return _libtraci.TraCIReservationVector___len__(self)

    def __getslice__(self, i, j):
        return _libtraci.TraCIReservationVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libtraci.TraCIReservationVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libtraci.TraCIReservationVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libtraci.TraCIReservationVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libtraci.TraCIReservationVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libtraci.TraCIReservationVector___setitem__(self, *args)

    def pop(self):
        return _libtraci.TraCIReservationVector_pop(self)

    def append(self, x):
        return _libtraci.TraCIReservationVector_append(self, x)

    def empty(self):
        return _libtraci.TraCIReservationVector_empty(self)

    def size(self):
        return _libtraci.TraCIReservationVector_size(self)

    def swap(self, v):
        return _libtraci.TraCIReservationVector_swap(self, v)

    def begin(self):
        return _libtraci.TraCIReservationVector_begin(self)

    def end(self):
        return _libtraci.TraCIReservationVector_end(self)

    def rbegin(self):
        return _libtraci.TraCIReservationVector_rbegin(self)

    def rend(self):
        return _libtraci.TraCIReservationVector_rend(self)

    def clear(self):
        return _libtraci.TraCIReservationVector_clear(self)

    def get_allocator(self):
        return _libtraci.TraCIReservationVector_get_allocator(self)

    def pop_back(self):
        return _libtraci.TraCIReservationVector_pop_back(self)

    def erase(self, *args):
        return _libtraci.TraCIReservationVector_erase(self, *args)

    def __init__(self, *args):
        this = _libtraci.new_TraCIReservationVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _libtraci.TraCIReservationVector_push_back(self, x)

    def front(self):
        return _libtraci.TraCIReservationVector_front(self)

    def back(self):
        return _libtraci.TraCIReservationVector_back(self)

    def assign(self, n, x):
        return _libtraci.TraCIReservationVector_assign(self, n, x)

    def resize(self, *args):
        return _libtraci.TraCIReservationVector_resize(self, *args)

    def insert(self, *args):
        return _libtraci.TraCIReservationVector_insert(self, *args)

    def reserve(self, n):
        return _libtraci.TraCIReservationVector_reserve(self, n)

    def capacity(self):
        return _libtraci.TraCIReservationVector_capacity(self)
    __swig_destroy__ = _libtraci.delete_TraCIReservationVector
    __del__ = lambda self: None
TraCIReservationVector_swigregister = _libtraci.TraCIReservationVector_swigregister
TraCIReservationVector_swigregister(TraCIReservationVector)

class edge(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, edge, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, edge, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        getAdaptedTraveltime = staticmethod(_libtraci.edge_getAdaptedTraveltime)
    else:
        getAdaptedTraveltime = _libtraci.edge_getAdaptedTraveltime
    if _newclass:
        getEffort = staticmethod(_libtraci.edge_getEffort)
    else:
        getEffort = _libtraci.edge_getEffort
    if _newclass:
        getTraveltime = staticmethod(_libtraci.edge_getTraveltime)
    else:
        getTraveltime = _libtraci.edge_getTraveltime
    if _newclass:
        getWaitingTime = staticmethod(_libtraci.edge_getWaitingTime)
    else:
        getWaitingTime = _libtraci.edge_getWaitingTime
    if _newclass:
        getLastStepPersonIDs = staticmethod(_libtraci.edge_getLastStepPersonIDs)
    else:
        getLastStepPersonIDs = _libtraci.edge_getLastStepPersonIDs
    if _newclass:
        getLastStepVehicleIDs = staticmethod(_libtraci.edge_getLastStepVehicleIDs)
    else:
        getLastStepVehicleIDs = _libtraci.edge_getLastStepVehicleIDs
    if _newclass:
        getCO2Emission = staticmethod(_libtraci.edge_getCO2Emission)
    else:
        getCO2Emission = _libtraci.edge_getCO2Emission
    if _newclass:
        getCOEmission = staticmethod(_libtraci.edge_getCOEmission)
    else:
        getCOEmission = _libtraci.edge_getCOEmission
    if _newclass:
        getHCEmission = staticmethod(_libtraci.edge_getHCEmission)
    else:
        getHCEmission = _libtraci.edge_getHCEmission
    if _newclass:
        getPMxEmission = staticmethod(_libtraci.edge_getPMxEmission)
    else:
        getPMxEmission = _libtraci.edge_getPMxEmission
    if _newclass:
        getNOxEmission = staticmethod(_libtraci.edge_getNOxEmission)
    else:
        getNOxEmission = _libtraci.edge_getNOxEmission
    if _newclass:
        getFuelConsumption = staticmethod(_libtraci.edge_getFuelConsumption)
    else:
        getFuelConsumption = _libtraci.edge_getFuelConsumption
    if _newclass:
        getNoiseEmission = staticmethod(_libtraci.edge_getNoiseEmission)
    else:
        getNoiseEmission = _libtraci.edge_getNoiseEmission
    if _newclass:
        getElectricityConsumption = staticmethod(_libtraci.edge_getElectricityConsumption)
    else:
        getElectricityConsumption = _libtraci.edge_getElectricityConsumption
    if _newclass:
        getLastStepVehicleNumber = staticmethod(_libtraci.edge_getLastStepVehicleNumber)
    else:
        getLastStepVehicleNumber = _libtraci.edge_getLastStepVehicleNumber
    if _newclass:
        getLastStepMeanSpeed = staticmethod(_libtraci.edge_getLastStepMeanSpeed)
    else:
        getLastStepMeanSpeed = _libtraci.edge_getLastStepMeanSpeed
    if _newclass:
        getLastStepOccupancy = staticmethod(_libtraci.edge_getLastStepOccupancy)
    else:
        getLastStepOccupancy = _libtraci.edge_getLastStepOccupancy
    if _newclass:
        getLastStepHaltingNumber = staticmethod(_libtraci.edge_getLastStepHaltingNumber)
    else:
        getLastStepHaltingNumber = _libtraci.edge_getLastStepHaltingNumber
    if _newclass:
        getLastStepLength = staticmethod(_libtraci.edge_getLastStepLength)
    else:
        getLastStepLength = _libtraci.edge_getLastStepLength
    if _newclass:
        getLaneNumber = staticmethod(_libtraci.edge_getLaneNumber)
    else:
        getLaneNumber = _libtraci.edge_getLaneNumber
    if _newclass:
        getStreetName = staticmethod(_libtraci.edge_getStreetName)
    else:
        getStreetName = _libtraci.edge_getStreetName
    if _newclass:
        getIDList = staticmethod(_libtraci.edge_getIDList)
    else:
        getIDList = _libtraci.edge_getIDList
    if _newclass:
        getIDCount = staticmethod(_libtraci.edge_getIDCount)
    else:
        getIDCount = _libtraci.edge_getIDCount
    if _newclass:
        getParameter = staticmethod(_libtraci.edge_getParameter)
    else:
        getParameter = _libtraci.edge_getParameter
    if _newclass:
        getParameterWithKey = staticmethod(_libtraci.edge_getParameterWithKey)
    else:
        getParameterWithKey = _libtraci.edge_getParameterWithKey
    if _newclass:
        setParameter = staticmethod(_libtraci.edge_setParameter)
    else:
        setParameter = _libtraci.edge_setParameter
    if _newclass:
        subscribe = staticmethod(_libtraci.edge_subscribe)
    else:
        subscribe = _libtraci.edge_subscribe
    if _newclass:
        unsubscribe = staticmethod(_libtraci.edge_unsubscribe)
    else:
        unsubscribe = _libtraci.edge_unsubscribe
    if _newclass:
        subscribeContext = staticmethod(_libtraci.edge_subscribeContext)
    else:
        subscribeContext = _libtraci.edge_subscribeContext
    if _newclass:
        unsubscribeContext = staticmethod(_libtraci.edge_unsubscribeContext)
    else:
        unsubscribeContext = _libtraci.edge_unsubscribeContext
    if _newclass:
        getAllSubscriptionResults = staticmethod(_libtraci.edge_getAllSubscriptionResults)
    else:
        getAllSubscriptionResults = _libtraci.edge_getAllSubscriptionResults
    if _newclass:
        getSubscriptionResults = staticmethod(_libtraci.edge_getSubscriptionResults)
    else:
        getSubscriptionResults = _libtraci.edge_getSubscriptionResults
    if _newclass:
        getAllContextSubscriptionResults = staticmethod(_libtraci.edge_getAllContextSubscriptionResults)
    else:
        getAllContextSubscriptionResults = _libtraci.edge_getAllContextSubscriptionResults
    if _newclass:
        getContextSubscriptionResults = staticmethod(_libtraci.edge_getContextSubscriptionResults)
    else:
        getContextSubscriptionResults = _libtraci.edge_getContextSubscriptionResults
    if _newclass:
        subscribeParameterWithKey = staticmethod(_libtraci.edge_subscribeParameterWithKey)
    else:
        subscribeParameterWithKey = _libtraci.edge_subscribeParameterWithKey
    if _newclass:
        setAllowedVehicleClasses = staticmethod(_libtraci.edge_setAllowedVehicleClasses)
    else:
        setAllowedVehicleClasses = _libtraci.edge_setAllowedVehicleClasses
    if _newclass:
        setDisallowedVehicleClasses = staticmethod(_libtraci.edge_setDisallowedVehicleClasses)
    else:
        setDisallowedVehicleClasses = _libtraci.edge_setDisallowedVehicleClasses
    if _newclass:
        adaptTraveltime = staticmethod(_libtraci.edge_adaptTraveltime)
    else:
        adaptTraveltime = _libtraci.edge_adaptTraveltime
    if _newclass:
        setEffort = staticmethod(_libtraci.edge_setEffort)
    else:
        setEffort = _libtraci.edge_setEffort
    if _newclass:
        setMaxSpeed = staticmethod(_libtraci.edge_setMaxSpeed)
    else:
        setMaxSpeed = _libtraci.edge_setMaxSpeed
    __swig_destroy__ = _libtraci.delete_edge
    __del__ = lambda self: None
edge_swigregister = _libtraci.edge_swigregister
edge_swigregister(edge)

def edge_getAdaptedTraveltime(edgeID, time):
    return _libtraci.edge_getAdaptedTraveltime(edgeID, time)
edge_getAdaptedTraveltime = _libtraci.edge_getAdaptedTraveltime

def edge_getEffort(edgeID, time):
    return _libtraci.edge_getEffort(edgeID, time)
edge_getEffort = _libtraci.edge_getEffort

def edge_getTraveltime(edgeID):
    return _libtraci.edge_getTraveltime(edgeID)
edge_getTraveltime = _libtraci.edge_getTraveltime

def edge_getWaitingTime(edgeID):
    return _libtraci.edge_getWaitingTime(edgeID)
edge_getWaitingTime = _libtraci.edge_getWaitingTime

def edge_getLastStepPersonIDs(edgeID):
    return _libtraci.edge_getLastStepPersonIDs(edgeID)
edge_getLastStepPersonIDs = _libtraci.edge_getLastStepPersonIDs

def edge_getLastStepVehicleIDs(edgeID):
    return _libtraci.edge_getLastStepVehicleIDs(edgeID)
edge_getLastStepVehicleIDs = _libtraci.edge_getLastStepVehicleIDs

def edge_getCO2Emission(edgeID):
    return _libtraci.edge_getCO2Emission(edgeID)
edge_getCO2Emission = _libtraci.edge_getCO2Emission

def edge_getCOEmission(edgeID):
    return _libtraci.edge_getCOEmission(edgeID)
edge_getCOEmission = _libtraci.edge_getCOEmission

def edge_getHCEmission(edgeID):
    return _libtraci.edge_getHCEmission(edgeID)
edge_getHCEmission = _libtraci.edge_getHCEmission

def edge_getPMxEmission(edgeID):
    return _libtraci.edge_getPMxEmission(edgeID)
edge_getPMxEmission = _libtraci.edge_getPMxEmission

def edge_getNOxEmission(edgeID):
    return _libtraci.edge_getNOxEmission(edgeID)
edge_getNOxEmission = _libtraci.edge_getNOxEmission

def edge_getFuelConsumption(edgeID):
    return _libtraci.edge_getFuelConsumption(edgeID)
edge_getFuelConsumption = _libtraci.edge_getFuelConsumption

def edge_getNoiseEmission(edgeID):
    return _libtraci.edge_getNoiseEmission(edgeID)
edge_getNoiseEmission = _libtraci.edge_getNoiseEmission

def edge_getElectricityConsumption(edgeID):
    return _libtraci.edge_getElectricityConsumption(edgeID)
edge_getElectricityConsumption = _libtraci.edge_getElectricityConsumption

def edge_getLastStepVehicleNumber(edgeID):
    return _libtraci.edge_getLastStepVehicleNumber(edgeID)
edge_getLastStepVehicleNumber = _libtraci.edge_getLastStepVehicleNumber

def edge_getLastStepMeanSpeed(edgeID):
    return _libtraci.edge_getLastStepMeanSpeed(edgeID)
edge_getLastStepMeanSpeed = _libtraci.edge_getLastStepMeanSpeed

def edge_getLastStepOccupancy(edgeID):
    return _libtraci.edge_getLastStepOccupancy(edgeID)
edge_getLastStepOccupancy = _libtraci.edge_getLastStepOccupancy

def edge_getLastStepHaltingNumber(edgeID):
    return _libtraci.edge_getLastStepHaltingNumber(edgeID)
edge_getLastStepHaltingNumber = _libtraci.edge_getLastStepHaltingNumber

def edge_getLastStepLength(edgeID):
    return _libtraci.edge_getLastStepLength(edgeID)
edge_getLastStepLength = _libtraci.edge_getLastStepLength

def edge_getLaneNumber(edgeID):
    return _libtraci.edge_getLaneNumber(edgeID)
edge_getLaneNumber = _libtraci.edge_getLaneNumber

def edge_getStreetName(edgeID):
    return _libtraci.edge_getStreetName(edgeID)
edge_getStreetName = _libtraci.edge_getStreetName

def edge_getIDList():
    return _libtraci.edge_getIDList()
edge_getIDList = _libtraci.edge_getIDList

def edge_getIDCount():
    return _libtraci.edge_getIDCount()
edge_getIDCount = _libtraci.edge_getIDCount

def edge_getParameter(objectID, param):
    return _libtraci.edge_getParameter(objectID, param)
edge_getParameter = _libtraci.edge_getParameter

def edge_getParameterWithKey(objectID, key):
    return _libtraci.edge_getParameterWithKey(objectID, key)
edge_getParameterWithKey = _libtraci.edge_getParameterWithKey

def edge_setParameter(objectID, param, value):
    return _libtraci.edge_setParameter(objectID, param, value)
edge_setParameter = _libtraci.edge_setParameter

def edge_subscribe(*args, **kwargs):
    return _libtraci.edge_subscribe(*args, **kwargs)
edge_subscribe = _libtraci.edge_subscribe

def edge_unsubscribe(objectID):
    return _libtraci.edge_unsubscribe(objectID)
edge_unsubscribe = _libtraci.edge_unsubscribe

def edge_subscribeContext(*args, **kwargs):
    return _libtraci.edge_subscribeContext(*args, **kwargs)
edge_subscribeContext = _libtraci.edge_subscribeContext

def edge_unsubscribeContext(objectID, domain, dist):
    return _libtraci.edge_unsubscribeContext(objectID, domain, dist)
edge_unsubscribeContext = _libtraci.edge_unsubscribeContext

def edge_getAllSubscriptionResults():
    return _libtraci.edge_getAllSubscriptionResults()
edge_getAllSubscriptionResults = _libtraci.edge_getAllSubscriptionResults

def edge_getSubscriptionResults(objectID):
    return _libtraci.edge_getSubscriptionResults(objectID)
edge_getSubscriptionResults = _libtraci.edge_getSubscriptionResults

def edge_getAllContextSubscriptionResults():
    return _libtraci.edge_getAllContextSubscriptionResults()
edge_getAllContextSubscriptionResults = _libtraci.edge_getAllContextSubscriptionResults

def edge_getContextSubscriptionResults(objectID):
    return _libtraci.edge_getContextSubscriptionResults(objectID)
edge_getContextSubscriptionResults = _libtraci.edge_getContextSubscriptionResults

def edge_subscribeParameterWithKey(*args, **kwargs):
    return _libtraci.edge_subscribeParameterWithKey(*args, **kwargs)
edge_subscribeParameterWithKey = _libtraci.edge_subscribeParameterWithKey

def edge_setAllowedVehicleClasses(edgeID, vector):
    return _libtraci.edge_setAllowedVehicleClasses(edgeID, vector)
edge_setAllowedVehicleClasses = _libtraci.edge_setAllowedVehicleClasses

def edge_setDisallowedVehicleClasses(edgeID, classes):
    return _libtraci.edge_setDisallowedVehicleClasses(edgeID, classes)
edge_setDisallowedVehicleClasses = _libtraci.edge_setDisallowedVehicleClasses

def edge_adaptTraveltime(*args, **kwargs):
    return _libtraci.edge_adaptTraveltime(*args, **kwargs)
edge_adaptTraveltime = _libtraci.edge_adaptTraveltime

def edge_setEffort(*args, **kwargs):
    return _libtraci.edge_setEffort(*args, **kwargs)
edge_setEffort = _libtraci.edge_setEffort

def edge_setMaxSpeed(edgeID, speed):
    return _libtraci.edge_setMaxSpeed(edgeID, speed)
edge_setMaxSpeed = _libtraci.edge_setMaxSpeed

class inductionloop(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, inductionloop, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, inductionloop, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        getPosition = staticmethod(_libtraci.inductionloop_getPosition)
    else:
        getPosition = _libtraci.inductionloop_getPosition
    if _newclass:
        getLaneID = staticmethod(_libtraci.inductionloop_getLaneID)
    else:
        getLaneID = _libtraci.inductionloop_getLaneID
    if _newclass:
        getLastStepVehicleNumber = staticmethod(_libtraci.inductionloop_getLastStepVehicleNumber)
    else:
        getLastStepVehicleNumber = _libtraci.inductionloop_getLastStepVehicleNumber
    if _newclass:
        getLastStepMeanSpeed = staticmethod(_libtraci.inductionloop_getLastStepMeanSpeed)
    else:
        getLastStepMeanSpeed = _libtraci.inductionloop_getLastStepMeanSpeed
    if _newclass:
        getLastStepVehicleIDs = staticmethod(_libtraci.inductionloop_getLastStepVehicleIDs)
    else:
        getLastStepVehicleIDs = _libtraci.inductionloop_getLastStepVehicleIDs
    if _newclass:
        getLastStepOccupancy = staticmethod(_libtraci.inductionloop_getLastStepOccupancy)
    else:
        getLastStepOccupancy = _libtraci.inductionloop_getLastStepOccupancy
    if _newclass:
        getLastStepMeanLength = staticmethod(_libtraci.inductionloop_getLastStepMeanLength)
    else:
        getLastStepMeanLength = _libtraci.inductionloop_getLastStepMeanLength
    if _newclass:
        getTimeSinceDetection = staticmethod(_libtraci.inductionloop_getTimeSinceDetection)
    else:
        getTimeSinceDetection = _libtraci.inductionloop_getTimeSinceDetection
    if _newclass:
        getVehicleData = staticmethod(_libtraci.inductionloop_getVehicleData)
    else:
        getVehicleData = _libtraci.inductionloop_getVehicleData
    if _newclass:
        getIDList = staticmethod(_libtraci.inductionloop_getIDList)
    else:
        getIDList = _libtraci.inductionloop_getIDList
    if _newclass:
        getIDCount = staticmethod(_libtraci.inductionloop_getIDCount)
    else:
        getIDCount = _libtraci.inductionloop_getIDCount
    if _newclass:
        getParameter = staticmethod(_libtraci.inductionloop_getParameter)
    else:
        getParameter = _libtraci.inductionloop_getParameter
    if _newclass:
        getParameterWithKey = staticmethod(_libtraci.inductionloop_getParameterWithKey)
    else:
        getParameterWithKey = _libtraci.inductionloop_getParameterWithKey
    if _newclass:
        setParameter = staticmethod(_libtraci.inductionloop_setParameter)
    else:
        setParameter = _libtraci.inductionloop_setParameter
    if _newclass:
        subscribe = staticmethod(_libtraci.inductionloop_subscribe)
    else:
        subscribe = _libtraci.inductionloop_subscribe
    if _newclass:
        unsubscribe = staticmethod(_libtraci.inductionloop_unsubscribe)
    else:
        unsubscribe = _libtraci.inductionloop_unsubscribe
    if _newclass:
        subscribeContext = staticmethod(_libtraci.inductionloop_subscribeContext)
    else:
        subscribeContext = _libtraci.inductionloop_subscribeContext
    if _newclass:
        unsubscribeContext = staticmethod(_libtraci.inductionloop_unsubscribeContext)
    else:
        unsubscribeContext = _libtraci.inductionloop_unsubscribeContext
    if _newclass:
        getAllSubscriptionResults = staticmethod(_libtraci.inductionloop_getAllSubscriptionResults)
    else:
        getAllSubscriptionResults = _libtraci.inductionloop_getAllSubscriptionResults
    if _newclass:
        getSubscriptionResults = staticmethod(_libtraci.inductionloop_getSubscriptionResults)
    else:
        getSubscriptionResults = _libtraci.inductionloop_getSubscriptionResults
    if _newclass:
        getAllContextSubscriptionResults = staticmethod(_libtraci.inductionloop_getAllContextSubscriptionResults)
    else:
        getAllContextSubscriptionResults = _libtraci.inductionloop_getAllContextSubscriptionResults
    if _newclass:
        getContextSubscriptionResults = staticmethod(_libtraci.inductionloop_getContextSubscriptionResults)
    else:
        getContextSubscriptionResults = _libtraci.inductionloop_getContextSubscriptionResults
    if _newclass:
        subscribeParameterWithKey = staticmethod(_libtraci.inductionloop_subscribeParameterWithKey)
    else:
        subscribeParameterWithKey = _libtraci.inductionloop_subscribeParameterWithKey
    __swig_destroy__ = _libtraci.delete_inductionloop
    __del__ = lambda self: None
inductionloop_swigregister = _libtraci.inductionloop_swigregister
inductionloop_swigregister(inductionloop)

def inductionloop_getPosition(detID):
    return _libtraci.inductionloop_getPosition(detID)
inductionloop_getPosition = _libtraci.inductionloop_getPosition

def inductionloop_getLaneID(detID):
    return _libtraci.inductionloop_getLaneID(detID)
inductionloop_getLaneID = _libtraci.inductionloop_getLaneID

def inductionloop_getLastStepVehicleNumber(detID):
    return _libtraci.inductionloop_getLastStepVehicleNumber(detID)
inductionloop_getLastStepVehicleNumber = _libtraci.inductionloop_getLastStepVehicleNumber

def inductionloop_getLastStepMeanSpeed(detID):
    return _libtraci.inductionloop_getLastStepMeanSpeed(detID)
inductionloop_getLastStepMeanSpeed = _libtraci.inductionloop_getLastStepMeanSpeed

def inductionloop_getLastStepVehicleIDs(detID):
    return _libtraci.inductionloop_getLastStepVehicleIDs(detID)
inductionloop_getLastStepVehicleIDs = _libtraci.inductionloop_getLastStepVehicleIDs

def inductionloop_getLastStepOccupancy(detID):
    return _libtraci.inductionloop_getLastStepOccupancy(detID)
inductionloop_getLastStepOccupancy = _libtraci.inductionloop_getLastStepOccupancy

def inductionloop_getLastStepMeanLength(detID):
    return _libtraci.inductionloop_getLastStepMeanLength(detID)
inductionloop_getLastStepMeanLength = _libtraci.inductionloop_getLastStepMeanLength

def inductionloop_getTimeSinceDetection(detID):
    return _libtraci.inductionloop_getTimeSinceDetection(detID)
inductionloop_getTimeSinceDetection = _libtraci.inductionloop_getTimeSinceDetection

def inductionloop_getVehicleData(detID):
    return _libtraci.inductionloop_getVehicleData(detID)
inductionloop_getVehicleData = _libtraci.inductionloop_getVehicleData

def inductionloop_getIDList():
    return _libtraci.inductionloop_getIDList()
inductionloop_getIDList = _libtraci.inductionloop_getIDList

def inductionloop_getIDCount():
    return _libtraci.inductionloop_getIDCount()
inductionloop_getIDCount = _libtraci.inductionloop_getIDCount

def inductionloop_getParameter(objectID, param):
    return _libtraci.inductionloop_getParameter(objectID, param)
inductionloop_getParameter = _libtraci.inductionloop_getParameter

def inductionloop_getParameterWithKey(objectID, key):
    return _libtraci.inductionloop_getParameterWithKey(objectID, key)
inductionloop_getParameterWithKey = _libtraci.inductionloop_getParameterWithKey

def inductionloop_setParameter(objectID, param, value):
    return _libtraci.inductionloop_setParameter(objectID, param, value)
inductionloop_setParameter = _libtraci.inductionloop_setParameter

def inductionloop_subscribe(*args, **kwargs):
    return _libtraci.inductionloop_subscribe(*args, **kwargs)
inductionloop_subscribe = _libtraci.inductionloop_subscribe

def inductionloop_unsubscribe(objectID):
    return _libtraci.inductionloop_unsubscribe(objectID)
inductionloop_unsubscribe = _libtraci.inductionloop_unsubscribe

def inductionloop_subscribeContext(*args, **kwargs):
    return _libtraci.inductionloop_subscribeContext(*args, **kwargs)
inductionloop_subscribeContext = _libtraci.inductionloop_subscribeContext

def inductionloop_unsubscribeContext(objectID, domain, dist):
    return _libtraci.inductionloop_unsubscribeContext(objectID, domain, dist)
inductionloop_unsubscribeContext = _libtraci.inductionloop_unsubscribeContext

def inductionloop_getAllSubscriptionResults():
    return _libtraci.inductionloop_getAllSubscriptionResults()
inductionloop_getAllSubscriptionResults = _libtraci.inductionloop_getAllSubscriptionResults

def inductionloop_getSubscriptionResults(objectID):
    return _libtraci.inductionloop_getSubscriptionResults(objectID)
inductionloop_getSubscriptionResults = _libtraci.inductionloop_getSubscriptionResults

def inductionloop_getAllContextSubscriptionResults():
    return _libtraci.inductionloop_getAllContextSubscriptionResults()
inductionloop_getAllContextSubscriptionResults = _libtraci.inductionloop_getAllContextSubscriptionResults

def inductionloop_getContextSubscriptionResults(objectID):
    return _libtraci.inductionloop_getContextSubscriptionResults(objectID)
inductionloop_getContextSubscriptionResults = _libtraci.inductionloop_getContextSubscriptionResults

def inductionloop_subscribeParameterWithKey(*args, **kwargs):
    return _libtraci.inductionloop_subscribeParameterWithKey(*args, **kwargs)
inductionloop_subscribeParameterWithKey = _libtraci.inductionloop_subscribeParameterWithKey

class junction(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, junction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, junction, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        getPosition = staticmethod(_libtraci.junction_getPosition)
    else:
        getPosition = _libtraci.junction_getPosition
    if _newclass:
        getShape = staticmethod(_libtraci.junction_getShape)
    else:
        getShape = _libtraci.junction_getShape
    if _newclass:
        getIDList = staticmethod(_libtraci.junction_getIDList)
    else:
        getIDList = _libtraci.junction_getIDList
    if _newclass:
        getIDCount = staticmethod(_libtraci.junction_getIDCount)
    else:
        getIDCount = _libtraci.junction_getIDCount
    if _newclass:
        getParameter = staticmethod(_libtraci.junction_getParameter)
    else:
        getParameter = _libtraci.junction_getParameter
    if _newclass:
        getParameterWithKey = staticmethod(_libtraci.junction_getParameterWithKey)
    else:
        getParameterWithKey = _libtraci.junction_getParameterWithKey
    if _newclass:
        setParameter = staticmethod(_libtraci.junction_setParameter)
    else:
        setParameter = _libtraci.junction_setParameter
    if _newclass:
        subscribe = staticmethod(_libtraci.junction_subscribe)
    else:
        subscribe = _libtraci.junction_subscribe
    if _newclass:
        unsubscribe = staticmethod(_libtraci.junction_unsubscribe)
    else:
        unsubscribe = _libtraci.junction_unsubscribe
    if _newclass:
        subscribeContext = staticmethod(_libtraci.junction_subscribeContext)
    else:
        subscribeContext = _libtraci.junction_subscribeContext
    if _newclass:
        unsubscribeContext = staticmethod(_libtraci.junction_unsubscribeContext)
    else:
        unsubscribeContext = _libtraci.junction_unsubscribeContext
    if _newclass:
        getAllSubscriptionResults = staticmethod(_libtraci.junction_getAllSubscriptionResults)
    else:
        getAllSubscriptionResults = _libtraci.junction_getAllSubscriptionResults
    if _newclass:
        getSubscriptionResults = staticmethod(_libtraci.junction_getSubscriptionResults)
    else:
        getSubscriptionResults = _libtraci.junction_getSubscriptionResults
    if _newclass:
        getAllContextSubscriptionResults = staticmethod(_libtraci.junction_getAllContextSubscriptionResults)
    else:
        getAllContextSubscriptionResults = _libtraci.junction_getAllContextSubscriptionResults
    if _newclass:
        getContextSubscriptionResults = staticmethod(_libtraci.junction_getContextSubscriptionResults)
    else:
        getContextSubscriptionResults = _libtraci.junction_getContextSubscriptionResults
    if _newclass:
        subscribeParameterWithKey = staticmethod(_libtraci.junction_subscribeParameterWithKey)
    else:
        subscribeParameterWithKey = _libtraci.junction_subscribeParameterWithKey
    __swig_destroy__ = _libtraci.delete_junction
    __del__ = lambda self: None
junction_swigregister = _libtraci.junction_swigregister
junction_swigregister(junction)

def junction_getPosition(junctionID, includeZ=False):
    return _libtraci.junction_getPosition(junctionID, includeZ)
junction_getPosition = _libtraci.junction_getPosition

def junction_getShape(junctionID):
    return _libtraci.junction_getShape(junctionID)
junction_getShape = _libtraci.junction_getShape

def junction_getIDList():
    return _libtraci.junction_getIDList()
junction_getIDList = _libtraci.junction_getIDList

def junction_getIDCount():
    return _libtraci.junction_getIDCount()
junction_getIDCount = _libtraci.junction_getIDCount

def junction_getParameter(objectID, param):
    return _libtraci.junction_getParameter(objectID, param)
junction_getParameter = _libtraci.junction_getParameter

def junction_getParameterWithKey(objectID, key):
    return _libtraci.junction_getParameterWithKey(objectID, key)
junction_getParameterWithKey = _libtraci.junction_getParameterWithKey

def junction_setParameter(objectID, param, value):
    return _libtraci.junction_setParameter(objectID, param, value)
junction_setParameter = _libtraci.junction_setParameter

def junction_subscribe(*args, **kwargs):
    return _libtraci.junction_subscribe(*args, **kwargs)
junction_subscribe = _libtraci.junction_subscribe

def junction_unsubscribe(objectID):
    return _libtraci.junction_unsubscribe(objectID)
junction_unsubscribe = _libtraci.junction_unsubscribe

def junction_subscribeContext(*args, **kwargs):
    return _libtraci.junction_subscribeContext(*args, **kwargs)
junction_subscribeContext = _libtraci.junction_subscribeContext

def junction_unsubscribeContext(objectID, domain, dist):
    return _libtraci.junction_unsubscribeContext(objectID, domain, dist)
junction_unsubscribeContext = _libtraci.junction_unsubscribeContext

def junction_getAllSubscriptionResults():
    return _libtraci.junction_getAllSubscriptionResults()
junction_getAllSubscriptionResults = _libtraci.junction_getAllSubscriptionResults

def junction_getSubscriptionResults(objectID):
    return _libtraci.junction_getSubscriptionResults(objectID)
junction_getSubscriptionResults = _libtraci.junction_getSubscriptionResults

def junction_getAllContextSubscriptionResults():
    return _libtraci.junction_getAllContextSubscriptionResults()
junction_getAllContextSubscriptionResults = _libtraci.junction_getAllContextSubscriptionResults

def junction_getContextSubscriptionResults(objectID):
    return _libtraci.junction_getContextSubscriptionResults(objectID)
junction_getContextSubscriptionResults = _libtraci.junction_getContextSubscriptionResults

def junction_subscribeParameterWithKey(*args, **kwargs):
    return _libtraci.junction_subscribeParameterWithKey(*args, **kwargs)
junction_subscribeParameterWithKey = _libtraci.junction_subscribeParameterWithKey

class lanearea(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, lanearea, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, lanearea, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        getJamLengthVehicle = staticmethod(_libtraci.lanearea_getJamLengthVehicle)
    else:
        getJamLengthVehicle = _libtraci.lanearea_getJamLengthVehicle
    if _newclass:
        getJamLengthMeters = staticmethod(_libtraci.lanearea_getJamLengthMeters)
    else:
        getJamLengthMeters = _libtraci.lanearea_getJamLengthMeters
    if _newclass:
        getLastStepMeanSpeed = staticmethod(_libtraci.lanearea_getLastStepMeanSpeed)
    else:
        getLastStepMeanSpeed = _libtraci.lanearea_getLastStepMeanSpeed
    if _newclass:
        getLastStepVehicleIDs = staticmethod(_libtraci.lanearea_getLastStepVehicleIDs)
    else:
        getLastStepVehicleIDs = _libtraci.lanearea_getLastStepVehicleIDs
    if _newclass:
        getLastStepOccupancy = staticmethod(_libtraci.lanearea_getLastStepOccupancy)
    else:
        getLastStepOccupancy = _libtraci.lanearea_getLastStepOccupancy
    if _newclass:
        getPosition = staticmethod(_libtraci.lanearea_getPosition)
    else:
        getPosition = _libtraci.lanearea_getPosition
    if _newclass:
        getLaneID = staticmethod(_libtraci.lanearea_getLaneID)
    else:
        getLaneID = _libtraci.lanearea_getLaneID
    if _newclass:
        getLength = staticmethod(_libtraci.lanearea_getLength)
    else:
        getLength = _libtraci.lanearea_getLength
    if _newclass:
        getLastStepVehicleNumber = staticmethod(_libtraci.lanearea_getLastStepVehicleNumber)
    else:
        getLastStepVehicleNumber = _libtraci.lanearea_getLastStepVehicleNumber
    if _newclass:
        getLastStepHaltingNumber = staticmethod(_libtraci.lanearea_getLastStepHaltingNumber)
    else:
        getLastStepHaltingNumber = _libtraci.lanearea_getLastStepHaltingNumber
    if _newclass:
        getIDList = staticmethod(_libtraci.lanearea_getIDList)
    else:
        getIDList = _libtraci.lanearea_getIDList
    if _newclass:
        getIDCount = staticmethod(_libtraci.lanearea_getIDCount)
    else:
        getIDCount = _libtraci.lanearea_getIDCount
    if _newclass:
        getParameter = staticmethod(_libtraci.lanearea_getParameter)
    else:
        getParameter = _libtraci.lanearea_getParameter
    if _newclass:
        getParameterWithKey = staticmethod(_libtraci.lanearea_getParameterWithKey)
    else:
        getParameterWithKey = _libtraci.lanearea_getParameterWithKey
    if _newclass:
        setParameter = staticmethod(_libtraci.lanearea_setParameter)
    else:
        setParameter = _libtraci.lanearea_setParameter
    if _newclass:
        subscribe = staticmethod(_libtraci.lanearea_subscribe)
    else:
        subscribe = _libtraci.lanearea_subscribe
    if _newclass:
        unsubscribe = staticmethod(_libtraci.lanearea_unsubscribe)
    else:
        unsubscribe = _libtraci.lanearea_unsubscribe
    if _newclass:
        subscribeContext = staticmethod(_libtraci.lanearea_subscribeContext)
    else:
        subscribeContext = _libtraci.lanearea_subscribeContext
    if _newclass:
        unsubscribeContext = staticmethod(_libtraci.lanearea_unsubscribeContext)
    else:
        unsubscribeContext = _libtraci.lanearea_unsubscribeContext
    if _newclass:
        getAllSubscriptionResults = staticmethod(_libtraci.lanearea_getAllSubscriptionResults)
    else:
        getAllSubscriptionResults = _libtraci.lanearea_getAllSubscriptionResults
    if _newclass:
        getSubscriptionResults = staticmethod(_libtraci.lanearea_getSubscriptionResults)
    else:
        getSubscriptionResults = _libtraci.lanearea_getSubscriptionResults
    if _newclass:
        getAllContextSubscriptionResults = staticmethod(_libtraci.lanearea_getAllContextSubscriptionResults)
    else:
        getAllContextSubscriptionResults = _libtraci.lanearea_getAllContextSubscriptionResults
    if _newclass:
        getContextSubscriptionResults = staticmethod(_libtraci.lanearea_getContextSubscriptionResults)
    else:
        getContextSubscriptionResults = _libtraci.lanearea_getContextSubscriptionResults
    if _newclass:
        subscribeParameterWithKey = staticmethod(_libtraci.lanearea_subscribeParameterWithKey)
    else:
        subscribeParameterWithKey = _libtraci.lanearea_subscribeParameterWithKey
    __swig_destroy__ = _libtraci.delete_lanearea
    __del__ = lambda self: None
lanearea_swigregister = _libtraci.lanearea_swigregister
lanearea_swigregister(lanearea)

def lanearea_getJamLengthVehicle(detID):
    return _libtraci.lanearea_getJamLengthVehicle(detID)
lanearea_getJamLengthVehicle = _libtraci.lanearea_getJamLengthVehicle

def lanearea_getJamLengthMeters(detID):
    return _libtraci.lanearea_getJamLengthMeters(detID)
lanearea_getJamLengthMeters = _libtraci.lanearea_getJamLengthMeters

def lanearea_getLastStepMeanSpeed(detID):
    return _libtraci.lanearea_getLastStepMeanSpeed(detID)
lanearea_getLastStepMeanSpeed = _libtraci.lanearea_getLastStepMeanSpeed

def lanearea_getLastStepVehicleIDs(detID):
    return _libtraci.lanearea_getLastStepVehicleIDs(detID)
lanearea_getLastStepVehicleIDs = _libtraci.lanearea_getLastStepVehicleIDs

def lanearea_getLastStepOccupancy(detID):
    return _libtraci.lanearea_getLastStepOccupancy(detID)
lanearea_getLastStepOccupancy = _libtraci.lanearea_getLastStepOccupancy

def lanearea_getPosition(detID):
    return _libtraci.lanearea_getPosition(detID)
lanearea_getPosition = _libtraci.lanearea_getPosition

def lanearea_getLaneID(detID):
    return _libtraci.lanearea_getLaneID(detID)
lanearea_getLaneID = _libtraci.lanearea_getLaneID

def lanearea_getLength(detID):
    return _libtraci.lanearea_getLength(detID)
lanearea_getLength = _libtraci.lanearea_getLength

def lanearea_getLastStepVehicleNumber(detID):
    return _libtraci.lanearea_getLastStepVehicleNumber(detID)
lanearea_getLastStepVehicleNumber = _libtraci.lanearea_getLastStepVehicleNumber

def lanearea_getLastStepHaltingNumber(detID):
    return _libtraci.lanearea_getLastStepHaltingNumber(detID)
lanearea_getLastStepHaltingNumber = _libtraci.lanearea_getLastStepHaltingNumber

def lanearea_getIDList():
    return _libtraci.lanearea_getIDList()
lanearea_getIDList = _libtraci.lanearea_getIDList

def lanearea_getIDCount():
    return _libtraci.lanearea_getIDCount()
lanearea_getIDCount = _libtraci.lanearea_getIDCount

def lanearea_getParameter(objectID, param):
    return _libtraci.lanearea_getParameter(objectID, param)
lanearea_getParameter = _libtraci.lanearea_getParameter

def lanearea_getParameterWithKey(objectID, key):
    return _libtraci.lanearea_getParameterWithKey(objectID, key)
lanearea_getParameterWithKey = _libtraci.lanearea_getParameterWithKey

def lanearea_setParameter(objectID, param, value):
    return _libtraci.lanearea_setParameter(objectID, param, value)
lanearea_setParameter = _libtraci.lanearea_setParameter

def lanearea_subscribe(*args, **kwargs):
    return _libtraci.lanearea_subscribe(*args, **kwargs)
lanearea_subscribe = _libtraci.lanearea_subscribe

def lanearea_unsubscribe(objectID):
    return _libtraci.lanearea_unsubscribe(objectID)
lanearea_unsubscribe = _libtraci.lanearea_unsubscribe

def lanearea_subscribeContext(*args, **kwargs):
    return _libtraci.lanearea_subscribeContext(*args, **kwargs)
lanearea_subscribeContext = _libtraci.lanearea_subscribeContext

def lanearea_unsubscribeContext(objectID, domain, dist):
    return _libtraci.lanearea_unsubscribeContext(objectID, domain, dist)
lanearea_unsubscribeContext = _libtraci.lanearea_unsubscribeContext

def lanearea_getAllSubscriptionResults():
    return _libtraci.lanearea_getAllSubscriptionResults()
lanearea_getAllSubscriptionResults = _libtraci.lanearea_getAllSubscriptionResults

def lanearea_getSubscriptionResults(objectID):
    return _libtraci.lanearea_getSubscriptionResults(objectID)
lanearea_getSubscriptionResults = _libtraci.lanearea_getSubscriptionResults

def lanearea_getAllContextSubscriptionResults():
    return _libtraci.lanearea_getAllContextSubscriptionResults()
lanearea_getAllContextSubscriptionResults = _libtraci.lanearea_getAllContextSubscriptionResults

def lanearea_getContextSubscriptionResults(objectID):
    return _libtraci.lanearea_getContextSubscriptionResults(objectID)
lanearea_getContextSubscriptionResults = _libtraci.lanearea_getContextSubscriptionResults

def lanearea_subscribeParameterWithKey(*args, **kwargs):
    return _libtraci.lanearea_subscribeParameterWithKey(*args, **kwargs)
lanearea_subscribeParameterWithKey = _libtraci.lanearea_subscribeParameterWithKey

class lane(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, lane, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, lane, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        getLinkNumber = staticmethod(_libtraci.lane_getLinkNumber)
    else:
        getLinkNumber = _libtraci.lane_getLinkNumber
    if _newclass:
        getEdgeID = staticmethod(_libtraci.lane_getEdgeID)
    else:
        getEdgeID = _libtraci.lane_getEdgeID
    if _newclass:
        getLength = staticmethod(_libtraci.lane_getLength)
    else:
        getLength = _libtraci.lane_getLength
    if _newclass:
        getMaxSpeed = staticmethod(_libtraci.lane_getMaxSpeed)
    else:
        getMaxSpeed = _libtraci.lane_getMaxSpeed
    if _newclass:
        getAllowed = staticmethod(_libtraci.lane_getAllowed)
    else:
        getAllowed = _libtraci.lane_getAllowed
    if _newclass:
        getDisallowed = staticmethod(_libtraci.lane_getDisallowed)
    else:
        getDisallowed = _libtraci.lane_getDisallowed
    if _newclass:
        getLinks = staticmethod(_libtraci.lane_getLinks)
    else:
        getLinks = _libtraci.lane_getLinks
    if _newclass:
        getShape = staticmethod(_libtraci.lane_getShape)
    else:
        getShape = _libtraci.lane_getShape
    if _newclass:
        getWidth = staticmethod(_libtraci.lane_getWidth)
    else:
        getWidth = _libtraci.lane_getWidth
    if _newclass:
        getCO2Emission = staticmethod(_libtraci.lane_getCO2Emission)
    else:
        getCO2Emission = _libtraci.lane_getCO2Emission
    if _newclass:
        getCOEmission = staticmethod(_libtraci.lane_getCOEmission)
    else:
        getCOEmission = _libtraci.lane_getCOEmission
    if _newclass:
        getHCEmission = staticmethod(_libtraci.lane_getHCEmission)
    else:
        getHCEmission = _libtraci.lane_getHCEmission
    if _newclass:
        getPMxEmission = staticmethod(_libtraci.lane_getPMxEmission)
    else:
        getPMxEmission = _libtraci.lane_getPMxEmission
    if _newclass:
        getNOxEmission = staticmethod(_libtraci.lane_getNOxEmission)
    else:
        getNOxEmission = _libtraci.lane_getNOxEmission
    if _newclass:
        getFuelConsumption = staticmethod(_libtraci.lane_getFuelConsumption)
    else:
        getFuelConsumption = _libtraci.lane_getFuelConsumption
    if _newclass:
        getNoiseEmission = staticmethod(_libtraci.lane_getNoiseEmission)
    else:
        getNoiseEmission = _libtraci.lane_getNoiseEmission
    if _newclass:
        getElectricityConsumption = staticmethod(_libtraci.lane_getElectricityConsumption)
    else:
        getElectricityConsumption = _libtraci.lane_getElectricityConsumption
    if _newclass:
        getLastStepMeanSpeed = staticmethod(_libtraci.lane_getLastStepMeanSpeed)
    else:
        getLastStepMeanSpeed = _libtraci.lane_getLastStepMeanSpeed
    if _newclass:
        getLastStepOccupancy = staticmethod(_libtraci.lane_getLastStepOccupancy)
    else:
        getLastStepOccupancy = _libtraci.lane_getLastStepOccupancy
    if _newclass:
        getLastStepLength = staticmethod(_libtraci.lane_getLastStepLength)
    else:
        getLastStepLength = _libtraci.lane_getLastStepLength
    if _newclass:
        getWaitingTime = staticmethod(_libtraci.lane_getWaitingTime)
    else:
        getWaitingTime = _libtraci.lane_getWaitingTime
    if _newclass:
        getTraveltime = staticmethod(_libtraci.lane_getTraveltime)
    else:
        getTraveltime = _libtraci.lane_getTraveltime
    if _newclass:
        getLastStepVehicleNumber = staticmethod(_libtraci.lane_getLastStepVehicleNumber)
    else:
        getLastStepVehicleNumber = _libtraci.lane_getLastStepVehicleNumber
    if _newclass:
        getLastStepHaltingNumber = staticmethod(_libtraci.lane_getLastStepHaltingNumber)
    else:
        getLastStepHaltingNumber = _libtraci.lane_getLastStepHaltingNumber
    if _newclass:
        getLastStepVehicleIDs = staticmethod(_libtraci.lane_getLastStepVehicleIDs)
    else:
        getLastStepVehicleIDs = _libtraci.lane_getLastStepVehicleIDs
    if _newclass:
        getFoes = staticmethod(_libtraci.lane_getFoes)
    else:
        getFoes = _libtraci.lane_getFoes
    if _newclass:
        getInternalFoes = staticmethod(_libtraci.lane_getInternalFoes)
    else:
        getInternalFoes = _libtraci.lane_getInternalFoes
    if _newclass:
        getIDList = staticmethod(_libtraci.lane_getIDList)
    else:
        getIDList = _libtraci.lane_getIDList
    if _newclass:
        getIDCount = staticmethod(_libtraci.lane_getIDCount)
    else:
        getIDCount = _libtraci.lane_getIDCount
    if _newclass:
        getParameter = staticmethod(_libtraci.lane_getParameter)
    else:
        getParameter = _libtraci.lane_getParameter
    if _newclass:
        getParameterWithKey = staticmethod(_libtraci.lane_getParameterWithKey)
    else:
        getParameterWithKey = _libtraci.lane_getParameterWithKey
    if _newclass:
        setParameter = staticmethod(_libtraci.lane_setParameter)
    else:
        setParameter = _libtraci.lane_setParameter
    if _newclass:
        subscribe = staticmethod(_libtraci.lane_subscribe)
    else:
        subscribe = _libtraci.lane_subscribe
    if _newclass:
        unsubscribe = staticmethod(_libtraci.lane_unsubscribe)
    else:
        unsubscribe = _libtraci.lane_unsubscribe
    if _newclass:
        subscribeContext = staticmethod(_libtraci.lane_subscribeContext)
    else:
        subscribeContext = _libtraci.lane_subscribeContext
    if _newclass:
        unsubscribeContext = staticmethod(_libtraci.lane_unsubscribeContext)
    else:
        unsubscribeContext = _libtraci.lane_unsubscribeContext
    if _newclass:
        getAllSubscriptionResults = staticmethod(_libtraci.lane_getAllSubscriptionResults)
    else:
        getAllSubscriptionResults = _libtraci.lane_getAllSubscriptionResults
    if _newclass:
        getSubscriptionResults = staticmethod(_libtraci.lane_getSubscriptionResults)
    else:
        getSubscriptionResults = _libtraci.lane_getSubscriptionResults
    if _newclass:
        getAllContextSubscriptionResults = staticmethod(_libtraci.lane_getAllContextSubscriptionResults)
    else:
        getAllContextSubscriptionResults = _libtraci.lane_getAllContextSubscriptionResults
    if _newclass:
        getContextSubscriptionResults = staticmethod(_libtraci.lane_getContextSubscriptionResults)
    else:
        getContextSubscriptionResults = _libtraci.lane_getContextSubscriptionResults
    if _newclass:
        subscribeParameterWithKey = staticmethod(_libtraci.lane_subscribeParameterWithKey)
    else:
        subscribeParameterWithKey = _libtraci.lane_subscribeParameterWithKey
    if _newclass:
        setAllowed = staticmethod(_libtraci.lane_setAllowed)
    else:
        setAllowed = _libtraci.lane_setAllowed
    if _newclass:
        setDisallowed = staticmethod(_libtraci.lane_setDisallowed)
    else:
        setDisallowed = _libtraci.lane_setDisallowed
    if _newclass:
        setMaxSpeed = staticmethod(_libtraci.lane_setMaxSpeed)
    else:
        setMaxSpeed = _libtraci.lane_setMaxSpeed
    if _newclass:
        setLength = staticmethod(_libtraci.lane_setLength)
    else:
        setLength = _libtraci.lane_setLength
    __swig_destroy__ = _libtraci.delete_lane
    __del__ = lambda self: None
lane_swigregister = _libtraci.lane_swigregister
lane_swigregister(lane)

def lane_getLinkNumber(laneID):
    return _libtraci.lane_getLinkNumber(laneID)
lane_getLinkNumber = _libtraci.lane_getLinkNumber

def lane_getEdgeID(laneID):
    return _libtraci.lane_getEdgeID(laneID)
lane_getEdgeID = _libtraci.lane_getEdgeID

def lane_getLength(laneID):
    return _libtraci.lane_getLength(laneID)
lane_getLength = _libtraci.lane_getLength

def lane_getMaxSpeed(laneID):
    return _libtraci.lane_getMaxSpeed(laneID)
lane_getMaxSpeed = _libtraci.lane_getMaxSpeed

def lane_getAllowed(laneID):
    return _libtraci.lane_getAllowed(laneID)
lane_getAllowed = _libtraci.lane_getAllowed

def lane_getDisallowed(laneID):
    return _libtraci.lane_getDisallowed(laneID)
lane_getDisallowed = _libtraci.lane_getDisallowed

def lane_getLinks(laneID):
    return _libtraci.lane_getLinks(laneID)
lane_getLinks = _libtraci.lane_getLinks

def lane_getShape(laneID):
    return _libtraci.lane_getShape(laneID)
lane_getShape = _libtraci.lane_getShape

def lane_getWidth(laneID):
    return _libtraci.lane_getWidth(laneID)
lane_getWidth = _libtraci.lane_getWidth

def lane_getCO2Emission(laneID):
    return _libtraci.lane_getCO2Emission(laneID)
lane_getCO2Emission = _libtraci.lane_getCO2Emission

def lane_getCOEmission(laneID):
    return _libtraci.lane_getCOEmission(laneID)
lane_getCOEmission = _libtraci.lane_getCOEmission

def lane_getHCEmission(laneID):
    return _libtraci.lane_getHCEmission(laneID)
lane_getHCEmission = _libtraci.lane_getHCEmission

def lane_getPMxEmission(laneID):
    return _libtraci.lane_getPMxEmission(laneID)
lane_getPMxEmission = _libtraci.lane_getPMxEmission

def lane_getNOxEmission(laneID):
    return _libtraci.lane_getNOxEmission(laneID)
lane_getNOxEmission = _libtraci.lane_getNOxEmission

def lane_getFuelConsumption(laneID):
    return _libtraci.lane_getFuelConsumption(laneID)
lane_getFuelConsumption = _libtraci.lane_getFuelConsumption

def lane_getNoiseEmission(laneID):
    return _libtraci.lane_getNoiseEmission(laneID)
lane_getNoiseEmission = _libtraci.lane_getNoiseEmission

def lane_getElectricityConsumption(laneID):
    return _libtraci.lane_getElectricityConsumption(laneID)
lane_getElectricityConsumption = _libtraci.lane_getElectricityConsumption

def lane_getLastStepMeanSpeed(laneID):
    return _libtraci.lane_getLastStepMeanSpeed(laneID)
lane_getLastStepMeanSpeed = _libtraci.lane_getLastStepMeanSpeed

def lane_getLastStepOccupancy(laneID):
    return _libtraci.lane_getLastStepOccupancy(laneID)
lane_getLastStepOccupancy = _libtraci.lane_getLastStepOccupancy

def lane_getLastStepLength(laneID):
    return _libtraci.lane_getLastStepLength(laneID)
lane_getLastStepLength = _libtraci.lane_getLastStepLength

def lane_getWaitingTime(laneID):
    return _libtraci.lane_getWaitingTime(laneID)
lane_getWaitingTime = _libtraci.lane_getWaitingTime

def lane_getTraveltime(laneID):
    return _libtraci.lane_getTraveltime(laneID)
lane_getTraveltime = _libtraci.lane_getTraveltime

def lane_getLastStepVehicleNumber(laneID):
    return _libtraci.lane_getLastStepVehicleNumber(laneID)
lane_getLastStepVehicleNumber = _libtraci.lane_getLastStepVehicleNumber

def lane_getLastStepHaltingNumber(laneID):
    return _libtraci.lane_getLastStepHaltingNumber(laneID)
lane_getLastStepHaltingNumber = _libtraci.lane_getLastStepHaltingNumber

def lane_getLastStepVehicleIDs(laneID):
    return _libtraci.lane_getLastStepVehicleIDs(laneID)
lane_getLastStepVehicleIDs = _libtraci.lane_getLastStepVehicleIDs

def lane_getFoes(laneID, toLaneID):
    return _libtraci.lane_getFoes(laneID, toLaneID)
lane_getFoes = _libtraci.lane_getFoes

def lane_getInternalFoes(laneID):
    return _libtraci.lane_getInternalFoes(laneID)
lane_getInternalFoes = _libtraci.lane_getInternalFoes

def lane_getIDList():
    return _libtraci.lane_getIDList()
lane_getIDList = _libtraci.lane_getIDList

def lane_getIDCount():
    return _libtraci.lane_getIDCount()
lane_getIDCount = _libtraci.lane_getIDCount

def lane_getParameter(objectID, param):
    return _libtraci.lane_getParameter(objectID, param)
lane_getParameter = _libtraci.lane_getParameter

def lane_getParameterWithKey(objectID, key):
    return _libtraci.lane_getParameterWithKey(objectID, key)
lane_getParameterWithKey = _libtraci.lane_getParameterWithKey

def lane_setParameter(objectID, param, value):
    return _libtraci.lane_setParameter(objectID, param, value)
lane_setParameter = _libtraci.lane_setParameter

def lane_subscribe(*args, **kwargs):
    return _libtraci.lane_subscribe(*args, **kwargs)
lane_subscribe = _libtraci.lane_subscribe

def lane_unsubscribe(objectID):
    return _libtraci.lane_unsubscribe(objectID)
lane_unsubscribe = _libtraci.lane_unsubscribe

def lane_subscribeContext(*args, **kwargs):
    return _libtraci.lane_subscribeContext(*args, **kwargs)
lane_subscribeContext = _libtraci.lane_subscribeContext

def lane_unsubscribeContext(objectID, domain, dist):
    return _libtraci.lane_unsubscribeContext(objectID, domain, dist)
lane_unsubscribeContext = _libtraci.lane_unsubscribeContext

def lane_getAllSubscriptionResults():
    return _libtraci.lane_getAllSubscriptionResults()
lane_getAllSubscriptionResults = _libtraci.lane_getAllSubscriptionResults

def lane_getSubscriptionResults(objectID):
    return _libtraci.lane_getSubscriptionResults(objectID)
lane_getSubscriptionResults = _libtraci.lane_getSubscriptionResults

def lane_getAllContextSubscriptionResults():
    return _libtraci.lane_getAllContextSubscriptionResults()
lane_getAllContextSubscriptionResults = _libtraci.lane_getAllContextSubscriptionResults

def lane_getContextSubscriptionResults(objectID):
    return _libtraci.lane_getContextSubscriptionResults(objectID)
lane_getContextSubscriptionResults = _libtraci.lane_getContextSubscriptionResults

def lane_subscribeParameterWithKey(*args, **kwargs):
    return _libtraci.lane_subscribeParameterWithKey(*args, **kwargs)
lane_subscribeParameterWithKey = _libtraci.lane_subscribeParameterWithKey

def lane_setAllowed(*args):
    return _libtraci.lane_setAllowed(*args)
lane_setAllowed = _libtraci.lane_setAllowed

def lane_setDisallowed(laneID, disallowedClasses):
    return _libtraci.lane_setDisallowed(laneID, disallowedClasses)
lane_setDisallowed = _libtraci.lane_setDisallowed

def lane_setMaxSpeed(laneID, speed):
    return _libtraci.lane_setMaxSpeed(laneID, speed)
lane_setMaxSpeed = _libtraci.lane_setMaxSpeed

def lane_setLength(laneID, length):
    return _libtraci.lane_setLength(laneID, length)
lane_setLength = _libtraci.lane_setLength

class multientryexit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, multientryexit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, multientryexit, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        getLastStepVehicleNumber = staticmethod(_libtraci.multientryexit_getLastStepVehicleNumber)
    else:
        getLastStepVehicleNumber = _libtraci.multientryexit_getLastStepVehicleNumber
    if _newclass:
        getLastStepMeanSpeed = staticmethod(_libtraci.multientryexit_getLastStepMeanSpeed)
    else:
        getLastStepMeanSpeed = _libtraci.multientryexit_getLastStepMeanSpeed
    if _newclass:
        getLastStepVehicleIDs = staticmethod(_libtraci.multientryexit_getLastStepVehicleIDs)
    else:
        getLastStepVehicleIDs = _libtraci.multientryexit_getLastStepVehicleIDs
    if _newclass:
        getLastStepHaltingNumber = staticmethod(_libtraci.multientryexit_getLastStepHaltingNumber)
    else:
        getLastStepHaltingNumber = _libtraci.multientryexit_getLastStepHaltingNumber
    if _newclass:
        getIDList = staticmethod(_libtraci.multientryexit_getIDList)
    else:
        getIDList = _libtraci.multientryexit_getIDList
    if _newclass:
        getIDCount = staticmethod(_libtraci.multientryexit_getIDCount)
    else:
        getIDCount = _libtraci.multientryexit_getIDCount
    if _newclass:
        getParameter = staticmethod(_libtraci.multientryexit_getParameter)
    else:
        getParameter = _libtraci.multientryexit_getParameter
    if _newclass:
        getParameterWithKey = staticmethod(_libtraci.multientryexit_getParameterWithKey)
    else:
        getParameterWithKey = _libtraci.multientryexit_getParameterWithKey
    if _newclass:
        setParameter = staticmethod(_libtraci.multientryexit_setParameter)
    else:
        setParameter = _libtraci.multientryexit_setParameter
    if _newclass:
        subscribe = staticmethod(_libtraci.multientryexit_subscribe)
    else:
        subscribe = _libtraci.multientryexit_subscribe
    if _newclass:
        unsubscribe = staticmethod(_libtraci.multientryexit_unsubscribe)
    else:
        unsubscribe = _libtraci.multientryexit_unsubscribe
    if _newclass:
        subscribeContext = staticmethod(_libtraci.multientryexit_subscribeContext)
    else:
        subscribeContext = _libtraci.multientryexit_subscribeContext
    if _newclass:
        unsubscribeContext = staticmethod(_libtraci.multientryexit_unsubscribeContext)
    else:
        unsubscribeContext = _libtraci.multientryexit_unsubscribeContext
    if _newclass:
        getAllSubscriptionResults = staticmethod(_libtraci.multientryexit_getAllSubscriptionResults)
    else:
        getAllSubscriptionResults = _libtraci.multientryexit_getAllSubscriptionResults
    if _newclass:
        getSubscriptionResults = staticmethod(_libtraci.multientryexit_getSubscriptionResults)
    else:
        getSubscriptionResults = _libtraci.multientryexit_getSubscriptionResults
    if _newclass:
        getAllContextSubscriptionResults = staticmethod(_libtraci.multientryexit_getAllContextSubscriptionResults)
    else:
        getAllContextSubscriptionResults = _libtraci.multientryexit_getAllContextSubscriptionResults
    if _newclass:
        getContextSubscriptionResults = staticmethod(_libtraci.multientryexit_getContextSubscriptionResults)
    else:
        getContextSubscriptionResults = _libtraci.multientryexit_getContextSubscriptionResults
    if _newclass:
        subscribeParameterWithKey = staticmethod(_libtraci.multientryexit_subscribeParameterWithKey)
    else:
        subscribeParameterWithKey = _libtraci.multientryexit_subscribeParameterWithKey
    __swig_destroy__ = _libtraci.delete_multientryexit
    __del__ = lambda self: None
multientryexit_swigregister = _libtraci.multientryexit_swigregister
multientryexit_swigregister(multientryexit)

def multientryexit_getLastStepVehicleNumber(detID):
    return _libtraci.multientryexit_getLastStepVehicleNumber(detID)
multientryexit_getLastStepVehicleNumber = _libtraci.multientryexit_getLastStepVehicleNumber

def multientryexit_getLastStepMeanSpeed(detID):
    return _libtraci.multientryexit_getLastStepMeanSpeed(detID)
multientryexit_getLastStepMeanSpeed = _libtraci.multientryexit_getLastStepMeanSpeed

def multientryexit_getLastStepVehicleIDs(detID):
    return _libtraci.multientryexit_getLastStepVehicleIDs(detID)
multientryexit_getLastStepVehicleIDs = _libtraci.multientryexit_getLastStepVehicleIDs

def multientryexit_getLastStepHaltingNumber(detID):
    return _libtraci.multientryexit_getLastStepHaltingNumber(detID)
multientryexit_getLastStepHaltingNumber = _libtraci.multientryexit_getLastStepHaltingNumber

def multientryexit_getIDList():
    return _libtraci.multientryexit_getIDList()
multientryexit_getIDList = _libtraci.multientryexit_getIDList

def multientryexit_getIDCount():
    return _libtraci.multientryexit_getIDCount()
multientryexit_getIDCount = _libtraci.multientryexit_getIDCount

def multientryexit_getParameter(objectID, param):
    return _libtraci.multientryexit_getParameter(objectID, param)
multientryexit_getParameter = _libtraci.multientryexit_getParameter

def multientryexit_getParameterWithKey(objectID, key):
    return _libtraci.multientryexit_getParameterWithKey(objectID, key)
multientryexit_getParameterWithKey = _libtraci.multientryexit_getParameterWithKey

def multientryexit_setParameter(objectID, param, value):
    return _libtraci.multientryexit_setParameter(objectID, param, value)
multientryexit_setParameter = _libtraci.multientryexit_setParameter

def multientryexit_subscribe(*args, **kwargs):
    return _libtraci.multientryexit_subscribe(*args, **kwargs)
multientryexit_subscribe = _libtraci.multientryexit_subscribe

def multientryexit_unsubscribe(objectID):
    return _libtraci.multientryexit_unsubscribe(objectID)
multientryexit_unsubscribe = _libtraci.multientryexit_unsubscribe

def multientryexit_subscribeContext(*args, **kwargs):
    return _libtraci.multientryexit_subscribeContext(*args, **kwargs)
multientryexit_subscribeContext = _libtraci.multientryexit_subscribeContext

def multientryexit_unsubscribeContext(objectID, domain, dist):
    return _libtraci.multientryexit_unsubscribeContext(objectID, domain, dist)
multientryexit_unsubscribeContext = _libtraci.multientryexit_unsubscribeContext

def multientryexit_getAllSubscriptionResults():
    return _libtraci.multientryexit_getAllSubscriptionResults()
multientryexit_getAllSubscriptionResults = _libtraci.multientryexit_getAllSubscriptionResults

def multientryexit_getSubscriptionResults(objectID):
    return _libtraci.multientryexit_getSubscriptionResults(objectID)
multientryexit_getSubscriptionResults = _libtraci.multientryexit_getSubscriptionResults

def multientryexit_getAllContextSubscriptionResults():
    return _libtraci.multientryexit_getAllContextSubscriptionResults()
multientryexit_getAllContextSubscriptionResults = _libtraci.multientryexit_getAllContextSubscriptionResults

def multientryexit_getContextSubscriptionResults(objectID):
    return _libtraci.multientryexit_getContextSubscriptionResults(objectID)
multientryexit_getContextSubscriptionResults = _libtraci.multientryexit_getContextSubscriptionResults

def multientryexit_subscribeParameterWithKey(*args, **kwargs):
    return _libtraci.multientryexit_subscribeParameterWithKey(*args, **kwargs)
multientryexit_subscribeParameterWithKey = _libtraci.multientryexit_subscribeParameterWithKey

class poi(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, poi, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, poi, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        getType = staticmethod(_libtraci.poi_getType)
    else:
        getType = _libtraci.poi_getType
    if _newclass:
        getPosition = staticmethod(_libtraci.poi_getPosition)
    else:
        getPosition = _libtraci.poi_getPosition
    if _newclass:
        getColor = staticmethod(_libtraci.poi_getColor)
    else:
        getColor = _libtraci.poi_getColor
    if _newclass:
        getWidth = staticmethod(_libtraci.poi_getWidth)
    else:
        getWidth = _libtraci.poi_getWidth
    if _newclass:
        getHeight = staticmethod(_libtraci.poi_getHeight)
    else:
        getHeight = _libtraci.poi_getHeight
    if _newclass:
        getAngle = staticmethod(_libtraci.poi_getAngle)
    else:
        getAngle = _libtraci.poi_getAngle
    if _newclass:
        getImageFile = staticmethod(_libtraci.poi_getImageFile)
    else:
        getImageFile = _libtraci.poi_getImageFile
    if _newclass:
        getIDList = staticmethod(_libtraci.poi_getIDList)
    else:
        getIDList = _libtraci.poi_getIDList
    if _newclass:
        getIDCount = staticmethod(_libtraci.poi_getIDCount)
    else:
        getIDCount = _libtraci.poi_getIDCount
    if _newclass:
        getParameter = staticmethod(_libtraci.poi_getParameter)
    else:
        getParameter = _libtraci.poi_getParameter
    if _newclass:
        getParameterWithKey = staticmethod(_libtraci.poi_getParameterWithKey)
    else:
        getParameterWithKey = _libtraci.poi_getParameterWithKey
    if _newclass:
        setParameter = staticmethod(_libtraci.poi_setParameter)
    else:
        setParameter = _libtraci.poi_setParameter
    if _newclass:
        subscribe = staticmethod(_libtraci.poi_subscribe)
    else:
        subscribe = _libtraci.poi_subscribe
    if _newclass:
        unsubscribe = staticmethod(_libtraci.poi_unsubscribe)
    else:
        unsubscribe = _libtraci.poi_unsubscribe
    if _newclass:
        subscribeContext = staticmethod(_libtraci.poi_subscribeContext)
    else:
        subscribeContext = _libtraci.poi_subscribeContext
    if _newclass:
        unsubscribeContext = staticmethod(_libtraci.poi_unsubscribeContext)
    else:
        unsubscribeContext = _libtraci.poi_unsubscribeContext
    if _newclass:
        getAllSubscriptionResults = staticmethod(_libtraci.poi_getAllSubscriptionResults)
    else:
        getAllSubscriptionResults = _libtraci.poi_getAllSubscriptionResults
    if _newclass:
        getSubscriptionResults = staticmethod(_libtraci.poi_getSubscriptionResults)
    else:
        getSubscriptionResults = _libtraci.poi_getSubscriptionResults
    if _newclass:
        getAllContextSubscriptionResults = staticmethod(_libtraci.poi_getAllContextSubscriptionResults)
    else:
        getAllContextSubscriptionResults = _libtraci.poi_getAllContextSubscriptionResults
    if _newclass:
        getContextSubscriptionResults = staticmethod(_libtraci.poi_getContextSubscriptionResults)
    else:
        getContextSubscriptionResults = _libtraci.poi_getContextSubscriptionResults
    if _newclass:
        subscribeParameterWithKey = staticmethod(_libtraci.poi_subscribeParameterWithKey)
    else:
        subscribeParameterWithKey = _libtraci.poi_subscribeParameterWithKey
    if _newclass:
        setType = staticmethod(_libtraci.poi_setType)
    else:
        setType = _libtraci.poi_setType
    if _newclass:
        setColor = staticmethod(_libtraci.poi_setColor)
    else:
        setColor = _libtraci.poi_setColor
    if _newclass:
        setPosition = staticmethod(_libtraci.poi_setPosition)
    else:
        setPosition = _libtraci.poi_setPosition
    if _newclass:
        setWidth = staticmethod(_libtraci.poi_setWidth)
    else:
        setWidth = _libtraci.poi_setWidth
    if _newclass:
        setHeight = staticmethod(_libtraci.poi_setHeight)
    else:
        setHeight = _libtraci.poi_setHeight
    if _newclass:
        setAngle = staticmethod(_libtraci.poi_setAngle)
    else:
        setAngle = _libtraci.poi_setAngle
    if _newclass:
        setImageFile = staticmethod(_libtraci.poi_setImageFile)
    else:
        setImageFile = _libtraci.poi_setImageFile
    if _newclass:
        add = staticmethod(_libtraci.poi_add)
    else:
        add = _libtraci.poi_add
    if _newclass:
        remove = staticmethod(_libtraci.poi_remove)
    else:
        remove = _libtraci.poi_remove
    if _newclass:
        highlight = staticmethod(_libtraci.poi_highlight)
    else:
        highlight = _libtraci.poi_highlight
    __swig_destroy__ = _libtraci.delete_poi
    __del__ = lambda self: None
poi_swigregister = _libtraci.poi_swigregister
poi_swigregister(poi)

def poi_getType(poiID):
    return _libtraci.poi_getType(poiID)
poi_getType = _libtraci.poi_getType

def poi_getPosition(poiID, includeZ=False):
    return _libtraci.poi_getPosition(poiID, includeZ)
poi_getPosition = _libtraci.poi_getPosition

def poi_getColor(poiID):
    return _libtraci.poi_getColor(poiID)
poi_getColor = _libtraci.poi_getColor

def poi_getWidth(poiID):
    return _libtraci.poi_getWidth(poiID)
poi_getWidth = _libtraci.poi_getWidth

def poi_getHeight(poiID):
    return _libtraci.poi_getHeight(poiID)
poi_getHeight = _libtraci.poi_getHeight

def poi_getAngle(poiID):
    return _libtraci.poi_getAngle(poiID)
poi_getAngle = _libtraci.poi_getAngle

def poi_getImageFile(poiID):
    return _libtraci.poi_getImageFile(poiID)
poi_getImageFile = _libtraci.poi_getImageFile

def poi_getIDList():
    return _libtraci.poi_getIDList()
poi_getIDList = _libtraci.poi_getIDList

def poi_getIDCount():
    return _libtraci.poi_getIDCount()
poi_getIDCount = _libtraci.poi_getIDCount

def poi_getParameter(objectID, param):
    return _libtraci.poi_getParameter(objectID, param)
poi_getParameter = _libtraci.poi_getParameter

def poi_getParameterWithKey(objectID, key):
    return _libtraci.poi_getParameterWithKey(objectID, key)
poi_getParameterWithKey = _libtraci.poi_getParameterWithKey

def poi_setParameter(objectID, param, value):
    return _libtraci.poi_setParameter(objectID, param, value)
poi_setParameter = _libtraci.poi_setParameter

def poi_subscribe(*args, **kwargs):
    return _libtraci.poi_subscribe(*args, **kwargs)
poi_subscribe = _libtraci.poi_subscribe

def poi_unsubscribe(objectID):
    return _libtraci.poi_unsubscribe(objectID)
poi_unsubscribe = _libtraci.poi_unsubscribe

def poi_subscribeContext(*args, **kwargs):
    return _libtraci.poi_subscribeContext(*args, **kwargs)
poi_subscribeContext = _libtraci.poi_subscribeContext

def poi_unsubscribeContext(objectID, domain, dist):
    return _libtraci.poi_unsubscribeContext(objectID, domain, dist)
poi_unsubscribeContext = _libtraci.poi_unsubscribeContext

def poi_getAllSubscriptionResults():
    return _libtraci.poi_getAllSubscriptionResults()
poi_getAllSubscriptionResults = _libtraci.poi_getAllSubscriptionResults

def poi_getSubscriptionResults(objectID):
    return _libtraci.poi_getSubscriptionResults(objectID)
poi_getSubscriptionResults = _libtraci.poi_getSubscriptionResults

def poi_getAllContextSubscriptionResults():
    return _libtraci.poi_getAllContextSubscriptionResults()
poi_getAllContextSubscriptionResults = _libtraci.poi_getAllContextSubscriptionResults

def poi_getContextSubscriptionResults(objectID):
    return _libtraci.poi_getContextSubscriptionResults(objectID)
poi_getContextSubscriptionResults = _libtraci.poi_getContextSubscriptionResults

def poi_subscribeParameterWithKey(*args, **kwargs):
    return _libtraci.poi_subscribeParameterWithKey(*args, **kwargs)
poi_subscribeParameterWithKey = _libtraci.poi_subscribeParameterWithKey

def poi_setType(poiID, setType):
    return _libtraci.poi_setType(poiID, setType)
poi_setType = _libtraci.poi_setType

def poi_setColor(poiID, color):
    return _libtraci.poi_setColor(poiID, color)
poi_setColor = _libtraci.poi_setColor

def poi_setPosition(poiID, x, y):
    return _libtraci.poi_setPosition(poiID, x, y)
poi_setPosition = _libtraci.poi_setPosition

def poi_setWidth(poiID, width):
    return _libtraci.poi_setWidth(poiID, width)
poi_setWidth = _libtraci.poi_setWidth

def poi_setHeight(poiID, height):
    return _libtraci.poi_setHeight(poiID, height)
poi_setHeight = _libtraci.poi_setHeight

def poi_setAngle(poiID, angle):
    return _libtraci.poi_setAngle(poiID, angle)
poi_setAngle = _libtraci.poi_setAngle

def poi_setImageFile(poiID, imageFile):
    return _libtraci.poi_setImageFile(poiID, imageFile)
poi_setImageFile = _libtraci.poi_setImageFile

def poi_add(*args, **kwargs):
    return _libtraci.poi_add(*args, **kwargs)
poi_add = _libtraci.poi_add

def poi_remove(poiID, layer=0):
    return _libtraci.poi_remove(poiID, layer)
poi_remove = _libtraci.poi_remove

def poi_highlight(*args, **kwargs):
    return _libtraci.poi_highlight(*args, **kwargs)
poi_highlight = _libtraci.poi_highlight

class polygon(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, polygon, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, polygon, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        getType = staticmethod(_libtraci.polygon_getType)
    else:
        getType = _libtraci.polygon_getType
    if _newclass:
        getShape = staticmethod(_libtraci.polygon_getShape)
    else:
        getShape = _libtraci.polygon_getShape
    if _newclass:
        getColor = staticmethod(_libtraci.polygon_getColor)
    else:
        getColor = _libtraci.polygon_getColor
    if _newclass:
        getFilled = staticmethod(_libtraci.polygon_getFilled)
    else:
        getFilled = _libtraci.polygon_getFilled
    if _newclass:
        getLineWidth = staticmethod(_libtraci.polygon_getLineWidth)
    else:
        getLineWidth = _libtraci.polygon_getLineWidth
    if _newclass:
        getIDList = staticmethod(_libtraci.polygon_getIDList)
    else:
        getIDList = _libtraci.polygon_getIDList
    if _newclass:
        getIDCount = staticmethod(_libtraci.polygon_getIDCount)
    else:
        getIDCount = _libtraci.polygon_getIDCount
    if _newclass:
        getParameter = staticmethod(_libtraci.polygon_getParameter)
    else:
        getParameter = _libtraci.polygon_getParameter
    if _newclass:
        getParameterWithKey = staticmethod(_libtraci.polygon_getParameterWithKey)
    else:
        getParameterWithKey = _libtraci.polygon_getParameterWithKey
    if _newclass:
        setParameter = staticmethod(_libtraci.polygon_setParameter)
    else:
        setParameter = _libtraci.polygon_setParameter
    if _newclass:
        subscribe = staticmethod(_libtraci.polygon_subscribe)
    else:
        subscribe = _libtraci.polygon_subscribe
    if _newclass:
        unsubscribe = staticmethod(_libtraci.polygon_unsubscribe)
    else:
        unsubscribe = _libtraci.polygon_unsubscribe
    if _newclass:
        subscribeContext = staticmethod(_libtraci.polygon_subscribeContext)
    else:
        subscribeContext = _libtraci.polygon_subscribeContext
    if _newclass:
        unsubscribeContext = staticmethod(_libtraci.polygon_unsubscribeContext)
    else:
        unsubscribeContext = _libtraci.polygon_unsubscribeContext
    if _newclass:
        getAllSubscriptionResults = staticmethod(_libtraci.polygon_getAllSubscriptionResults)
    else:
        getAllSubscriptionResults = _libtraci.polygon_getAllSubscriptionResults
    if _newclass:
        getSubscriptionResults = staticmethod(_libtraci.polygon_getSubscriptionResults)
    else:
        getSubscriptionResults = _libtraci.polygon_getSubscriptionResults
    if _newclass:
        getAllContextSubscriptionResults = staticmethod(_libtraci.polygon_getAllContextSubscriptionResults)
    else:
        getAllContextSubscriptionResults = _libtraci.polygon_getAllContextSubscriptionResults
    if _newclass:
        getContextSubscriptionResults = staticmethod(_libtraci.polygon_getContextSubscriptionResults)
    else:
        getContextSubscriptionResults = _libtraci.polygon_getContextSubscriptionResults
    if _newclass:
        subscribeParameterWithKey = staticmethod(_libtraci.polygon_subscribeParameterWithKey)
    else:
        subscribeParameterWithKey = _libtraci.polygon_subscribeParameterWithKey
    if _newclass:
        setType = staticmethod(_libtraci.polygon_setType)
    else:
        setType = _libtraci.polygon_setType
    if _newclass:
        setShape = staticmethod(_libtraci.polygon_setShape)
    else:
        setShape = _libtraci.polygon_setShape
    if _newclass:
        setColor = staticmethod(_libtraci.polygon_setColor)
    else:
        setColor = _libtraci.polygon_setColor
    if _newclass:
        add = staticmethod(_libtraci.polygon_add)
    else:
        add = _libtraci.polygon_add
    if _newclass:
        addDynamics = staticmethod(_libtraci.polygon_addDynamics)
    else:
        addDynamics = _libtraci.polygon_addDynamics
    if _newclass:
        remove = staticmethod(_libtraci.polygon_remove)
    else:
        remove = _libtraci.polygon_remove
    if _newclass:
        setFilled = staticmethod(_libtraci.polygon_setFilled)
    else:
        setFilled = _libtraci.polygon_setFilled
    if _newclass:
        setLineWidth = staticmethod(_libtraci.polygon_setLineWidth)
    else:
        setLineWidth = _libtraci.polygon_setLineWidth
    __swig_destroy__ = _libtraci.delete_polygon
    __del__ = lambda self: None
polygon_swigregister = _libtraci.polygon_swigregister
polygon_swigregister(polygon)

def polygon_getType(polygonID):
    return _libtraci.polygon_getType(polygonID)
polygon_getType = _libtraci.polygon_getType

def polygon_getShape(polygonID):
    return _libtraci.polygon_getShape(polygonID)
polygon_getShape = _libtraci.polygon_getShape

def polygon_getColor(polygonID):
    return _libtraci.polygon_getColor(polygonID)
polygon_getColor = _libtraci.polygon_getColor

def polygon_getFilled(polygonID):
    return _libtraci.polygon_getFilled(polygonID)
polygon_getFilled = _libtraci.polygon_getFilled

def polygon_getLineWidth(polygonID):
    return _libtraci.polygon_getLineWidth(polygonID)
polygon_getLineWidth = _libtraci.polygon_getLineWidth

def polygon_getIDList():
    return _libtraci.polygon_getIDList()
polygon_getIDList = _libtraci.polygon_getIDList

def polygon_getIDCount():
    return _libtraci.polygon_getIDCount()
polygon_getIDCount = _libtraci.polygon_getIDCount

def polygon_getParameter(objectID, param):
    return _libtraci.polygon_getParameter(objectID, param)
polygon_getParameter = _libtraci.polygon_getParameter

def polygon_getParameterWithKey(objectID, key):
    return _libtraci.polygon_getParameterWithKey(objectID, key)
polygon_getParameterWithKey = _libtraci.polygon_getParameterWithKey

def polygon_setParameter(objectID, param, value):
    return _libtraci.polygon_setParameter(objectID, param, value)
polygon_setParameter = _libtraci.polygon_setParameter

def polygon_subscribe(*args, **kwargs):
    return _libtraci.polygon_subscribe(*args, **kwargs)
polygon_subscribe = _libtraci.polygon_subscribe

def polygon_unsubscribe(objectID):
    return _libtraci.polygon_unsubscribe(objectID)
polygon_unsubscribe = _libtraci.polygon_unsubscribe

def polygon_subscribeContext(*args, **kwargs):
    return _libtraci.polygon_subscribeContext(*args, **kwargs)
polygon_subscribeContext = _libtraci.polygon_subscribeContext

def polygon_unsubscribeContext(objectID, domain, dist):
    return _libtraci.polygon_unsubscribeContext(objectID, domain, dist)
polygon_unsubscribeContext = _libtraci.polygon_unsubscribeContext

def polygon_getAllSubscriptionResults():
    return _libtraci.polygon_getAllSubscriptionResults()
polygon_getAllSubscriptionResults = _libtraci.polygon_getAllSubscriptionResults

def polygon_getSubscriptionResults(objectID):
    return _libtraci.polygon_getSubscriptionResults(objectID)
polygon_getSubscriptionResults = _libtraci.polygon_getSubscriptionResults

def polygon_getAllContextSubscriptionResults():
    return _libtraci.polygon_getAllContextSubscriptionResults()
polygon_getAllContextSubscriptionResults = _libtraci.polygon_getAllContextSubscriptionResults

def polygon_getContextSubscriptionResults(objectID):
    return _libtraci.polygon_getContextSubscriptionResults(objectID)
polygon_getContextSubscriptionResults = _libtraci.polygon_getContextSubscriptionResults

def polygon_subscribeParameterWithKey(*args, **kwargs):
    return _libtraci.polygon_subscribeParameterWithKey(*args, **kwargs)
polygon_subscribeParameterWithKey = _libtraci.polygon_subscribeParameterWithKey

def polygon_setType(polygonID, setType):
    return _libtraci.polygon_setType(polygonID, setType)
polygon_setType = _libtraci.polygon_setType

def polygon_setShape(polygonID, shape):
    return _libtraci.polygon_setShape(polygonID, shape)
polygon_setShape = _libtraci.polygon_setShape

def polygon_setColor(polygonID, color):
    return _libtraci.polygon_setColor(polygonID, color)
polygon_setColor = _libtraci.polygon_setColor

def polygon_add(*args, **kwargs):
    return _libtraci.polygon_add(*args, **kwargs)
polygon_add = _libtraci.polygon_add

def polygon_addDynamics(*args, **kwargs):
    return _libtraci.polygon_addDynamics(*args, **kwargs)
polygon_addDynamics = _libtraci.polygon_addDynamics

def polygon_remove(polygonID, layer=0):
    return _libtraci.polygon_remove(polygonID, layer)
polygon_remove = _libtraci.polygon_remove

def polygon_setFilled(polygonID, filled):
    return _libtraci.polygon_setFilled(polygonID, filled)
polygon_setFilled = _libtraci.polygon_setFilled

def polygon_setLineWidth(polygonID, lineWidth):
    return _libtraci.polygon_setLineWidth(polygonID, lineWidth)
polygon_setLineWidth = _libtraci.polygon_setLineWidth

class route(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, route, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, route, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        getEdges = staticmethod(_libtraci.route_getEdges)
    else:
        getEdges = _libtraci.route_getEdges
    if _newclass:
        getIDList = staticmethod(_libtraci.route_getIDList)
    else:
        getIDList = _libtraci.route_getIDList
    if _newclass:
        getIDCount = staticmethod(_libtraci.route_getIDCount)
    else:
        getIDCount = _libtraci.route_getIDCount
    if _newclass:
        getParameter = staticmethod(_libtraci.route_getParameter)
    else:
        getParameter = _libtraci.route_getParameter
    if _newclass:
        getParameterWithKey = staticmethod(_libtraci.route_getParameterWithKey)
    else:
        getParameterWithKey = _libtraci.route_getParameterWithKey
    if _newclass:
        setParameter = staticmethod(_libtraci.route_setParameter)
    else:
        setParameter = _libtraci.route_setParameter
    if _newclass:
        subscribe = staticmethod(_libtraci.route_subscribe)
    else:
        subscribe = _libtraci.route_subscribe
    if _newclass:
        unsubscribe = staticmethod(_libtraci.route_unsubscribe)
    else:
        unsubscribe = _libtraci.route_unsubscribe
    if _newclass:
        subscribeContext = staticmethod(_libtraci.route_subscribeContext)
    else:
        subscribeContext = _libtraci.route_subscribeContext
    if _newclass:
        unsubscribeContext = staticmethod(_libtraci.route_unsubscribeContext)
    else:
        unsubscribeContext = _libtraci.route_unsubscribeContext
    if _newclass:
        getAllSubscriptionResults = staticmethod(_libtraci.route_getAllSubscriptionResults)
    else:
        getAllSubscriptionResults = _libtraci.route_getAllSubscriptionResults
    if _newclass:
        getSubscriptionResults = staticmethod(_libtraci.route_getSubscriptionResults)
    else:
        getSubscriptionResults = _libtraci.route_getSubscriptionResults
    if _newclass:
        getAllContextSubscriptionResults = staticmethod(_libtraci.route_getAllContextSubscriptionResults)
    else:
        getAllContextSubscriptionResults = _libtraci.route_getAllContextSubscriptionResults
    if _newclass:
        getContextSubscriptionResults = staticmethod(_libtraci.route_getContextSubscriptionResults)
    else:
        getContextSubscriptionResults = _libtraci.route_getContextSubscriptionResults
    if _newclass:
        subscribeParameterWithKey = staticmethod(_libtraci.route_subscribeParameterWithKey)
    else:
        subscribeParameterWithKey = _libtraci.route_subscribeParameterWithKey
    if _newclass:
        add = staticmethod(_libtraci.route_add)
    else:
        add = _libtraci.route_add
    __swig_destroy__ = _libtraci.delete_route
    __del__ = lambda self: None
route_swigregister = _libtraci.route_swigregister
route_swigregister(route)

def route_getEdges(routeID):
    return _libtraci.route_getEdges(routeID)
route_getEdges = _libtraci.route_getEdges

def route_getIDList():
    return _libtraci.route_getIDList()
route_getIDList = _libtraci.route_getIDList

def route_getIDCount():
    return _libtraci.route_getIDCount()
route_getIDCount = _libtraci.route_getIDCount

def route_getParameter(objectID, param):
    return _libtraci.route_getParameter(objectID, param)
route_getParameter = _libtraci.route_getParameter

def route_getParameterWithKey(objectID, key):
    return _libtraci.route_getParameterWithKey(objectID, key)
route_getParameterWithKey = _libtraci.route_getParameterWithKey

def route_setParameter(objectID, param, value):
    return _libtraci.route_setParameter(objectID, param, value)
route_setParameter = _libtraci.route_setParameter

def route_subscribe(*args, **kwargs):
    return _libtraci.route_subscribe(*args, **kwargs)
route_subscribe = _libtraci.route_subscribe

def route_unsubscribe(objectID):
    return _libtraci.route_unsubscribe(objectID)
route_unsubscribe = _libtraci.route_unsubscribe

def route_subscribeContext(*args, **kwargs):
    return _libtraci.route_subscribeContext(*args, **kwargs)
route_subscribeContext = _libtraci.route_subscribeContext

def route_unsubscribeContext(objectID, domain, dist):
    return _libtraci.route_unsubscribeContext(objectID, domain, dist)
route_unsubscribeContext = _libtraci.route_unsubscribeContext

def route_getAllSubscriptionResults():
    return _libtraci.route_getAllSubscriptionResults()
route_getAllSubscriptionResults = _libtraci.route_getAllSubscriptionResults

def route_getSubscriptionResults(objectID):
    return _libtraci.route_getSubscriptionResults(objectID)
route_getSubscriptionResults = _libtraci.route_getSubscriptionResults

def route_getAllContextSubscriptionResults():
    return _libtraci.route_getAllContextSubscriptionResults()
route_getAllContextSubscriptionResults = _libtraci.route_getAllContextSubscriptionResults

def route_getContextSubscriptionResults(objectID):
    return _libtraci.route_getContextSubscriptionResults(objectID)
route_getContextSubscriptionResults = _libtraci.route_getContextSubscriptionResults

def route_subscribeParameterWithKey(*args, **kwargs):
    return _libtraci.route_subscribeParameterWithKey(*args, **kwargs)
route_subscribeParameterWithKey = _libtraci.route_subscribeParameterWithKey

def route_add(routeID, edges):
    return _libtraci.route_add(routeID, edges)
route_add = _libtraci.route_add

class simulation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, simulation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, simulation, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        init = staticmethod(_libtraci.simulation_init)
    else:
        init = _libtraci.simulation_init
    if _newclass:
        start = staticmethod(_libtraci.simulation_start)
    else:
        start = _libtraci.simulation_start
    if _newclass:
        isLibsumo = staticmethod(_libtraci.simulation_isLibsumo)
    else:
        isLibsumo = _libtraci.simulation_isLibsumo
    if _newclass:
        hasGUI = staticmethod(_libtraci.simulation_hasGUI)
    else:
        hasGUI = _libtraci.simulation_hasGUI
    if _newclass:
        switchConnection = staticmethod(_libtraci.simulation_switchConnection)
    else:
        switchConnection = _libtraci.simulation_switchConnection
    if _newclass:
        getLabel = staticmethod(_libtraci.simulation_getLabel)
    else:
        getLabel = _libtraci.simulation_getLabel
    if _newclass:
        setOrder = staticmethod(_libtraci.simulation_setOrder)
    else:
        setOrder = _libtraci.simulation_setOrder
    if _newclass:
        load = staticmethod(_libtraci.simulation_load)
    else:
        load = _libtraci.simulation_load
    if _newclass:
        isLoaded = staticmethod(_libtraci.simulation_isLoaded)
    else:
        isLoaded = _libtraci.simulation_isLoaded
    if _newclass:
        step = staticmethod(_libtraci.simulation_step)
    else:
        step = _libtraci.simulation_step
    if _newclass:
        close = staticmethod(_libtraci.simulation_close)
    else:
        close = _libtraci.simulation_close
    if _newclass:
        getVersion = staticmethod(_libtraci.simulation_getVersion)
    else:
        getVersion = _libtraci.simulation_getVersion
    if _newclass:
        getCurrentTime = staticmethod(_libtraci.simulation_getCurrentTime)
    else:
        getCurrentTime = _libtraci.simulation_getCurrentTime
    if _newclass:
        getTime = staticmethod(_libtraci.simulation_getTime)
    else:
        getTime = _libtraci.simulation_getTime
    if _newclass:
        getLoadedNumber = staticmethod(_libtraci.simulation_getLoadedNumber)
    else:
        getLoadedNumber = _libtraci.simulation_getLoadedNumber
    if _newclass:
        getLoadedIDList = staticmethod(_libtraci.simulation_getLoadedIDList)
    else:
        getLoadedIDList = _libtraci.simulation_getLoadedIDList
    if _newclass:
        getDepartedNumber = staticmethod(_libtraci.simulation_getDepartedNumber)
    else:
        getDepartedNumber = _libtraci.simulation_getDepartedNumber
    if _newclass:
        getDepartedIDList = staticmethod(_libtraci.simulation_getDepartedIDList)
    else:
        getDepartedIDList = _libtraci.simulation_getDepartedIDList
    if _newclass:
        getArrivedNumber = staticmethod(_libtraci.simulation_getArrivedNumber)
    else:
        getArrivedNumber = _libtraci.simulation_getArrivedNumber
    if _newclass:
        getArrivedIDList = staticmethod(_libtraci.simulation_getArrivedIDList)
    else:
        getArrivedIDList = _libtraci.simulation_getArrivedIDList
    if _newclass:
        getParkingStartingVehiclesNumber = staticmethod(_libtraci.simulation_getParkingStartingVehiclesNumber)
    else:
        getParkingStartingVehiclesNumber = _libtraci.simulation_getParkingStartingVehiclesNumber
    if _newclass:
        getParkingStartingVehiclesIDList = staticmethod(_libtraci.simulation_getParkingStartingVehiclesIDList)
    else:
        getParkingStartingVehiclesIDList = _libtraci.simulation_getParkingStartingVehiclesIDList
    if _newclass:
        getParkingEndingVehiclesNumber = staticmethod(_libtraci.simulation_getParkingEndingVehiclesNumber)
    else:
        getParkingEndingVehiclesNumber = _libtraci.simulation_getParkingEndingVehiclesNumber
    if _newclass:
        getParkingEndingVehiclesIDList = staticmethod(_libtraci.simulation_getParkingEndingVehiclesIDList)
    else:
        getParkingEndingVehiclesIDList = _libtraci.simulation_getParkingEndingVehiclesIDList
    if _newclass:
        getStopStartingVehiclesNumber = staticmethod(_libtraci.simulation_getStopStartingVehiclesNumber)
    else:
        getStopStartingVehiclesNumber = _libtraci.simulation_getStopStartingVehiclesNumber
    if _newclass:
        getStopStartingVehiclesIDList = staticmethod(_libtraci.simulation_getStopStartingVehiclesIDList)
    else:
        getStopStartingVehiclesIDList = _libtraci.simulation_getStopStartingVehiclesIDList
    if _newclass:
        getStopEndingVehiclesNumber = staticmethod(_libtraci.simulation_getStopEndingVehiclesNumber)
    else:
        getStopEndingVehiclesNumber = _libtraci.simulation_getStopEndingVehiclesNumber
    if _newclass:
        getStopEndingVehiclesIDList = staticmethod(_libtraci.simulation_getStopEndingVehiclesIDList)
    else:
        getStopEndingVehiclesIDList = _libtraci.simulation_getStopEndingVehiclesIDList
    if _newclass:
        getCollidingVehiclesNumber = staticmethod(_libtraci.simulation_getCollidingVehiclesNumber)
    else:
        getCollidingVehiclesNumber = _libtraci.simulation_getCollidingVehiclesNumber
    if _newclass:
        getCollidingVehiclesIDList = staticmethod(_libtraci.simulation_getCollidingVehiclesIDList)
    else:
        getCollidingVehiclesIDList = _libtraci.simulation_getCollidingVehiclesIDList
    if _newclass:
        getEmergencyStoppingVehiclesNumber = staticmethod(_libtraci.simulation_getEmergencyStoppingVehiclesNumber)
    else:
        getEmergencyStoppingVehiclesNumber = _libtraci.simulation_getEmergencyStoppingVehiclesNumber
    if _newclass:
        getEmergencyStoppingVehiclesIDList = staticmethod(_libtraci.simulation_getEmergencyStoppingVehiclesIDList)
    else:
        getEmergencyStoppingVehiclesIDList = _libtraci.simulation_getEmergencyStoppingVehiclesIDList
    if _newclass:
        getStartingTeleportNumber = staticmethod(_libtraci.simulation_getStartingTeleportNumber)
    else:
        getStartingTeleportNumber = _libtraci.simulation_getStartingTeleportNumber
    if _newclass:
        getStartingTeleportIDList = staticmethod(_libtraci.simulation_getStartingTeleportIDList)
    else:
        getStartingTeleportIDList = _libtraci.simulation_getStartingTeleportIDList
    if _newclass:
        getEndingTeleportNumber = staticmethod(_libtraci.simulation_getEndingTeleportNumber)
    else:
        getEndingTeleportNumber = _libtraci.simulation_getEndingTeleportNumber
    if _newclass:
        getEndingTeleportIDList = staticmethod(_libtraci.simulation_getEndingTeleportIDList)
    else:
        getEndingTeleportIDList = _libtraci.simulation_getEndingTeleportIDList
    if _newclass:
        getBusStopIDList = staticmethod(_libtraci.simulation_getBusStopIDList)
    else:
        getBusStopIDList = _libtraci.simulation_getBusStopIDList
    if _newclass:
        getBusStopWaiting = staticmethod(_libtraci.simulation_getBusStopWaiting)
    else:
        getBusStopWaiting = _libtraci.simulation_getBusStopWaiting
    if _newclass:
        getBusStopWaitingIDList = staticmethod(_libtraci.simulation_getBusStopWaitingIDList)
    else:
        getBusStopWaitingIDList = _libtraci.simulation_getBusStopWaitingIDList
    if _newclass:
        getCollisions = staticmethod(_libtraci.simulation_getCollisions)
    else:
        getCollisions = _libtraci.simulation_getCollisions
    if _newclass:
        getDeltaT = staticmethod(_libtraci.simulation_getDeltaT)
    else:
        getDeltaT = _libtraci.simulation_getDeltaT
    if _newclass:
        getNetBoundary = staticmethod(_libtraci.simulation_getNetBoundary)
    else:
        getNetBoundary = _libtraci.simulation_getNetBoundary
    if _newclass:
        getMinExpectedNumber = staticmethod(_libtraci.simulation_getMinExpectedNumber)
    else:
        getMinExpectedNumber = _libtraci.simulation_getMinExpectedNumber
    if _newclass:
        convert2D = staticmethod(_libtraci.simulation_convert2D)
    else:
        convert2D = _libtraci.simulation_convert2D
    if _newclass:
        convert3D = staticmethod(_libtraci.simulation_convert3D)
    else:
        convert3D = _libtraci.simulation_convert3D
    if _newclass:
        convertRoad = staticmethod(_libtraci.simulation_convertRoad)
    else:
        convertRoad = _libtraci.simulation_convertRoad
    if _newclass:
        convertGeo = staticmethod(_libtraci.simulation_convertGeo)
    else:
        convertGeo = _libtraci.simulation_convertGeo
    if _newclass:
        getDistance2D = staticmethod(_libtraci.simulation_getDistance2D)
    else:
        getDistance2D = _libtraci.simulation_getDistance2D
    if _newclass:
        getDistanceRoad = staticmethod(_libtraci.simulation_getDistanceRoad)
    else:
        getDistanceRoad = _libtraci.simulation_getDistanceRoad
    if _newclass:
        findRoute = staticmethod(_libtraci.simulation_findRoute)
    else:
        findRoute = _libtraci.simulation_findRoute
    if _newclass:
        findIntermodalRoute = staticmethod(_libtraci.simulation_findIntermodalRoute)
    else:
        findIntermodalRoute = _libtraci.simulation_findIntermodalRoute
    if _newclass:
        getParameter = staticmethod(_libtraci.simulation_getParameter)
    else:
        getParameter = _libtraci.simulation_getParameter
    if _newclass:
        getParameterWithKey = staticmethod(_libtraci.simulation_getParameterWithKey)
    else:
        getParameterWithKey = _libtraci.simulation_getParameterWithKey
    if _newclass:
        setParameter = staticmethod(_libtraci.simulation_setParameter)
    else:
        setParameter = _libtraci.simulation_setParameter
    if _newclass:
        clearPending = staticmethod(_libtraci.simulation_clearPending)
    else:
        clearPending = _libtraci.simulation_clearPending
    if _newclass:
        saveState = staticmethod(_libtraci.simulation_saveState)
    else:
        saveState = _libtraci.simulation_saveState
    if _newclass:
        loadState = staticmethod(_libtraci.simulation_loadState)
    else:
        loadState = _libtraci.simulation_loadState
    if _newclass:
        writeMessage = staticmethod(_libtraci.simulation_writeMessage)
    else:
        writeMessage = _libtraci.simulation_writeMessage
    if _newclass:
        subscribe = staticmethod(_libtraci.simulation_subscribe)
    else:
        subscribe = _libtraci.simulation_subscribe
    if _newclass:
        getSubscriptionResults = staticmethod(_libtraci.simulation_getSubscriptionResults)
    else:
        getSubscriptionResults = _libtraci.simulation_getSubscriptionResults
    if _newclass:
        getAllSubscriptionResults = staticmethod(_libtraci.simulation_getAllSubscriptionResults)
    else:
        getAllSubscriptionResults = _libtraci.simulation_getAllSubscriptionResults
    if _newclass:
        getAllContextSubscriptionResults = staticmethod(_libtraci.simulation_getAllContextSubscriptionResults)
    else:
        getAllContextSubscriptionResults = _libtraci.simulation_getAllContextSubscriptionResults
    __swig_destroy__ = _libtraci.delete_simulation
    __del__ = lambda self: None
simulation_swigregister = _libtraci.simulation_swigregister
simulation_swigregister(simulation)

def simulation_init(*args, **kwargs):
    return _libtraci.simulation_init(*args, **kwargs)
simulation_init = _libtraci.simulation_init

def simulation_start(*args, **kwargs):
    return _libtraci.simulation_start(*args, **kwargs)
simulation_start = _libtraci.simulation_start

def simulation_isLibsumo():
    return _libtraci.simulation_isLibsumo()
simulation_isLibsumo = _libtraci.simulation_isLibsumo

def simulation_hasGUI():
    return _libtraci.simulation_hasGUI()
simulation_hasGUI = _libtraci.simulation_hasGUI

def simulation_switchConnection(label):
    return _libtraci.simulation_switchConnection(label)
simulation_switchConnection = _libtraci.simulation_switchConnection

def simulation_getLabel():
    return _libtraci.simulation_getLabel()
simulation_getLabel = _libtraci.simulation_getLabel

def simulation_setOrder(order):
    return _libtraci.simulation_setOrder(order)
simulation_setOrder = _libtraci.simulation_setOrder

def simulation_load(args):
    return _libtraci.simulation_load(args)
simulation_load = _libtraci.simulation_load

def simulation_isLoaded():
    return _libtraci.simulation_isLoaded()
simulation_isLoaded = _libtraci.simulation_isLoaded

def simulation_step(time=0.):
    return _libtraci.simulation_step(time)
simulation_step = _libtraci.simulation_step

def simulation_close(*args, **kwargs):
    return _libtraci.simulation_close(*args, **kwargs)
simulation_close = _libtraci.simulation_close

def simulation_getVersion():
    return _libtraci.simulation_getVersion()
simulation_getVersion = _libtraci.simulation_getVersion

def simulation_getCurrentTime():
    return _libtraci.simulation_getCurrentTime()
simulation_getCurrentTime = _libtraci.simulation_getCurrentTime

def simulation_getTime():
    return _libtraci.simulation_getTime()
simulation_getTime = _libtraci.simulation_getTime

def simulation_getLoadedNumber():
    return _libtraci.simulation_getLoadedNumber()
simulation_getLoadedNumber = _libtraci.simulation_getLoadedNumber

def simulation_getLoadedIDList():
    return _libtraci.simulation_getLoadedIDList()
simulation_getLoadedIDList = _libtraci.simulation_getLoadedIDList

def simulation_getDepartedNumber():
    return _libtraci.simulation_getDepartedNumber()
simulation_getDepartedNumber = _libtraci.simulation_getDepartedNumber

def simulation_getDepartedIDList():
    return _libtraci.simulation_getDepartedIDList()
simulation_getDepartedIDList = _libtraci.simulation_getDepartedIDList

def simulation_getArrivedNumber():
    return _libtraci.simulation_getArrivedNumber()
simulation_getArrivedNumber = _libtraci.simulation_getArrivedNumber

def simulation_getArrivedIDList():
    return _libtraci.simulation_getArrivedIDList()
simulation_getArrivedIDList = _libtraci.simulation_getArrivedIDList

def simulation_getParkingStartingVehiclesNumber():
    return _libtraci.simulation_getParkingStartingVehiclesNumber()
simulation_getParkingStartingVehiclesNumber = _libtraci.simulation_getParkingStartingVehiclesNumber

def simulation_getParkingStartingVehiclesIDList():
    return _libtraci.simulation_getParkingStartingVehiclesIDList()
simulation_getParkingStartingVehiclesIDList = _libtraci.simulation_getParkingStartingVehiclesIDList

def simulation_getParkingEndingVehiclesNumber():
    return _libtraci.simulation_getParkingEndingVehiclesNumber()
simulation_getParkingEndingVehiclesNumber = _libtraci.simulation_getParkingEndingVehiclesNumber

def simulation_getParkingEndingVehiclesIDList():
    return _libtraci.simulation_getParkingEndingVehiclesIDList()
simulation_getParkingEndingVehiclesIDList = _libtraci.simulation_getParkingEndingVehiclesIDList

def simulation_getStopStartingVehiclesNumber():
    return _libtraci.simulation_getStopStartingVehiclesNumber()
simulation_getStopStartingVehiclesNumber = _libtraci.simulation_getStopStartingVehiclesNumber

def simulation_getStopStartingVehiclesIDList():
    return _libtraci.simulation_getStopStartingVehiclesIDList()
simulation_getStopStartingVehiclesIDList = _libtraci.simulation_getStopStartingVehiclesIDList

def simulation_getStopEndingVehiclesNumber():
    return _libtraci.simulation_getStopEndingVehiclesNumber()
simulation_getStopEndingVehiclesNumber = _libtraci.simulation_getStopEndingVehiclesNumber

def simulation_getStopEndingVehiclesIDList():
    return _libtraci.simulation_getStopEndingVehiclesIDList()
simulation_getStopEndingVehiclesIDList = _libtraci.simulation_getStopEndingVehiclesIDList

def simulation_getCollidingVehiclesNumber():
    return _libtraci.simulation_getCollidingVehiclesNumber()
simulation_getCollidingVehiclesNumber = _libtraci.simulation_getCollidingVehiclesNumber

def simulation_getCollidingVehiclesIDList():
    return _libtraci.simulation_getCollidingVehiclesIDList()
simulation_getCollidingVehiclesIDList = _libtraci.simulation_getCollidingVehiclesIDList

def simulation_getEmergencyStoppingVehiclesNumber():
    return _libtraci.simulation_getEmergencyStoppingVehiclesNumber()
simulation_getEmergencyStoppingVehiclesNumber = _libtraci.simulation_getEmergencyStoppingVehiclesNumber

def simulation_getEmergencyStoppingVehiclesIDList():
    return _libtraci.simulation_getEmergencyStoppingVehiclesIDList()
simulation_getEmergencyStoppingVehiclesIDList = _libtraci.simulation_getEmergencyStoppingVehiclesIDList

def simulation_getStartingTeleportNumber():
    return _libtraci.simulation_getStartingTeleportNumber()
simulation_getStartingTeleportNumber = _libtraci.simulation_getStartingTeleportNumber

def simulation_getStartingTeleportIDList():
    return _libtraci.simulation_getStartingTeleportIDList()
simulation_getStartingTeleportIDList = _libtraci.simulation_getStartingTeleportIDList

def simulation_getEndingTeleportNumber():
    return _libtraci.simulation_getEndingTeleportNumber()
simulation_getEndingTeleportNumber = _libtraci.simulation_getEndingTeleportNumber

def simulation_getEndingTeleportIDList():
    return _libtraci.simulation_getEndingTeleportIDList()
simulation_getEndingTeleportIDList = _libtraci.simulation_getEndingTeleportIDList

def simulation_getBusStopIDList():
    return _libtraci.simulation_getBusStopIDList()
simulation_getBusStopIDList = _libtraci.simulation_getBusStopIDList

def simulation_getBusStopWaiting(stopID):
    return _libtraci.simulation_getBusStopWaiting(stopID)
simulation_getBusStopWaiting = _libtraci.simulation_getBusStopWaiting

def simulation_getBusStopWaitingIDList(stopID):
    return _libtraci.simulation_getBusStopWaitingIDList(stopID)
simulation_getBusStopWaitingIDList = _libtraci.simulation_getBusStopWaitingIDList

def simulation_getCollisions():
    return _libtraci.simulation_getCollisions()
simulation_getCollisions = _libtraci.simulation_getCollisions

def simulation_getDeltaT():
    return _libtraci.simulation_getDeltaT()
simulation_getDeltaT = _libtraci.simulation_getDeltaT

def simulation_getNetBoundary():
    return _libtraci.simulation_getNetBoundary()
simulation_getNetBoundary = _libtraci.simulation_getNetBoundary

def simulation_getMinExpectedNumber():
    return _libtraci.simulation_getMinExpectedNumber()
simulation_getMinExpectedNumber = _libtraci.simulation_getMinExpectedNumber

def simulation_convert2D(edgeID, pos, laneIndex=0, toGeo=False):
    return _libtraci.simulation_convert2D(edgeID, pos, laneIndex, toGeo)
simulation_convert2D = _libtraci.simulation_convert2D

def simulation_convert3D(edgeID, pos, laneIndex=0, toGeo=False):
    return _libtraci.simulation_convert3D(edgeID, pos, laneIndex, toGeo)
simulation_convert3D = _libtraci.simulation_convert3D

def simulation_convertRoad(*args, **kwargs):
    return _libtraci.simulation_convertRoad(*args, **kwargs)
simulation_convertRoad = _libtraci.simulation_convertRoad

def simulation_convertGeo(x, y, fromGeo=False):
    return _libtraci.simulation_convertGeo(x, y, fromGeo)
simulation_convertGeo = _libtraci.simulation_convertGeo

def simulation_getDistance2D(x1, y1, x2, y2, isGeo=False, isDriving=False):
    return _libtraci.simulation_getDistance2D(x1, y1, x2, y2, isGeo, isDriving)
simulation_getDistance2D = _libtraci.simulation_getDistance2D

def simulation_getDistanceRoad(edgeID1, pos1, edgeID2, pos2, isDriving=False):
    return _libtraci.simulation_getDistanceRoad(edgeID1, pos1, edgeID2, pos2, isDriving)
simulation_getDistanceRoad = _libtraci.simulation_getDistanceRoad

def simulation_findRoute(*args, **kwargs):
    return _libtraci.simulation_findRoute(*args, **kwargs)
simulation_findRoute = _libtraci.simulation_findRoute

def simulation_findIntermodalRoute(*args, **kwargs):
    return _libtraci.simulation_findIntermodalRoute(*args, **kwargs)
simulation_findIntermodalRoute = _libtraci.simulation_findIntermodalRoute

def simulation_getParameter(objectID, key):
    return _libtraci.simulation_getParameter(objectID, key)
simulation_getParameter = _libtraci.simulation_getParameter

def simulation_getParameterWithKey(objectID, key):
    return _libtraci.simulation_getParameterWithKey(objectID, key)
simulation_getParameterWithKey = _libtraci.simulation_getParameterWithKey

def simulation_setParameter(objectID, param, value):
    return _libtraci.simulation_setParameter(objectID, param, value)
simulation_setParameter = _libtraci.simulation_setParameter

def simulation_clearPending(*args, **kwargs):
    return _libtraci.simulation_clearPending(*args, **kwargs)
simulation_clearPending = _libtraci.simulation_clearPending

def simulation_saveState(fileName):
    return _libtraci.simulation_saveState(fileName)
simulation_saveState = _libtraci.simulation_saveState

def simulation_loadState(fileName):
    return _libtraci.simulation_loadState(fileName)
simulation_loadState = _libtraci.simulation_loadState

def simulation_writeMessage(msg):
    return _libtraci.simulation_writeMessage(msg)
simulation_writeMessage = _libtraci.simulation_writeMessage

def simulation_subscribe(*args, **kwargs):
    return _libtraci.simulation_subscribe(*args, **kwargs)
simulation_subscribe = _libtraci.simulation_subscribe

def simulation_getSubscriptionResults():
    return _libtraci.simulation_getSubscriptionResults()
simulation_getSubscriptionResults = _libtraci.simulation_getSubscriptionResults

def simulation_getAllSubscriptionResults():
    return _libtraci.simulation_getAllSubscriptionResults()
simulation_getAllSubscriptionResults = _libtraci.simulation_getAllSubscriptionResults

def simulation_getAllContextSubscriptionResults():
    return _libtraci.simulation_getAllContextSubscriptionResults()
simulation_getAllContextSubscriptionResults = _libtraci.simulation_getAllContextSubscriptionResults

class trafficlight(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, trafficlight, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, trafficlight, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        getRedYellowGreenState = staticmethod(_libtraci.trafficlight_getRedYellowGreenState)
    else:
        getRedYellowGreenState = _libtraci.trafficlight_getRedYellowGreenState
    if _newclass:
        getAllProgramLogics = staticmethod(_libtraci.trafficlight_getAllProgramLogics)
    else:
        getAllProgramLogics = _libtraci.trafficlight_getAllProgramLogics
    if _newclass:
        getControlledJunctions = staticmethod(_libtraci.trafficlight_getControlledJunctions)
    else:
        getControlledJunctions = _libtraci.trafficlight_getControlledJunctions
    if _newclass:
        getControlledLanes = staticmethod(_libtraci.trafficlight_getControlledLanes)
    else:
        getControlledLanes = _libtraci.trafficlight_getControlledLanes
    if _newclass:
        getControlledLinks = staticmethod(_libtraci.trafficlight_getControlledLinks)
    else:
        getControlledLinks = _libtraci.trafficlight_getControlledLinks
    if _newclass:
        getProgram = staticmethod(_libtraci.trafficlight_getProgram)
    else:
        getProgram = _libtraci.trafficlight_getProgram
    if _newclass:
        getPhase = staticmethod(_libtraci.trafficlight_getPhase)
    else:
        getPhase = _libtraci.trafficlight_getPhase
    if _newclass:
        getPhaseName = staticmethod(_libtraci.trafficlight_getPhaseName)
    else:
        getPhaseName = _libtraci.trafficlight_getPhaseName
    if _newclass:
        getPhaseDuration = staticmethod(_libtraci.trafficlight_getPhaseDuration)
    else:
        getPhaseDuration = _libtraci.trafficlight_getPhaseDuration
    if _newclass:
        getNextSwitch = staticmethod(_libtraci.trafficlight_getNextSwitch)
    else:
        getNextSwitch = _libtraci.trafficlight_getNextSwitch
    if _newclass:
        getServedPersonCount = staticmethod(_libtraci.trafficlight_getServedPersonCount)
    else:
        getServedPersonCount = _libtraci.trafficlight_getServedPersonCount
    if _newclass:
        getBlockingVehicles = staticmethod(_libtraci.trafficlight_getBlockingVehicles)
    else:
        getBlockingVehicles = _libtraci.trafficlight_getBlockingVehicles
    if _newclass:
        getRivalVehicles = staticmethod(_libtraci.trafficlight_getRivalVehicles)
    else:
        getRivalVehicles = _libtraci.trafficlight_getRivalVehicles
    if _newclass:
        getPriorityVehicles = staticmethod(_libtraci.trafficlight_getPriorityVehicles)
    else:
        getPriorityVehicles = _libtraci.trafficlight_getPriorityVehicles
    if _newclass:
        getIDList = staticmethod(_libtraci.trafficlight_getIDList)
    else:
        getIDList = _libtraci.trafficlight_getIDList
    if _newclass:
        getIDCount = staticmethod(_libtraci.trafficlight_getIDCount)
    else:
        getIDCount = _libtraci.trafficlight_getIDCount
    if _newclass:
        getParameter = staticmethod(_libtraci.trafficlight_getParameter)
    else:
        getParameter = _libtraci.trafficlight_getParameter
    if _newclass:
        getParameterWithKey = staticmethod(_libtraci.trafficlight_getParameterWithKey)
    else:
        getParameterWithKey = _libtraci.trafficlight_getParameterWithKey
    if _newclass:
        setParameter = staticmethod(_libtraci.trafficlight_setParameter)
    else:
        setParameter = _libtraci.trafficlight_setParameter
    if _newclass:
        subscribe = staticmethod(_libtraci.trafficlight_subscribe)
    else:
        subscribe = _libtraci.trafficlight_subscribe
    if _newclass:
        unsubscribe = staticmethod(_libtraci.trafficlight_unsubscribe)
    else:
        unsubscribe = _libtraci.trafficlight_unsubscribe
    if _newclass:
        subscribeContext = staticmethod(_libtraci.trafficlight_subscribeContext)
    else:
        subscribeContext = _libtraci.trafficlight_subscribeContext
    if _newclass:
        unsubscribeContext = staticmethod(_libtraci.trafficlight_unsubscribeContext)
    else:
        unsubscribeContext = _libtraci.trafficlight_unsubscribeContext
    if _newclass:
        getAllSubscriptionResults = staticmethod(_libtraci.trafficlight_getAllSubscriptionResults)
    else:
        getAllSubscriptionResults = _libtraci.trafficlight_getAllSubscriptionResults
    if _newclass:
        getSubscriptionResults = staticmethod(_libtraci.trafficlight_getSubscriptionResults)
    else:
        getSubscriptionResults = _libtraci.trafficlight_getSubscriptionResults
    if _newclass:
        getAllContextSubscriptionResults = staticmethod(_libtraci.trafficlight_getAllContextSubscriptionResults)
    else:
        getAllContextSubscriptionResults = _libtraci.trafficlight_getAllContextSubscriptionResults
    if _newclass:
        getContextSubscriptionResults = staticmethod(_libtraci.trafficlight_getContextSubscriptionResults)
    else:
        getContextSubscriptionResults = _libtraci.trafficlight_getContextSubscriptionResults
    if _newclass:
        subscribeParameterWithKey = staticmethod(_libtraci.trafficlight_subscribeParameterWithKey)
    else:
        subscribeParameterWithKey = _libtraci.trafficlight_subscribeParameterWithKey
    if _newclass:
        setRedYellowGreenState = staticmethod(_libtraci.trafficlight_setRedYellowGreenState)
    else:
        setRedYellowGreenState = _libtraci.trafficlight_setRedYellowGreenState
    if _newclass:
        setPhase = staticmethod(_libtraci.trafficlight_setPhase)
    else:
        setPhase = _libtraci.trafficlight_setPhase
    if _newclass:
        setPhaseName = staticmethod(_libtraci.trafficlight_setPhaseName)
    else:
        setPhaseName = _libtraci.trafficlight_setPhaseName
    if _newclass:
        setProgram = staticmethod(_libtraci.trafficlight_setProgram)
    else:
        setProgram = _libtraci.trafficlight_setProgram
    if _newclass:
        setPhaseDuration = staticmethod(_libtraci.trafficlight_setPhaseDuration)
    else:
        setPhaseDuration = _libtraci.trafficlight_setPhaseDuration
    if _newclass:
        setProgramLogic = staticmethod(_libtraci.trafficlight_setProgramLogic)
    else:
        setProgramLogic = _libtraci.trafficlight_setProgramLogic
    if _newclass:
        getCompleteRedYellowGreenDefinition = staticmethod(_libtraci.trafficlight_getCompleteRedYellowGreenDefinition)
    else:
        getCompleteRedYellowGreenDefinition = _libtraci.trafficlight_getCompleteRedYellowGreenDefinition
    if _newclass:
        setCompleteRedYellowGreenDefinition = staticmethod(_libtraci.trafficlight_setCompleteRedYellowGreenDefinition)
    else:
        setCompleteRedYellowGreenDefinition = _libtraci.trafficlight_setCompleteRedYellowGreenDefinition
    __swig_destroy__ = _libtraci.delete_trafficlight
    __del__ = lambda self: None
trafficlight_swigregister = _libtraci.trafficlight_swigregister
trafficlight_swigregister(trafficlight)
cvar = _libtraci.cvar
TRACI_VERSION = cvar.TRACI_VERSION
CMD_GETVERSION = cvar.CMD_GETVERSION
CMD_LOAD = cvar.CMD_LOAD
CMD_SIMSTEP = cvar.CMD_SIMSTEP
CMD_SETORDER = cvar.CMD_SETORDER
CMD_STOP = cvar.CMD_STOP
CMD_REROUTE_TO_PARKING = cvar.CMD_REROUTE_TO_PARKING
CMD_RESUME = cvar.CMD_RESUME
CMD_CHANGELANE = cvar.CMD_CHANGELANE
CMD_SLOWDOWN = cvar.CMD_SLOWDOWN
CMD_CHANGESUBLANE = cvar.CMD_CHANGESUBLANE
CMD_OPENGAP = cvar.CMD_OPENGAP
CMD_REPLACE_STOP = cvar.CMD_REPLACE_STOP
VAR_TAXI_FLEET = cvar.VAR_TAXI_FLEET
CMD_TAXI_DISPATCH = cvar.CMD_TAXI_DISPATCH
CMD_CHANGETARGET = cvar.CMD_CHANGETARGET
CMD_CLOSE = cvar.CMD_CLOSE
CMD_ADD_SUBSCRIPTION_FILTER = cvar.CMD_ADD_SUBSCRIPTION_FILTER
CMD_SUBSCRIBE_INDUCTIONLOOP_CONTEXT = cvar.CMD_SUBSCRIBE_INDUCTIONLOOP_CONTEXT
RESPONSE_SUBSCRIBE_INDUCTIONLOOP_CONTEXT = cvar.RESPONSE_SUBSCRIBE_INDUCTIONLOOP_CONTEXT
CMD_GET_INDUCTIONLOOP_VARIABLE = cvar.CMD_GET_INDUCTIONLOOP_VARIABLE
RESPONSE_GET_INDUCTIONLOOP_VARIABLE = cvar.RESPONSE_GET_INDUCTIONLOOP_VARIABLE
CMD_SET_INDUCTIONLOOP_VARIABLE = cvar.CMD_SET_INDUCTIONLOOP_VARIABLE
CMD_SUBSCRIBE_INDUCTIONLOOP_VARIABLE = cvar.CMD_SUBSCRIBE_INDUCTIONLOOP_VARIABLE
RESPONSE_SUBSCRIBE_INDUCTIONLOOP_VARIABLE = cvar.RESPONSE_SUBSCRIBE_INDUCTIONLOOP_VARIABLE
CMD_SUBSCRIBE_MULTIENTRYEXIT_CONTEXT = cvar.CMD_SUBSCRIBE_MULTIENTRYEXIT_CONTEXT
RESPONSE_SUBSCRIBE_MULTIENTRYEXIT_CONTEXT = cvar.RESPONSE_SUBSCRIBE_MULTIENTRYEXIT_CONTEXT
CMD_GET_MULTIENTRYEXIT_VARIABLE = cvar.CMD_GET_MULTIENTRYEXIT_VARIABLE
RESPONSE_GET_MULTIENTRYEXIT_VARIABLE = cvar.RESPONSE_GET_MULTIENTRYEXIT_VARIABLE
CMD_SET_MULTIENTRYEXIT_VARIABLE = cvar.CMD_SET_MULTIENTRYEXIT_VARIABLE
CMD_SUBSCRIBE_MULTIENTRYEXIT_VARIABLE = cvar.CMD_SUBSCRIBE_MULTIENTRYEXIT_VARIABLE
RESPONSE_SUBSCRIBE_MULTIENTRYEXIT_VARIABLE = cvar.RESPONSE_SUBSCRIBE_MULTIENTRYEXIT_VARIABLE
CMD_SUBSCRIBE_TL_CONTEXT = cvar.CMD_SUBSCRIBE_TL_CONTEXT
RESPONSE_SUBSCRIBE_TL_CONTEXT = cvar.RESPONSE_SUBSCRIBE_TL_CONTEXT
CMD_GET_TL_VARIABLE = cvar.CMD_GET_TL_VARIABLE
RESPONSE_GET_TL_VARIABLE = cvar.RESPONSE_GET_TL_VARIABLE
CMD_SET_TL_VARIABLE = cvar.CMD_SET_TL_VARIABLE
CMD_SUBSCRIBE_TL_VARIABLE = cvar.CMD_SUBSCRIBE_TL_VARIABLE
RESPONSE_SUBSCRIBE_TL_VARIABLE = cvar.RESPONSE_SUBSCRIBE_TL_VARIABLE
CMD_SUBSCRIBE_LANE_CONTEXT = cvar.CMD_SUBSCRIBE_LANE_CONTEXT
RESPONSE_SUBSCRIBE_LANE_CONTEXT = cvar.RESPONSE_SUBSCRIBE_LANE_CONTEXT
CMD_GET_LANE_VARIABLE = cvar.CMD_GET_LANE_VARIABLE
RESPONSE_GET_LANE_VARIABLE = cvar.RESPONSE_GET_LANE_VARIABLE
CMD_SET_LANE_VARIABLE = cvar.CMD_SET_LANE_VARIABLE
CMD_SUBSCRIBE_LANE_VARIABLE = cvar.CMD_SUBSCRIBE_LANE_VARIABLE
RESPONSE_SUBSCRIBE_LANE_VARIABLE = cvar.RESPONSE_SUBSCRIBE_LANE_VARIABLE
CMD_SUBSCRIBE_VEHICLE_CONTEXT = cvar.CMD_SUBSCRIBE_VEHICLE_CONTEXT
RESPONSE_SUBSCRIBE_VEHICLE_CONTEXT = cvar.RESPONSE_SUBSCRIBE_VEHICLE_CONTEXT
CMD_GET_VEHICLE_VARIABLE = cvar.CMD_GET_VEHICLE_VARIABLE
RESPONSE_GET_VEHICLE_VARIABLE = cvar.RESPONSE_GET_VEHICLE_VARIABLE
CMD_SET_VEHICLE_VARIABLE = cvar.CMD_SET_VEHICLE_VARIABLE
CMD_SUBSCRIBE_VEHICLE_VARIABLE = cvar.CMD_SUBSCRIBE_VEHICLE_VARIABLE
RESPONSE_SUBSCRIBE_VEHICLE_VARIABLE = cvar.RESPONSE_SUBSCRIBE_VEHICLE_VARIABLE
CMD_SUBSCRIBE_VEHICLETYPE_CONTEXT = cvar.CMD_SUBSCRIBE_VEHICLETYPE_CONTEXT
RESPONSE_SUBSCRIBE_VEHICLETYPE_CONTEXT = cvar.RESPONSE_SUBSCRIBE_VEHICLETYPE_CONTEXT
CMD_GET_VEHICLETYPE_VARIABLE = cvar.CMD_GET_VEHICLETYPE_VARIABLE
RESPONSE_GET_VEHICLETYPE_VARIABLE = cvar.RESPONSE_GET_VEHICLETYPE_VARIABLE
CMD_SET_VEHICLETYPE_VARIABLE = cvar.CMD_SET_VEHICLETYPE_VARIABLE
CMD_SUBSCRIBE_VEHICLETYPE_VARIABLE = cvar.CMD_SUBSCRIBE_VEHICLETYPE_VARIABLE
RESPONSE_SUBSCRIBE_VEHICLETYPE_VARIABLE = cvar.RESPONSE_SUBSCRIBE_VEHICLETYPE_VARIABLE
CMD_SUBSCRIBE_ROUTE_CONTEXT = cvar.CMD_SUBSCRIBE_ROUTE_CONTEXT
RESPONSE_SUBSCRIBE_ROUTE_CONTEXT = cvar.RESPONSE_SUBSCRIBE_ROUTE_CONTEXT
CMD_GET_ROUTE_VARIABLE = cvar.CMD_GET_ROUTE_VARIABLE
RESPONSE_GET_ROUTE_VARIABLE = cvar.RESPONSE_GET_ROUTE_VARIABLE
CMD_SET_ROUTE_VARIABLE = cvar.CMD_SET_ROUTE_VARIABLE
CMD_SUBSCRIBE_ROUTE_VARIABLE = cvar.CMD_SUBSCRIBE_ROUTE_VARIABLE
RESPONSE_SUBSCRIBE_ROUTE_VARIABLE = cvar.RESPONSE_SUBSCRIBE_ROUTE_VARIABLE
CMD_SUBSCRIBE_POI_CONTEXT = cvar.CMD_SUBSCRIBE_POI_CONTEXT
RESPONSE_SUBSCRIBE_POI_CONTEXT = cvar.RESPONSE_SUBSCRIBE_POI_CONTEXT
CMD_GET_POI_VARIABLE = cvar.CMD_GET_POI_VARIABLE
RESPONSE_GET_POI_VARIABLE = cvar.RESPONSE_GET_POI_VARIABLE
CMD_SET_POI_VARIABLE = cvar.CMD_SET_POI_VARIABLE
CMD_SUBSCRIBE_POI_VARIABLE = cvar.CMD_SUBSCRIBE_POI_VARIABLE
RESPONSE_SUBSCRIBE_POI_VARIABLE = cvar.RESPONSE_SUBSCRIBE_POI_VARIABLE
CMD_SUBSCRIBE_POLYGON_CONTEXT = cvar.CMD_SUBSCRIBE_POLYGON_CONTEXT
RESPONSE_SUBSCRIBE_POLYGON_CONTEXT = cvar.RESPONSE_SUBSCRIBE_POLYGON_CONTEXT
CMD_GET_POLYGON_VARIABLE = cvar.CMD_GET_POLYGON_VARIABLE
RESPONSE_GET_POLYGON_VARIABLE = cvar.RESPONSE_GET_POLYGON_VARIABLE
CMD_SET_POLYGON_VARIABLE = cvar.CMD_SET_POLYGON_VARIABLE
CMD_SUBSCRIBE_POLYGON_VARIABLE = cvar.CMD_SUBSCRIBE_POLYGON_VARIABLE
RESPONSE_SUBSCRIBE_POLYGON_VARIABLE = cvar.RESPONSE_SUBSCRIBE_POLYGON_VARIABLE
CMD_SUBSCRIBE_JUNCTION_CONTEXT = cvar.CMD_SUBSCRIBE_JUNCTION_CONTEXT
RESPONSE_SUBSCRIBE_JUNCTION_CONTEXT = cvar.RESPONSE_SUBSCRIBE_JUNCTION_CONTEXT
CMD_GET_JUNCTION_VARIABLE = cvar.CMD_GET_JUNCTION_VARIABLE
RESPONSE_GET_JUNCTION_VARIABLE = cvar.RESPONSE_GET_JUNCTION_VARIABLE
CMD_SET_JUNCTION_VARIABLE = cvar.CMD_SET_JUNCTION_VARIABLE
CMD_SUBSCRIBE_JUNCTION_VARIABLE = cvar.CMD_SUBSCRIBE_JUNCTION_VARIABLE
RESPONSE_SUBSCRIBE_JUNCTION_VARIABLE = cvar.RESPONSE_SUBSCRIBE_JUNCTION_VARIABLE
CMD_SUBSCRIBE_EDGE_CONTEXT = cvar.CMD_SUBSCRIBE_EDGE_CONTEXT
RESPONSE_SUBSCRIBE_EDGE_CONTEXT = cvar.RESPONSE_SUBSCRIBE_EDGE_CONTEXT
CMD_GET_EDGE_VARIABLE = cvar.CMD_GET_EDGE_VARIABLE
RESPONSE_GET_EDGE_VARIABLE = cvar.RESPONSE_GET_EDGE_VARIABLE
CMD_SET_EDGE_VARIABLE = cvar.CMD_SET_EDGE_VARIABLE
CMD_SUBSCRIBE_EDGE_VARIABLE = cvar.CMD_SUBSCRIBE_EDGE_VARIABLE
RESPONSE_SUBSCRIBE_EDGE_VARIABLE = cvar.RESPONSE_SUBSCRIBE_EDGE_VARIABLE
CMD_SUBSCRIBE_SIM_CONTEXT = cvar.CMD_SUBSCRIBE_SIM_CONTEXT
RESPONSE_SUBSCRIBE_SIM_CONTEXT = cvar.RESPONSE_SUBSCRIBE_SIM_CONTEXT
CMD_GET_SIM_VARIABLE = cvar.CMD_GET_SIM_VARIABLE
RESPONSE_GET_SIM_VARIABLE = cvar.RESPONSE_GET_SIM_VARIABLE
CMD_SET_SIM_VARIABLE = cvar.CMD_SET_SIM_VARIABLE
CMD_SUBSCRIBE_SIM_VARIABLE = cvar.CMD_SUBSCRIBE_SIM_VARIABLE
RESPONSE_SUBSCRIBE_SIM_VARIABLE = cvar.RESPONSE_SUBSCRIBE_SIM_VARIABLE
CMD_SUBSCRIBE_GUI_CONTEXT = cvar.CMD_SUBSCRIBE_GUI_CONTEXT
RESPONSE_SUBSCRIBE_GUI_CONTEXT = cvar.RESPONSE_SUBSCRIBE_GUI_CONTEXT
CMD_GET_GUI_VARIABLE = cvar.CMD_GET_GUI_VARIABLE
RESPONSE_GET_GUI_VARIABLE = cvar.RESPONSE_GET_GUI_VARIABLE
CMD_SET_GUI_VARIABLE = cvar.CMD_SET_GUI_VARIABLE
CMD_SUBSCRIBE_GUI_VARIABLE = cvar.CMD_SUBSCRIBE_GUI_VARIABLE
RESPONSE_SUBSCRIBE_GUI_VARIABLE = cvar.RESPONSE_SUBSCRIBE_GUI_VARIABLE
CMD_SUBSCRIBE_LANEAREA_CONTEXT = cvar.CMD_SUBSCRIBE_LANEAREA_CONTEXT
RESPONSE_SUBSCRIBE_LANEAREA_CONTEXT = cvar.RESPONSE_SUBSCRIBE_LANEAREA_CONTEXT
CMD_GET_LANEAREA_VARIABLE = cvar.CMD_GET_LANEAREA_VARIABLE
RESPONSE_GET_LANEAREA_VARIABLE = cvar.RESPONSE_GET_LANEAREA_VARIABLE
CMD_SET_LANEAREA_VARIABLE = cvar.CMD_SET_LANEAREA_VARIABLE
CMD_SUBSCRIBE_LANEAREA_VARIABLE = cvar.CMD_SUBSCRIBE_LANEAREA_VARIABLE
RESPONSE_SUBSCRIBE_LANEAREA_VARIABLE = cvar.RESPONSE_SUBSCRIBE_LANEAREA_VARIABLE
CMD_SUBSCRIBE_PERSON_CONTEXT = cvar.CMD_SUBSCRIBE_PERSON_CONTEXT
RESPONSE_SUBSCRIBE_PERSON_CONTEXT = cvar.RESPONSE_SUBSCRIBE_PERSON_CONTEXT
CMD_GET_PERSON_VARIABLE = cvar.CMD_GET_PERSON_VARIABLE
RESPONSE_GET_PERSON_VARIABLE = cvar.RESPONSE_GET_PERSON_VARIABLE
CMD_SET_PERSON_VARIABLE = cvar.CMD_SET_PERSON_VARIABLE
CMD_SUBSCRIBE_PERSON_VARIABLE = cvar.CMD_SUBSCRIBE_PERSON_VARIABLE
RESPONSE_SUBSCRIBE_PERSON_VARIABLE = cvar.RESPONSE_SUBSCRIBE_PERSON_VARIABLE
CMD_SUBSCRIBE_BUSSTOP_CONTEXT = cvar.CMD_SUBSCRIBE_BUSSTOP_CONTEXT
RESPONSE_SUBSCRIBE_BUSSTOP_CONTEXT = cvar.RESPONSE_SUBSCRIBE_BUSSTOP_CONTEXT
CMD_GET_BUSSTOP_VARIABLE = cvar.CMD_GET_BUSSTOP_VARIABLE
RESPONSE_GET_BUSSTOP_VARIABLE = cvar.RESPONSE_GET_BUSSTOP_VARIABLE
CMD_SET_BUSSTOP_VARIABLE = cvar.CMD_SET_BUSSTOP_VARIABLE
CMD_SUBSCRIBE_BUSSTOP_VARIABLE = cvar.CMD_SUBSCRIBE_BUSSTOP_VARIABLE
RESPONSE_SUBSCRIBE_BUSSTOP_VARIABLE = cvar.RESPONSE_SUBSCRIBE_BUSSTOP_VARIABLE
CMD_SUBSCRIBE_PARKINGAREA_CONTEXT = cvar.CMD_SUBSCRIBE_PARKINGAREA_CONTEXT
RESPONSE_SUBSCRIBE_PARKINGAREA_CONTEXT = cvar.RESPONSE_SUBSCRIBE_PARKINGAREA_CONTEXT
CMD_GET_PARKINGAREA_VARIABLE = cvar.CMD_GET_PARKINGAREA_VARIABLE
RESPONSE_GET_PARKINGAREA_VARIABLE = cvar.RESPONSE_GET_PARKINGAREA_VARIABLE
CMD_SET_PARKINGAREA_VARIABLE = cvar.CMD_SET_PARKINGAREA_VARIABLE
CMD_SUBSCRIBE_PARKINGAREA_VARIABLE = cvar.CMD_SUBSCRIBE_PARKINGAREA_VARIABLE
RESPONSE_SUBSCRIBE_PARKINGAREA_VARIABLE = cvar.RESPONSE_SUBSCRIBE_PARKINGAREA_VARIABLE
CMD_SUBSCRIBE_CHARGINGSTATION_CONTEXT = cvar.CMD_SUBSCRIBE_CHARGINGSTATION_CONTEXT
RESPONSE_SUBSCRIBE_CHARGINGSTATION_CONTEXT = cvar.RESPONSE_SUBSCRIBE_CHARGINGSTATION_CONTEXT
CMD_GET_CHARGINGSTATION_VARIABLE = cvar.CMD_GET_CHARGINGSTATION_VARIABLE
RESPONSE_GET_CHARGINGSTATION_VARIABLE = cvar.RESPONSE_GET_CHARGINGSTATION_VARIABLE
CMD_SET_CHARGINGSTATION_VARIABLE = cvar.CMD_SET_CHARGINGSTATION_VARIABLE
CMD_SUBSCRIBE_CHARGINGSTATION_VARIABLE = cvar.CMD_SUBSCRIBE_CHARGINGSTATION_VARIABLE
RESPONSE_SUBSCRIBE_CHARGINGSTATION_VARIABLE = cvar.RESPONSE_SUBSCRIBE_CHARGINGSTATION_VARIABLE
CMD_SUBSCRIBE_ROUTEPROBE_CONTEXT = cvar.CMD_SUBSCRIBE_ROUTEPROBE_CONTEXT
RESPONSE_SUBSCRIBE_ROUTEPROBE_CONTEXT = cvar.RESPONSE_SUBSCRIBE_ROUTEPROBE_CONTEXT
CMD_GET_ROUTEPROBE_VARIABLE = cvar.CMD_GET_ROUTEPROBE_VARIABLE
RESPONSE_GET_ROUTEPROBE_VARIABLE = cvar.RESPONSE_GET_ROUTEPROBE_VARIABLE
CMD_SET_ROUTEPROBE_VARIABLE = cvar.CMD_SET_ROUTEPROBE_VARIABLE
CMD_SUBSCRIBE_ROUTEPROBE_VARIABLE = cvar.CMD_SUBSCRIBE_ROUTEPROBE_VARIABLE
RESPONSE_SUBSCRIBE_ROUTEPROBE_VARIABLE = cvar.RESPONSE_SUBSCRIBE_ROUTEPROBE_VARIABLE
CMD_SUBSCRIBE_CALIBRATOR_CONTEXT = cvar.CMD_SUBSCRIBE_CALIBRATOR_CONTEXT
RESPONSE_SUBSCRIBE_CALIBRATOR_CONTEXT = cvar.RESPONSE_SUBSCRIBE_CALIBRATOR_CONTEXT
CMD_GET_CALIBRATOR_VARIABLE = cvar.CMD_GET_CALIBRATOR_VARIABLE
RESPONSE_GET_CALIBRATOR_VARIABLE = cvar.RESPONSE_GET_CALIBRATOR_VARIABLE
CMD_SET_CALIBRATOR_VARIABLE = cvar.CMD_SET_CALIBRATOR_VARIABLE
CMD_SUBSCRIBE_CALIBRATOR_VARIABLE = cvar.CMD_SUBSCRIBE_CALIBRATOR_VARIABLE
RESPONSE_SUBSCRIBE_CALIBRATOR_VARIABLE = cvar.RESPONSE_SUBSCRIBE_CALIBRATOR_VARIABLE
CMD_SUBSCRIBE_REROUTER_CONTEXT = cvar.CMD_SUBSCRIBE_REROUTER_CONTEXT
RESPONSE_SUBSCRIBE_REROUTER_CONTEXT = cvar.RESPONSE_SUBSCRIBE_REROUTER_CONTEXT
CMD_GET_REROUTER_VARIABLE = cvar.CMD_GET_REROUTER_VARIABLE
RESPONSE_GET_REROUTER_VARIABLE = cvar.RESPONSE_GET_REROUTER_VARIABLE
CMD_SET_REROUTER_VARIABLE = cvar.CMD_SET_REROUTER_VARIABLE
CMD_SUBSCRIBE_REROUTER_VARIABLE = cvar.CMD_SUBSCRIBE_REROUTER_VARIABLE
RESPONSE_SUBSCRIBE_REROUTER_VARIABLE = cvar.RESPONSE_SUBSCRIBE_REROUTER_VARIABLE
CMD_SUBSCRIBE_VARIABLESPEEDSIGN_CONTEXT = cvar.CMD_SUBSCRIBE_VARIABLESPEEDSIGN_CONTEXT
RESPONSE_SUBSCRIBE_VARIABLESPEEDSIGN_CONTEXT = cvar.RESPONSE_SUBSCRIBE_VARIABLESPEEDSIGN_CONTEXT
CMD_GET_VARIABLESPEEDSIGN_VARIABLE = cvar.CMD_GET_VARIABLESPEEDSIGN_VARIABLE
RESPONSE_GET_VARIABLESPEEDSIGN_VARIABLE = cvar.RESPONSE_GET_VARIABLESPEEDSIGN_VARIABLE
CMD_SET_VARIABLESPEEDSIGN_VARIABLE = cvar.CMD_SET_VARIABLESPEEDSIGN_VARIABLE
CMD_SUBSCRIBE_VARIABLESPEEDSIGN_VARIABLE = cvar.CMD_SUBSCRIBE_VARIABLESPEEDSIGN_VARIABLE
RESPONSE_SUBSCRIBE_VARIABLESPEEDSIGN_VARIABLE = cvar.RESPONSE_SUBSCRIBE_VARIABLESPEEDSIGN_VARIABLE
CMD_SUBSCRIBE_MEANDATA_CONTEXT = cvar.CMD_SUBSCRIBE_MEANDATA_CONTEXT
RESPONSE_SUBSCRIBE_MEANDATA_CONTEXT = cvar.RESPONSE_SUBSCRIBE_MEANDATA_CONTEXT
CMD_GET_MEANDATA_VARIABLE = cvar.CMD_GET_MEANDATA_VARIABLE
RESPONSE_GET_MEANDATA_VARIABLE = cvar.RESPONSE_GET_MEANDATA_VARIABLE
CMD_SET_MEANDATA_VARIABLE = cvar.CMD_SET_MEANDATA_VARIABLE
CMD_SUBSCRIBE_MEANDATA_VARIABLE = cvar.CMD_SUBSCRIBE_MEANDATA_VARIABLE
RESPONSE_SUBSCRIBE_MEANDATA_VARIABLE = cvar.RESPONSE_SUBSCRIBE_MEANDATA_VARIABLE
CMD_SUBSCRIBE_OVERHEADWIRE_CONTEXT = cvar.CMD_SUBSCRIBE_OVERHEADWIRE_CONTEXT
RESPONSE_SUBSCRIBE_OVERHEADWIRE_CONTEXT = cvar.RESPONSE_SUBSCRIBE_OVERHEADWIRE_CONTEXT
CMD_GET_OVERHEADWIRE_VARIABLE = cvar.CMD_GET_OVERHEADWIRE_VARIABLE
RESPONSE_GET_OVERHEADWIRE_VARIABLE = cvar.RESPONSE_GET_OVERHEADWIRE_VARIABLE
CMD_SET_OVERHEADWIRE_VARIABLE = cvar.CMD_SET_OVERHEADWIRE_VARIABLE
CMD_SUBSCRIBE_OVERHEADWIRE_VARIABLE = cvar.CMD_SUBSCRIBE_OVERHEADWIRE_VARIABLE
RESPONSE_SUBSCRIBE_OVERHEADWIRE_VARIABLE = cvar.RESPONSE_SUBSCRIBE_OVERHEADWIRE_VARIABLE
POSITION_LON_LAT = cvar.POSITION_LON_LAT
POSITION_2D = cvar.POSITION_2D
POSITION_LON_LAT_ALT = cvar.POSITION_LON_LAT_ALT
POSITION_3D = cvar.POSITION_3D
POSITION_ROADMAP = cvar.POSITION_ROADMAP
TYPE_POLYGON = cvar.TYPE_POLYGON
TYPE_UBYTE = cvar.TYPE_UBYTE
TYPE_BYTE = cvar.TYPE_BYTE
TYPE_INTEGER = cvar.TYPE_INTEGER
TYPE_DOUBLE = cvar.TYPE_DOUBLE
TYPE_STRING = cvar.TYPE_STRING
TYPE_STRINGLIST = cvar.TYPE_STRINGLIST
TYPE_COMPOUND = cvar.TYPE_COMPOUND
TYPE_DOUBLELIST = cvar.TYPE_DOUBLELIST
TYPE_COLOR = cvar.TYPE_COLOR
RTYPE_OK = cvar.RTYPE_OK
RTYPE_NOTIMPLEMENTED = cvar.RTYPE_NOTIMPLEMENTED
RTYPE_ERR = cvar.RTYPE_ERR
INVALID_DOUBLE_VALUE = cvar.INVALID_DOUBLE_VALUE
INVALID_INT_VALUE = cvar.INVALID_INT_VALUE
MAX_ORDER = cvar.MAX_ORDER
REQUEST_AIRDIST = cvar.REQUEST_AIRDIST
REQUEST_DRIVINGDIST = cvar.REQUEST_DRIVINGDIST
REMOVE_TELEPORT = cvar.REMOVE_TELEPORT
REMOVE_PARKING = cvar.REMOVE_PARKING
REMOVE_ARRIVED = cvar.REMOVE_ARRIVED
REMOVE_VAPORIZED = cvar.REMOVE_VAPORIZED
REMOVE_TELEPORT_ARRIVED = cvar.REMOVE_TELEPORT_ARRIVED
MOVE_AUTOMATIC = cvar.MOVE_AUTOMATIC
MOVE_TELEPORT = cvar.MOVE_TELEPORT
MOVE_NORMAL = cvar.MOVE_NORMAL
STAGE_WAITING_FOR_DEPART = cvar.STAGE_WAITING_FOR_DEPART
STAGE_WAITING = cvar.STAGE_WAITING
STAGE_WALKING = cvar.STAGE_WALKING
STAGE_DRIVING = cvar.STAGE_DRIVING
STAGE_ACCESS = cvar.STAGE_ACCESS
STAGE_TRIP = cvar.STAGE_TRIP
STAGE_TRANSHIP = cvar.STAGE_TRANSHIP
STOP_DEFAULT = cvar.STOP_DEFAULT
STOP_PARKING = cvar.STOP_PARKING
STOP_TRIGGERED = cvar.STOP_TRIGGERED
STOP_CONTAINER_TRIGGERED = cvar.STOP_CONTAINER_TRIGGERED
STOP_BUS_STOP = cvar.STOP_BUS_STOP
STOP_CONTAINER_STOP = cvar.STOP_CONTAINER_STOP
STOP_CHARGING_STATION = cvar.STOP_CHARGING_STATION
STOP_PARKING_AREA = cvar.STOP_PARKING_AREA
STOP_OVERHEAD_WIRE = cvar.STOP_OVERHEAD_WIRE
DEPARTFLAG_TRIGGERED = cvar.DEPARTFLAG_TRIGGERED
DEPARTFLAG_CONTAINER_TRIGGERED = cvar.DEPARTFLAG_CONTAINER_TRIGGERED
DEPARTFLAG_NOW = cvar.DEPARTFLAG_NOW
DEPARTFLAG_SPEED_RANDOM = cvar.DEPARTFLAG_SPEED_RANDOM
DEPARTFLAG_SPEED_MAX = cvar.DEPARTFLAG_SPEED_MAX
DEPARTFLAG_LANE_RANDOM = cvar.DEPARTFLAG_LANE_RANDOM
DEPARTFLAG_LANE_FREE = cvar.DEPARTFLAG_LANE_FREE
DEPARTFLAG_LANE_ALLOWED_FREE = cvar.DEPARTFLAG_LANE_ALLOWED_FREE
DEPARTFLAG_LANE_BEST_FREE = cvar.DEPARTFLAG_LANE_BEST_FREE
DEPARTFLAG_LANE_FIRST_ALLOWED = cvar.DEPARTFLAG_LANE_FIRST_ALLOWED
DEPARTFLAG_POS_RANDOM = cvar.DEPARTFLAG_POS_RANDOM
DEPARTFLAG_POS_FREE = cvar.DEPARTFLAG_POS_FREE
DEPARTFLAG_POS_BASE = cvar.DEPARTFLAG_POS_BASE
DEPARTFLAG_POS_LAST = cvar.DEPARTFLAG_POS_LAST
DEPARTFLAG_POS_RANDOM_FREE = cvar.DEPARTFLAG_POS_RANDOM_FREE
ARRIVALFLAG_LANE_CURRENT = cvar.ARRIVALFLAG_LANE_CURRENT
ARRIVALFLAG_SPEED_CURRENT = cvar.ARRIVALFLAG_SPEED_CURRENT
ARRIVALFLAG_POS_RANDOM = cvar.ARRIVALFLAG_POS_RANDOM
ARRIVALFLAG_POS_MAX = cvar.ARRIVALFLAG_POS_MAX
ROUTING_MODE_DEFAULT = cvar.ROUTING_MODE_DEFAULT
ROUTING_MODE_AGGREGATED = cvar.ROUTING_MODE_AGGREGATED
ROUTING_MODE_EFFORT = cvar.ROUTING_MODE_EFFORT
ROUTING_MODE_COMBINED = cvar.ROUTING_MODE_COMBINED
TRAFFICLIGHT_TYPE_STATIC = cvar.TRAFFICLIGHT_TYPE_STATIC
TRAFFICLIGHT_TYPE_ACTUATED = cvar.TRAFFICLIGHT_TYPE_ACTUATED
TRAFFICLIGHT_TYPE_DELAYBASED = cvar.TRAFFICLIGHT_TYPE_DELAYBASED
FILTER_TYPE_NONE = cvar.FILTER_TYPE_NONE
FILTER_TYPE_LANES = cvar.FILTER_TYPE_LANES
FILTER_TYPE_NOOPPOSITE = cvar.FILTER_TYPE_NOOPPOSITE
FILTER_TYPE_DOWNSTREAM_DIST = cvar.FILTER_TYPE_DOWNSTREAM_DIST
FILTER_TYPE_UPSTREAM_DIST = cvar.FILTER_TYPE_UPSTREAM_DIST
FILTER_TYPE_LEAD_FOLLOW = cvar.FILTER_TYPE_LEAD_FOLLOW
FILTER_TYPE_TURN = cvar.FILTER_TYPE_TURN
FILTER_TYPE_VCLASS = cvar.FILTER_TYPE_VCLASS
FILTER_TYPE_VTYPE = cvar.FILTER_TYPE_VTYPE
FILTER_TYPE_FIELD_OF_VISION = cvar.FILTER_TYPE_FIELD_OF_VISION
FILTER_TYPE_LATERAL_DIST = cvar.FILTER_TYPE_LATERAL_DIST
TRACI_ID_LIST = cvar.TRACI_ID_LIST
ID_COUNT = cvar.ID_COUNT
AUTOMATIC_VARIABLES_SUBSCRIPTION = cvar.AUTOMATIC_VARIABLES_SUBSCRIPTION
AUTOMATIC_CONTEXT_SUBSCRIPTION = cvar.AUTOMATIC_CONTEXT_SUBSCRIPTION
GENERIC_ATTRIBUTE = cvar.GENERIC_ATTRIBUTE
LAST_STEP_VEHICLE_NUMBER = cvar.LAST_STEP_VEHICLE_NUMBER
LAST_STEP_MEAN_SPEED = cvar.LAST_STEP_MEAN_SPEED
LAST_STEP_VEHICLE_ID_LIST = cvar.LAST_STEP_VEHICLE_ID_LIST
LAST_STEP_OCCUPANCY = cvar.LAST_STEP_OCCUPANCY
LAST_STEP_VEHICLE_HALTING_NUMBER = cvar.LAST_STEP_VEHICLE_HALTING_NUMBER
LAST_STEP_LENGTH = cvar.LAST_STEP_LENGTH
LAST_STEP_TIME_SINCE_DETECTION = cvar.LAST_STEP_TIME_SINCE_DETECTION
LAST_STEP_VEHICLE_DATA = cvar.LAST_STEP_VEHICLE_DATA
JAM_LENGTH_VEHICLE = cvar.JAM_LENGTH_VEHICLE
JAM_LENGTH_METERS = cvar.JAM_LENGTH_METERS
LAST_STEP_PERSON_ID_LIST = cvar.LAST_STEP_PERSON_ID_LIST
VAR_NAME = cvar.VAR_NAME
VAR_FOLLOW_SPEED = cvar.VAR_FOLLOW_SPEED
VAR_STOP_SPEED = cvar.VAR_STOP_SPEED
VAR_SECURE_GAP = cvar.VAR_SECURE_GAP
VAR_STOP_DELAY = cvar.VAR_STOP_DELAY
VAR_STOP_ARRIVALDELAY = cvar.VAR_STOP_ARRIVALDELAY
VAR_BEGIN = cvar.VAR_BEGIN
VAR_END = cvar.VAR_END
VAR_VTYPES = cvar.VAR_VTYPES
VAR_VEHSPERHOUR = cvar.VAR_VEHSPERHOUR
VAR_PASSED = cvar.VAR_PASSED
VAR_INSERTED = cvar.VAR_INSERTED
VAR_REMOVED = cvar.VAR_REMOVED
VAR_ROUTE_PROBE = cvar.VAR_ROUTE_PROBE
CMD_SET_FLOW = cvar.CMD_SET_FLOW
TL_RED_YELLOW_GREEN_STATE = cvar.TL_RED_YELLOW_GREEN_STATE
TL_PHASE_INDEX = cvar.TL_PHASE_INDEX
TL_PROGRAM = cvar.TL_PROGRAM
TL_PHASE_DURATION = cvar.TL_PHASE_DURATION
TL_BLOCKING_VEHICLES = cvar.TL_BLOCKING_VEHICLES
TL_CONTROLLED_LANES = cvar.TL_CONTROLLED_LANES
TL_CONTROLLED_LINKS = cvar.TL_CONTROLLED_LINKS
TL_CURRENT_PHASE = cvar.TL_CURRENT_PHASE
TL_CURRENT_PROGRAM = cvar.TL_CURRENT_PROGRAM
TL_RIVAL_VEHICLES = cvar.TL_RIVAL_VEHICLES
TL_PRIORITY_VEHICLES = cvar.TL_PRIORITY_VEHICLES
TL_CONTROLLED_JUNCTIONS = cvar.TL_CONTROLLED_JUNCTIONS
TL_COMPLETE_DEFINITION_RYG = cvar.TL_COMPLETE_DEFINITION_RYG
TL_COMPLETE_PROGRAM_RYG = cvar.TL_COMPLETE_PROGRAM_RYG
TL_NEXT_SWITCH = cvar.TL_NEXT_SWITCH
TL_EXTERNAL_STATE = cvar.TL_EXTERNAL_STATE
LANE_LINK_NUMBER = cvar.LANE_LINK_NUMBER
LANE_EDGE_ID = cvar.LANE_EDGE_ID
LANE_LINKS = cvar.LANE_LINKS
LANE_ALLOWED = cvar.LANE_ALLOWED
LANE_DISALLOWED = cvar.LANE_DISALLOWED
VAR_FOES = cvar.VAR_FOES
VAR_SLOPE = cvar.VAR_SLOPE
VAR_SPEED = cvar.VAR_SPEED
VAR_PREV_SPEED = cvar.VAR_PREV_SPEED
VAR_SPEED_LAT = cvar.VAR_SPEED_LAT
VAR_MAXSPEED = cvar.VAR_MAXSPEED
VAR_POSITION = cvar.VAR_POSITION
VAR_POSITION3D = cvar.VAR_POSITION3D
VAR_ANGLE = cvar.VAR_ANGLE
VAR_LENGTH = cvar.VAR_LENGTH
VAR_COLOR = cvar.VAR_COLOR
VAR_ACCEL = cvar.VAR_ACCEL
VAR_DECEL = cvar.VAR_DECEL
VAR_EMERGENCY_DECEL = cvar.VAR_EMERGENCY_DECEL
VAR_APPARENT_DECEL = cvar.VAR_APPARENT_DECEL
VAR_ACTIONSTEPLENGTH = cvar.VAR_ACTIONSTEPLENGTH
VAR_LASTACTIONTIME = cvar.VAR_LASTACTIONTIME
VAR_TAU = cvar.VAR_TAU
VAR_VEHICLECLASS = cvar.VAR_VEHICLECLASS
VAR_EMISSIONCLASS = cvar.VAR_EMISSIONCLASS
VAR_SHAPECLASS = cvar.VAR_SHAPECLASS
VAR_MINGAP = cvar.VAR_MINGAP
VAR_WIDTH = cvar.VAR_WIDTH
VAR_SHAPE = cvar.VAR_SHAPE
VAR_TYPE = cvar.VAR_TYPE
VAR_ROAD_ID = cvar.VAR_ROAD_ID
VAR_LANE_ID = cvar.VAR_LANE_ID
VAR_LANE_INDEX = cvar.VAR_LANE_INDEX
VAR_ROUTE_ID = cvar.VAR_ROUTE_ID
VAR_EDGES = cvar.VAR_EDGES
VAR_LANES = cvar.VAR_LANES
VAR_UPDATE_BESTLANES = cvar.VAR_UPDATE_BESTLANES
VAR_FILL = cvar.VAR_FILL
VAR_IMAGEFILE = cvar.VAR_IMAGEFILE
VAR_LANEPOSITION = cvar.VAR_LANEPOSITION
VAR_ROUTE = cvar.VAR_ROUTE
VAR_EDGE_TRAVELTIME = cvar.VAR_EDGE_TRAVELTIME
VAR_EDGE_EFFORT = cvar.VAR_EDGE_EFFORT
VAR_CURRENT_TRAVELTIME = cvar.VAR_CURRENT_TRAVELTIME
VAR_SIGNALS = cvar.VAR_SIGNALS
VAR_MOVE_TO = cvar.VAR_MOVE_TO
VAR_ADD_DYNAMICS = cvar.VAR_ADD_DYNAMICS
VAR_HIGHLIGHT = cvar.VAR_HIGHLIGHT
VAR_IMPERFECTION = cvar.VAR_IMPERFECTION
VAR_SPEED_FACTOR = cvar.VAR_SPEED_FACTOR
VAR_SPEED_DEVIATION = cvar.VAR_SPEED_DEVIATION
VAR_ROUTING_MODE = cvar.VAR_ROUTING_MODE
VAR_SPEED_WITHOUT_TRACI = cvar.VAR_SPEED_WITHOUT_TRACI
VAR_BEST_LANES = cvar.VAR_BEST_LANES
VAR_SPEEDSETMODE = cvar.VAR_SPEEDSETMODE
MOVE_TO_XY = cvar.MOVE_TO_XY
VAR_STOPSTATE = cvar.VAR_STOPSTATE
VAR_LANECHANGE_MODE = cvar.VAR_LANECHANGE_MODE
VAR_ALLOWED_SPEED = cvar.VAR_ALLOWED_SPEED
VAR_LANEPOSITION_LAT = cvar.VAR_LANEPOSITION_LAT
VAR_LATALIGNMENT = cvar.VAR_LATALIGNMENT
VAR_MAXSPEED_LAT = cvar.VAR_MAXSPEED_LAT
VAR_MINGAP_LAT = cvar.VAR_MINGAP_LAT
VAR_HEIGHT = cvar.VAR_HEIGHT
VAR_LINE = cvar.VAR_LINE
VAR_VIA = cvar.VAR_VIA
VAR_NEIGHBORS = cvar.VAR_NEIGHBORS
VAR_CO2EMISSION = cvar.VAR_CO2EMISSION
VAR_COEMISSION = cvar.VAR_COEMISSION
VAR_HCEMISSION = cvar.VAR_HCEMISSION
VAR_PMXEMISSION = cvar.VAR_PMXEMISSION
VAR_NOXEMISSION = cvar.VAR_NOXEMISSION
VAR_FUELCONSUMPTION = cvar.VAR_FUELCONSUMPTION
VAR_NOISEEMISSION = cvar.VAR_NOISEEMISSION
VAR_PERSON_NUMBER = cvar.VAR_PERSON_NUMBER
VAR_PERSON_CAPACITY = cvar.VAR_PERSON_CAPACITY
VAR_BUS_STOP_ID_LIST = cvar.VAR_BUS_STOP_ID_LIST
VAR_BUS_STOP_WAITING = cvar.VAR_BUS_STOP_WAITING
VAR_BUS_STOP_WAITING_IDS = cvar.VAR_BUS_STOP_WAITING_IDS
VAR_LEADER = cvar.VAR_LEADER
VAR_FOLLOWER = cvar.VAR_FOLLOWER
VAR_ROUTE_INDEX = cvar.VAR_ROUTE_INDEX
VAR_WAITING_TIME = cvar.VAR_WAITING_TIME
VAR_ACCUMULATED_WAITING_TIME = cvar.VAR_ACCUMULATED_WAITING_TIME
VAR_NEXT_TLS = cvar.VAR_NEXT_TLS
VAR_NEXT_STOPS = cvar.VAR_NEXT_STOPS
VAR_NEXT_STOPS2 = cvar.VAR_NEXT_STOPS2
VAR_ACCELERATION = cvar.VAR_ACCELERATION
VAR_ARRIVALPOS = cvar.VAR_ARRIVALPOS
VAR_ARRIVALLANE = cvar.VAR_ARRIVALLANE
VAR_ARRIVALSPEED = cvar.VAR_ARRIVALSPEED
CMD_MESSAGE = cvar.CMD_MESSAGE
VAR_TIME = cvar.VAR_TIME
VAR_TIME_STEP = cvar.VAR_TIME_STEP
VAR_ELECTRICITYCONSUMPTION = cvar.VAR_ELECTRICITYCONSUMPTION
VAR_LOADED_VEHICLES_NUMBER = cvar.VAR_LOADED_VEHICLES_NUMBER
VAR_LOADED_VEHICLES_IDS = cvar.VAR_LOADED_VEHICLES_IDS
VAR_DEPARTED_VEHICLES_NUMBER = cvar.VAR_DEPARTED_VEHICLES_NUMBER
VAR_DEPARTED_VEHICLES_IDS = cvar.VAR_DEPARTED_VEHICLES_IDS
VAR_TELEPORT_STARTING_VEHICLES_NUMBER = cvar.VAR_TELEPORT_STARTING_VEHICLES_NUMBER
VAR_TELEPORT_STARTING_VEHICLES_IDS = cvar.VAR_TELEPORT_STARTING_VEHICLES_IDS
VAR_TELEPORT_ENDING_VEHICLES_NUMBER = cvar.VAR_TELEPORT_ENDING_VEHICLES_NUMBER
VAR_TELEPORT_ENDING_VEHICLES_IDS = cvar.VAR_TELEPORT_ENDING_VEHICLES_IDS
VAR_ARRIVED_VEHICLES_NUMBER = cvar.VAR_ARRIVED_VEHICLES_NUMBER
VAR_ARRIVED_VEHICLES_IDS = cvar.VAR_ARRIVED_VEHICLES_IDS
VAR_DELTA_T = cvar.VAR_DELTA_T
VAR_NET_BOUNDING_BOX = cvar.VAR_NET_BOUNDING_BOX
VAR_MIN_EXPECTED_VEHICLES = cvar.VAR_MIN_EXPECTED_VEHICLES
VAR_STOP_STARTING_VEHICLES_NUMBER = cvar.VAR_STOP_STARTING_VEHICLES_NUMBER
VAR_STOP_STARTING_VEHICLES_IDS = cvar.VAR_STOP_STARTING_VEHICLES_IDS
VAR_STOP_ENDING_VEHICLES_NUMBER = cvar.VAR_STOP_ENDING_VEHICLES_NUMBER
VAR_STOP_ENDING_VEHICLES_IDS = cvar.VAR_STOP_ENDING_VEHICLES_IDS
VAR_PARKING_STARTING_VEHICLES_NUMBER = cvar.VAR_PARKING_STARTING_VEHICLES_NUMBER
VAR_PARKING_STARTING_VEHICLES_IDS = cvar.VAR_PARKING_STARTING_VEHICLES_IDS
VAR_PARKING_MANEUVERING_VEHICLES_NUMBER = cvar.VAR_PARKING_MANEUVERING_VEHICLES_NUMBER
VAR_PARKING_MANEUVERING_VEHICLES_IDS = cvar.VAR_PARKING_MANEUVERING_VEHICLES_IDS
VAR_PARKING_ENDING_VEHICLES_NUMBER = cvar.VAR_PARKING_ENDING_VEHICLES_NUMBER
VAR_PARKING_ENDING_VEHICLES_IDS = cvar.VAR_PARKING_ENDING_VEHICLES_IDS
VAR_COLLIDING_VEHICLES_NUMBER = cvar.VAR_COLLIDING_VEHICLES_NUMBER
VAR_COLLIDING_VEHICLES_IDS = cvar.VAR_COLLIDING_VEHICLES_IDS
VAR_EMERGENCYSTOPPING_VEHICLES_NUMBER = cvar.VAR_EMERGENCYSTOPPING_VEHICLES_NUMBER
VAR_EMERGENCYSTOPPING_VEHICLES_IDS = cvar.VAR_EMERGENCYSTOPPING_VEHICLES_IDS
CMD_CLEAR_PENDING_VEHICLES = cvar.CMD_CLEAR_PENDING_VEHICLES
CMD_SAVE_SIMSTATE = cvar.CMD_SAVE_SIMSTATE
CMD_LOAD_SIMSTATE = cvar.CMD_LOAD_SIMSTATE
VAR_COLLISIONS = cvar.VAR_COLLISIONS
VAR_PARAMETER = cvar.VAR_PARAMETER
VAR_PARAMETER_WITH_KEY = cvar.VAR_PARAMETER_WITH_KEY
ADD = cvar.ADD
REMOVE = cvar.REMOVE
COPY = cvar.COPY
POSITION_CONVERSION = cvar.POSITION_CONVERSION
DISTANCE_REQUEST = cvar.DISTANCE_REQUEST
VAR_DISTANCE = cvar.VAR_DISTANCE
ADD_FULL = cvar.ADD_FULL
FIND_ROUTE = cvar.FIND_ROUTE
FIND_INTERMODAL_ROUTE = cvar.FIND_INTERMODAL_ROUTE
CMD_REROUTE_TRAVELTIME = cvar.CMD_REROUTE_TRAVELTIME
CMD_REROUTE_EFFORT = cvar.CMD_REROUTE_EFFORT
VAR_ROUTE_VALID = cvar.VAR_ROUTE_VALID
VAR_STAGE = cvar.VAR_STAGE
VAR_NEXT_EDGE = cvar.VAR_NEXT_EDGE
VAR_STAGES_REMAINING = cvar.VAR_STAGES_REMAINING
VAR_VEHICLE = cvar.VAR_VEHICLE
APPEND_STAGE = cvar.APPEND_STAGE
REPLACE_STAGE = cvar.REPLACE_STAGE
REMOVE_STAGE = cvar.REMOVE_STAGE
VAR_TAXI_RESERVATIONS = cvar.VAR_TAXI_RESERVATIONS
VAR_SAMPLE_LAST = cvar.VAR_SAMPLE_LAST
VAR_SAMPLE_CURRENT = cvar.VAR_SAMPLE_CURRENT
VAR_VIEW_ZOOM = cvar.VAR_VIEW_ZOOM
VAR_VIEW_OFFSET = cvar.VAR_VIEW_OFFSET
VAR_VIEW_SCHEMA = cvar.VAR_VIEW_SCHEMA
VAR_VIEW_BOUNDARY = cvar.VAR_VIEW_BOUNDARY
VAR_SELECT = cvar.VAR_SELECT
VAR_SCREENSHOT = cvar.VAR_SCREENSHOT
VAR_TRACK_VEHICLE = cvar.VAR_TRACK_VEHICLE
VAR_HAS_VIEW = cvar.VAR_HAS_VIEW

def trafficlight_getRedYellowGreenState(tlsID):
    return _libtraci.trafficlight_getRedYellowGreenState(tlsID)
trafficlight_getRedYellowGreenState = _libtraci.trafficlight_getRedYellowGreenState

def trafficlight_getAllProgramLogics(tlsID):
    return _libtraci.trafficlight_getAllProgramLogics(tlsID)
trafficlight_getAllProgramLogics = _libtraci.trafficlight_getAllProgramLogics

def trafficlight_getControlledJunctions(tlsID):
    return _libtraci.trafficlight_getControlledJunctions(tlsID)
trafficlight_getControlledJunctions = _libtraci.trafficlight_getControlledJunctions

def trafficlight_getControlledLanes(tlsID):
    return _libtraci.trafficlight_getControlledLanes(tlsID)
trafficlight_getControlledLanes = _libtraci.trafficlight_getControlledLanes

def trafficlight_getControlledLinks(tlsID):
    return _libtraci.trafficlight_getControlledLinks(tlsID)
trafficlight_getControlledLinks = _libtraci.trafficlight_getControlledLinks

def trafficlight_getProgram(tlsID):
    return _libtraci.trafficlight_getProgram(tlsID)
trafficlight_getProgram = _libtraci.trafficlight_getProgram

def trafficlight_getPhase(tlsID):
    return _libtraci.trafficlight_getPhase(tlsID)
trafficlight_getPhase = _libtraci.trafficlight_getPhase

def trafficlight_getPhaseName(tlsID):
    return _libtraci.trafficlight_getPhaseName(tlsID)
trafficlight_getPhaseName = _libtraci.trafficlight_getPhaseName

def trafficlight_getPhaseDuration(tlsID):
    return _libtraci.trafficlight_getPhaseDuration(tlsID)
trafficlight_getPhaseDuration = _libtraci.trafficlight_getPhaseDuration

def trafficlight_getNextSwitch(tlsID):
    return _libtraci.trafficlight_getNextSwitch(tlsID)
trafficlight_getNextSwitch = _libtraci.trafficlight_getNextSwitch

def trafficlight_getServedPersonCount(tlsID, index):
    return _libtraci.trafficlight_getServedPersonCount(tlsID, index)
trafficlight_getServedPersonCount = _libtraci.trafficlight_getServedPersonCount

def trafficlight_getBlockingVehicles(tlsID, linkIndex):
    return _libtraci.trafficlight_getBlockingVehicles(tlsID, linkIndex)
trafficlight_getBlockingVehicles = _libtraci.trafficlight_getBlockingVehicles

def trafficlight_getRivalVehicles(tlsID, linkIndex):
    return _libtraci.trafficlight_getRivalVehicles(tlsID, linkIndex)
trafficlight_getRivalVehicles = _libtraci.trafficlight_getRivalVehicles

def trafficlight_getPriorityVehicles(tlsID, linkIndex):
    return _libtraci.trafficlight_getPriorityVehicles(tlsID, linkIndex)
trafficlight_getPriorityVehicles = _libtraci.trafficlight_getPriorityVehicles

def trafficlight_getIDList():
    return _libtraci.trafficlight_getIDList()
trafficlight_getIDList = _libtraci.trafficlight_getIDList

def trafficlight_getIDCount():
    return _libtraci.trafficlight_getIDCount()
trafficlight_getIDCount = _libtraci.trafficlight_getIDCount

def trafficlight_getParameter(objectID, param):
    return _libtraci.trafficlight_getParameter(objectID, param)
trafficlight_getParameter = _libtraci.trafficlight_getParameter

def trafficlight_getParameterWithKey(objectID, key):
    return _libtraci.trafficlight_getParameterWithKey(objectID, key)
trafficlight_getParameterWithKey = _libtraci.trafficlight_getParameterWithKey

def trafficlight_setParameter(objectID, param, value):
    return _libtraci.trafficlight_setParameter(objectID, param, value)
trafficlight_setParameter = _libtraci.trafficlight_setParameter

def trafficlight_subscribe(*args, **kwargs):
    return _libtraci.trafficlight_subscribe(*args, **kwargs)
trafficlight_subscribe = _libtraci.trafficlight_subscribe

def trafficlight_unsubscribe(objectID):
    return _libtraci.trafficlight_unsubscribe(objectID)
trafficlight_unsubscribe = _libtraci.trafficlight_unsubscribe

def trafficlight_subscribeContext(*args, **kwargs):
    return _libtraci.trafficlight_subscribeContext(*args, **kwargs)
trafficlight_subscribeContext = _libtraci.trafficlight_subscribeContext

def trafficlight_unsubscribeContext(objectID, domain, dist):
    return _libtraci.trafficlight_unsubscribeContext(objectID, domain, dist)
trafficlight_unsubscribeContext = _libtraci.trafficlight_unsubscribeContext

def trafficlight_getAllSubscriptionResults():
    return _libtraci.trafficlight_getAllSubscriptionResults()
trafficlight_getAllSubscriptionResults = _libtraci.trafficlight_getAllSubscriptionResults

def trafficlight_getSubscriptionResults(objectID):
    return _libtraci.trafficlight_getSubscriptionResults(objectID)
trafficlight_getSubscriptionResults = _libtraci.trafficlight_getSubscriptionResults

def trafficlight_getAllContextSubscriptionResults():
    return _libtraci.trafficlight_getAllContextSubscriptionResults()
trafficlight_getAllContextSubscriptionResults = _libtraci.trafficlight_getAllContextSubscriptionResults

def trafficlight_getContextSubscriptionResults(objectID):
    return _libtraci.trafficlight_getContextSubscriptionResults(objectID)
trafficlight_getContextSubscriptionResults = _libtraci.trafficlight_getContextSubscriptionResults

def trafficlight_subscribeParameterWithKey(*args, **kwargs):
    return _libtraci.trafficlight_subscribeParameterWithKey(*args, **kwargs)
trafficlight_subscribeParameterWithKey = _libtraci.trafficlight_subscribeParameterWithKey

def trafficlight_setRedYellowGreenState(tlsID, state):
    return _libtraci.trafficlight_setRedYellowGreenState(tlsID, state)
trafficlight_setRedYellowGreenState = _libtraci.trafficlight_setRedYellowGreenState

def trafficlight_setPhase(tlsID, index):
    return _libtraci.trafficlight_setPhase(tlsID, index)
trafficlight_setPhase = _libtraci.trafficlight_setPhase

def trafficlight_setPhaseName(tlsID, name):
    return _libtraci.trafficlight_setPhaseName(tlsID, name)
trafficlight_setPhaseName = _libtraci.trafficlight_setPhaseName

def trafficlight_setProgram(tlsID, programID):
    return _libtraci.trafficlight_setProgram(tlsID, programID)
trafficlight_setProgram = _libtraci.trafficlight_setProgram

def trafficlight_setPhaseDuration(tlsID, phaseDuration):
    return _libtraci.trafficlight_setPhaseDuration(tlsID, phaseDuration)
trafficlight_setPhaseDuration = _libtraci.trafficlight_setPhaseDuration

def trafficlight_setProgramLogic(tlsID, logic):
    return _libtraci.trafficlight_setProgramLogic(tlsID, logic)
trafficlight_setProgramLogic = _libtraci.trafficlight_setProgramLogic

def trafficlight_getCompleteRedYellowGreenDefinition(tlsID):
    return _libtraci.trafficlight_getCompleteRedYellowGreenDefinition(tlsID)
trafficlight_getCompleteRedYellowGreenDefinition = _libtraci.trafficlight_getCompleteRedYellowGreenDefinition

def trafficlight_setCompleteRedYellowGreenDefinition(tlsID, logic):
    return _libtraci.trafficlight_setCompleteRedYellowGreenDefinition(tlsID, logic)
trafficlight_setCompleteRedYellowGreenDefinition = _libtraci.trafficlight_setCompleteRedYellowGreenDefinition

class vehicletype(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vehicletype, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vehicletype, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        getLength = staticmethod(_libtraci.vehicletype_getLength)
    else:
        getLength = _libtraci.vehicletype_getLength
    if _newclass:
        getMaxSpeed = staticmethod(_libtraci.vehicletype_getMaxSpeed)
    else:
        getMaxSpeed = _libtraci.vehicletype_getMaxSpeed
    if _newclass:
        getActionStepLength = staticmethod(_libtraci.vehicletype_getActionStepLength)
    else:
        getActionStepLength = _libtraci.vehicletype_getActionStepLength
    if _newclass:
        getSpeedFactor = staticmethod(_libtraci.vehicletype_getSpeedFactor)
    else:
        getSpeedFactor = _libtraci.vehicletype_getSpeedFactor
    if _newclass:
        getSpeedDeviation = staticmethod(_libtraci.vehicletype_getSpeedDeviation)
    else:
        getSpeedDeviation = _libtraci.vehicletype_getSpeedDeviation
    if _newclass:
        getAccel = staticmethod(_libtraci.vehicletype_getAccel)
    else:
        getAccel = _libtraci.vehicletype_getAccel
    if _newclass:
        getDecel = staticmethod(_libtraci.vehicletype_getDecel)
    else:
        getDecel = _libtraci.vehicletype_getDecel
    if _newclass:
        getEmergencyDecel = staticmethod(_libtraci.vehicletype_getEmergencyDecel)
    else:
        getEmergencyDecel = _libtraci.vehicletype_getEmergencyDecel
    if _newclass:
        getApparentDecel = staticmethod(_libtraci.vehicletype_getApparentDecel)
    else:
        getApparentDecel = _libtraci.vehicletype_getApparentDecel
    if _newclass:
        getImperfection = staticmethod(_libtraci.vehicletype_getImperfection)
    else:
        getImperfection = _libtraci.vehicletype_getImperfection
    if _newclass:
        getTau = staticmethod(_libtraci.vehicletype_getTau)
    else:
        getTau = _libtraci.vehicletype_getTau
    if _newclass:
        getVehicleClass = staticmethod(_libtraci.vehicletype_getVehicleClass)
    else:
        getVehicleClass = _libtraci.vehicletype_getVehicleClass
    if _newclass:
        getEmissionClass = staticmethod(_libtraci.vehicletype_getEmissionClass)
    else:
        getEmissionClass = _libtraci.vehicletype_getEmissionClass
    if _newclass:
        getShapeClass = staticmethod(_libtraci.vehicletype_getShapeClass)
    else:
        getShapeClass = _libtraci.vehicletype_getShapeClass
    if _newclass:
        getMinGap = staticmethod(_libtraci.vehicletype_getMinGap)
    else:
        getMinGap = _libtraci.vehicletype_getMinGap
    if _newclass:
        getWidth = staticmethod(_libtraci.vehicletype_getWidth)
    else:
        getWidth = _libtraci.vehicletype_getWidth
    if _newclass:
        getHeight = staticmethod(_libtraci.vehicletype_getHeight)
    else:
        getHeight = _libtraci.vehicletype_getHeight
    if _newclass:
        getColor = staticmethod(_libtraci.vehicletype_getColor)
    else:
        getColor = _libtraci.vehicletype_getColor
    if _newclass:
        getMinGapLat = staticmethod(_libtraci.vehicletype_getMinGapLat)
    else:
        getMinGapLat = _libtraci.vehicletype_getMinGapLat
    if _newclass:
        getMaxSpeedLat = staticmethod(_libtraci.vehicletype_getMaxSpeedLat)
    else:
        getMaxSpeedLat = _libtraci.vehicletype_getMaxSpeedLat
    if _newclass:
        getLateralAlignment = staticmethod(_libtraci.vehicletype_getLateralAlignment)
    else:
        getLateralAlignment = _libtraci.vehicletype_getLateralAlignment
    if _newclass:
        getPersonCapacity = staticmethod(_libtraci.vehicletype_getPersonCapacity)
    else:
        getPersonCapacity = _libtraci.vehicletype_getPersonCapacity
    if _newclass:
        getIDList = staticmethod(_libtraci.vehicletype_getIDList)
    else:
        getIDList = _libtraci.vehicletype_getIDList
    if _newclass:
        getIDCount = staticmethod(_libtraci.vehicletype_getIDCount)
    else:
        getIDCount = _libtraci.vehicletype_getIDCount
    if _newclass:
        getParameter = staticmethod(_libtraci.vehicletype_getParameter)
    else:
        getParameter = _libtraci.vehicletype_getParameter
    if _newclass:
        getParameterWithKey = staticmethod(_libtraci.vehicletype_getParameterWithKey)
    else:
        getParameterWithKey = _libtraci.vehicletype_getParameterWithKey
    if _newclass:
        setParameter = staticmethod(_libtraci.vehicletype_setParameter)
    else:
        setParameter = _libtraci.vehicletype_setParameter
    if _newclass:
        setLength = staticmethod(_libtraci.vehicletype_setLength)
    else:
        setLength = _libtraci.vehicletype_setLength
    if _newclass:
        setMaxSpeed = staticmethod(_libtraci.vehicletype_setMaxSpeed)
    else:
        setMaxSpeed = _libtraci.vehicletype_setMaxSpeed
    if _newclass:
        setVehicleClass = staticmethod(_libtraci.vehicletype_setVehicleClass)
    else:
        setVehicleClass = _libtraci.vehicletype_setVehicleClass
    if _newclass:
        setSpeedFactor = staticmethod(_libtraci.vehicletype_setSpeedFactor)
    else:
        setSpeedFactor = _libtraci.vehicletype_setSpeedFactor
    if _newclass:
        setEmissionClass = staticmethod(_libtraci.vehicletype_setEmissionClass)
    else:
        setEmissionClass = _libtraci.vehicletype_setEmissionClass
    if _newclass:
        setShapeClass = staticmethod(_libtraci.vehicletype_setShapeClass)
    else:
        setShapeClass = _libtraci.vehicletype_setShapeClass
    if _newclass:
        setWidth = staticmethod(_libtraci.vehicletype_setWidth)
    else:
        setWidth = _libtraci.vehicletype_setWidth
    if _newclass:
        setHeight = staticmethod(_libtraci.vehicletype_setHeight)
    else:
        setHeight = _libtraci.vehicletype_setHeight
    if _newclass:
        setMinGap = staticmethod(_libtraci.vehicletype_setMinGap)
    else:
        setMinGap = _libtraci.vehicletype_setMinGap
    if _newclass:
        setAccel = staticmethod(_libtraci.vehicletype_setAccel)
    else:
        setAccel = _libtraci.vehicletype_setAccel
    if _newclass:
        setDecel = staticmethod(_libtraci.vehicletype_setDecel)
    else:
        setDecel = _libtraci.vehicletype_setDecel
    if _newclass:
        setEmergencyDecel = staticmethod(_libtraci.vehicletype_setEmergencyDecel)
    else:
        setEmergencyDecel = _libtraci.vehicletype_setEmergencyDecel
    if _newclass:
        setApparentDecel = staticmethod(_libtraci.vehicletype_setApparentDecel)
    else:
        setApparentDecel = _libtraci.vehicletype_setApparentDecel
    if _newclass:
        setImperfection = staticmethod(_libtraci.vehicletype_setImperfection)
    else:
        setImperfection = _libtraci.vehicletype_setImperfection
    if _newclass:
        setTau = staticmethod(_libtraci.vehicletype_setTau)
    else:
        setTau = _libtraci.vehicletype_setTau
    if _newclass:
        setColor = staticmethod(_libtraci.vehicletype_setColor)
    else:
        setColor = _libtraci.vehicletype_setColor
    if _newclass:
        setMinGapLat = staticmethod(_libtraci.vehicletype_setMinGapLat)
    else:
        setMinGapLat = _libtraci.vehicletype_setMinGapLat
    if _newclass:
        setMaxSpeedLat = staticmethod(_libtraci.vehicletype_setMaxSpeedLat)
    else:
        setMaxSpeedLat = _libtraci.vehicletype_setMaxSpeedLat
    if _newclass:
        setLateralAlignment = staticmethod(_libtraci.vehicletype_setLateralAlignment)
    else:
        setLateralAlignment = _libtraci.vehicletype_setLateralAlignment
    if _newclass:
        setActionStepLength = staticmethod(_libtraci.vehicletype_setActionStepLength)
    else:
        setActionStepLength = _libtraci.vehicletype_setActionStepLength
    if _newclass:
        copy = staticmethod(_libtraci.vehicletype_copy)
    else:
        copy = _libtraci.vehicletype_copy
    if _newclass:
        setSpeedDeviation = staticmethod(_libtraci.vehicletype_setSpeedDeviation)
    else:
        setSpeedDeviation = _libtraci.vehicletype_setSpeedDeviation
    if _newclass:
        subscribe = staticmethod(_libtraci.vehicletype_subscribe)
    else:
        subscribe = _libtraci.vehicletype_subscribe
    if _newclass:
        unsubscribe = staticmethod(_libtraci.vehicletype_unsubscribe)
    else:
        unsubscribe = _libtraci.vehicletype_unsubscribe
    if _newclass:
        subscribeContext = staticmethod(_libtraci.vehicletype_subscribeContext)
    else:
        subscribeContext = _libtraci.vehicletype_subscribeContext
    if _newclass:
        unsubscribeContext = staticmethod(_libtraci.vehicletype_unsubscribeContext)
    else:
        unsubscribeContext = _libtraci.vehicletype_unsubscribeContext
    if _newclass:
        getAllSubscriptionResults = staticmethod(_libtraci.vehicletype_getAllSubscriptionResults)
    else:
        getAllSubscriptionResults = _libtraci.vehicletype_getAllSubscriptionResults
    if _newclass:
        getSubscriptionResults = staticmethod(_libtraci.vehicletype_getSubscriptionResults)
    else:
        getSubscriptionResults = _libtraci.vehicletype_getSubscriptionResults
    if _newclass:
        getAllContextSubscriptionResults = staticmethod(_libtraci.vehicletype_getAllContextSubscriptionResults)
    else:
        getAllContextSubscriptionResults = _libtraci.vehicletype_getAllContextSubscriptionResults
    if _newclass:
        getContextSubscriptionResults = staticmethod(_libtraci.vehicletype_getContextSubscriptionResults)
    else:
        getContextSubscriptionResults = _libtraci.vehicletype_getContextSubscriptionResults
    if _newclass:
        subscribeParameterWithKey = staticmethod(_libtraci.vehicletype_subscribeParameterWithKey)
    else:
        subscribeParameterWithKey = _libtraci.vehicletype_subscribeParameterWithKey
    __swig_destroy__ = _libtraci.delete_vehicletype
    __del__ = lambda self: None
vehicletype_swigregister = _libtraci.vehicletype_swigregister
vehicletype_swigregister(vehicletype)

def vehicletype_getLength(typeID):
    return _libtraci.vehicletype_getLength(typeID)
vehicletype_getLength = _libtraci.vehicletype_getLength

def vehicletype_getMaxSpeed(typeID):
    return _libtraci.vehicletype_getMaxSpeed(typeID)
vehicletype_getMaxSpeed = _libtraci.vehicletype_getMaxSpeed

def vehicletype_getActionStepLength(typeID):
    return _libtraci.vehicletype_getActionStepLength(typeID)
vehicletype_getActionStepLength = _libtraci.vehicletype_getActionStepLength

def vehicletype_getSpeedFactor(typeID):
    return _libtraci.vehicletype_getSpeedFactor(typeID)
vehicletype_getSpeedFactor = _libtraci.vehicletype_getSpeedFactor

def vehicletype_getSpeedDeviation(typeID):
    return _libtraci.vehicletype_getSpeedDeviation(typeID)
vehicletype_getSpeedDeviation = _libtraci.vehicletype_getSpeedDeviation

def vehicletype_getAccel(typeID):
    return _libtraci.vehicletype_getAccel(typeID)
vehicletype_getAccel = _libtraci.vehicletype_getAccel

def vehicletype_getDecel(typeID):
    return _libtraci.vehicletype_getDecel(typeID)
vehicletype_getDecel = _libtraci.vehicletype_getDecel

def vehicletype_getEmergencyDecel(typeID):
    return _libtraci.vehicletype_getEmergencyDecel(typeID)
vehicletype_getEmergencyDecel = _libtraci.vehicletype_getEmergencyDecel

def vehicletype_getApparentDecel(typeID):
    return _libtraci.vehicletype_getApparentDecel(typeID)
vehicletype_getApparentDecel = _libtraci.vehicletype_getApparentDecel

def vehicletype_getImperfection(typeID):
    return _libtraci.vehicletype_getImperfection(typeID)
vehicletype_getImperfection = _libtraci.vehicletype_getImperfection

def vehicletype_getTau(typeID):
    return _libtraci.vehicletype_getTau(typeID)
vehicletype_getTau = _libtraci.vehicletype_getTau

def vehicletype_getVehicleClass(typeID):
    return _libtraci.vehicletype_getVehicleClass(typeID)
vehicletype_getVehicleClass = _libtraci.vehicletype_getVehicleClass

def vehicletype_getEmissionClass(typeID):
    return _libtraci.vehicletype_getEmissionClass(typeID)
vehicletype_getEmissionClass = _libtraci.vehicletype_getEmissionClass

def vehicletype_getShapeClass(typeID):
    return _libtraci.vehicletype_getShapeClass(typeID)
vehicletype_getShapeClass = _libtraci.vehicletype_getShapeClass

def vehicletype_getMinGap(typeID):
    return _libtraci.vehicletype_getMinGap(typeID)
vehicletype_getMinGap = _libtraci.vehicletype_getMinGap

def vehicletype_getWidth(typeID):
    return _libtraci.vehicletype_getWidth(typeID)
vehicletype_getWidth = _libtraci.vehicletype_getWidth

def vehicletype_getHeight(typeID):
    return _libtraci.vehicletype_getHeight(typeID)
vehicletype_getHeight = _libtraci.vehicletype_getHeight

def vehicletype_getColor(typeID):
    return _libtraci.vehicletype_getColor(typeID)
vehicletype_getColor = _libtraci.vehicletype_getColor

def vehicletype_getMinGapLat(typeID):
    return _libtraci.vehicletype_getMinGapLat(typeID)
vehicletype_getMinGapLat = _libtraci.vehicletype_getMinGapLat

def vehicletype_getMaxSpeedLat(typeID):
    return _libtraci.vehicletype_getMaxSpeedLat(typeID)
vehicletype_getMaxSpeedLat = _libtraci.vehicletype_getMaxSpeedLat

def vehicletype_getLateralAlignment(typeID):
    return _libtraci.vehicletype_getLateralAlignment(typeID)
vehicletype_getLateralAlignment = _libtraci.vehicletype_getLateralAlignment

def vehicletype_getPersonCapacity(typeID):
    return _libtraci.vehicletype_getPersonCapacity(typeID)
vehicletype_getPersonCapacity = _libtraci.vehicletype_getPersonCapacity

def vehicletype_getIDList():
    return _libtraci.vehicletype_getIDList()
vehicletype_getIDList = _libtraci.vehicletype_getIDList

def vehicletype_getIDCount():
    return _libtraci.vehicletype_getIDCount()
vehicletype_getIDCount = _libtraci.vehicletype_getIDCount

def vehicletype_getParameter(objectID, param):
    return _libtraci.vehicletype_getParameter(objectID, param)
vehicletype_getParameter = _libtraci.vehicletype_getParameter

def vehicletype_getParameterWithKey(objectID, key):
    return _libtraci.vehicletype_getParameterWithKey(objectID, key)
vehicletype_getParameterWithKey = _libtraci.vehicletype_getParameterWithKey

def vehicletype_setParameter(objectID, param, value):
    return _libtraci.vehicletype_setParameter(objectID, param, value)
vehicletype_setParameter = _libtraci.vehicletype_setParameter

def vehicletype_setLength(typeID, length):
    return _libtraci.vehicletype_setLength(typeID, length)
vehicletype_setLength = _libtraci.vehicletype_setLength

def vehicletype_setMaxSpeed(typeID, speed):
    return _libtraci.vehicletype_setMaxSpeed(typeID, speed)
vehicletype_setMaxSpeed = _libtraci.vehicletype_setMaxSpeed

def vehicletype_setVehicleClass(typeID, clazz):
    return _libtraci.vehicletype_setVehicleClass(typeID, clazz)
vehicletype_setVehicleClass = _libtraci.vehicletype_setVehicleClass

def vehicletype_setSpeedFactor(typeID, factor):
    return _libtraci.vehicletype_setSpeedFactor(typeID, factor)
vehicletype_setSpeedFactor = _libtraci.vehicletype_setSpeedFactor

def vehicletype_setEmissionClass(typeID, clazz):
    return _libtraci.vehicletype_setEmissionClass(typeID, clazz)
vehicletype_setEmissionClass = _libtraci.vehicletype_setEmissionClass

def vehicletype_setShapeClass(typeID, shapeClass):
    return _libtraci.vehicletype_setShapeClass(typeID, shapeClass)
vehicletype_setShapeClass = _libtraci.vehicletype_setShapeClass

def vehicletype_setWidth(typeID, width):
    return _libtraci.vehicletype_setWidth(typeID, width)
vehicletype_setWidth = _libtraci.vehicletype_setWidth

def vehicletype_setHeight(typeID, height):
    return _libtraci.vehicletype_setHeight(typeID, height)
vehicletype_setHeight = _libtraci.vehicletype_setHeight

def vehicletype_setMinGap(typeID, minGap):
    return _libtraci.vehicletype_setMinGap(typeID, minGap)
vehicletype_setMinGap = _libtraci.vehicletype_setMinGap

def vehicletype_setAccel(typeID, accel):
    return _libtraci.vehicletype_setAccel(typeID, accel)
vehicletype_setAccel = _libtraci.vehicletype_setAccel

def vehicletype_setDecel(typeID, decel):
    return _libtraci.vehicletype_setDecel(typeID, decel)
vehicletype_setDecel = _libtraci.vehicletype_setDecel

def vehicletype_setEmergencyDecel(typeID, decel):
    return _libtraci.vehicletype_setEmergencyDecel(typeID, decel)
vehicletype_setEmergencyDecel = _libtraci.vehicletype_setEmergencyDecel

def vehicletype_setApparentDecel(typeID, decel):
    return _libtraci.vehicletype_setApparentDecel(typeID, decel)
vehicletype_setApparentDecel = _libtraci.vehicletype_setApparentDecel

def vehicletype_setImperfection(typeID, imperfection):
    return _libtraci.vehicletype_setImperfection(typeID, imperfection)
vehicletype_setImperfection = _libtraci.vehicletype_setImperfection

def vehicletype_setTau(typeID, tau):
    return _libtraci.vehicletype_setTau(typeID, tau)
vehicletype_setTau = _libtraci.vehicletype_setTau

def vehicletype_setColor(typeID, color):
    return _libtraci.vehicletype_setColor(typeID, color)
vehicletype_setColor = _libtraci.vehicletype_setColor

def vehicletype_setMinGapLat(typeID, minGapLat):
    return _libtraci.vehicletype_setMinGapLat(typeID, minGapLat)
vehicletype_setMinGapLat = _libtraci.vehicletype_setMinGapLat

def vehicletype_setMaxSpeedLat(typeID, speed):
    return _libtraci.vehicletype_setMaxSpeedLat(typeID, speed)
vehicletype_setMaxSpeedLat = _libtraci.vehicletype_setMaxSpeedLat

def vehicletype_setLateralAlignment(typeID, latAlignment):
    return _libtraci.vehicletype_setLateralAlignment(typeID, latAlignment)
vehicletype_setLateralAlignment = _libtraci.vehicletype_setLateralAlignment

def vehicletype_setActionStepLength(typeID, actionStepLength, resetActionOffset=True):
    return _libtraci.vehicletype_setActionStepLength(typeID, actionStepLength, resetActionOffset)
vehicletype_setActionStepLength = _libtraci.vehicletype_setActionStepLength

def vehicletype_copy(origTypeID, newTypeID):
    return _libtraci.vehicletype_copy(origTypeID, newTypeID)
vehicletype_copy = _libtraci.vehicletype_copy

def vehicletype_setSpeedDeviation(typeID, deviation):
    return _libtraci.vehicletype_setSpeedDeviation(typeID, deviation)
vehicletype_setSpeedDeviation = _libtraci.vehicletype_setSpeedDeviation

def vehicletype_subscribe(*args, **kwargs):
    return _libtraci.vehicletype_subscribe(*args, **kwargs)
vehicletype_subscribe = _libtraci.vehicletype_subscribe

def vehicletype_unsubscribe(objectID):
    return _libtraci.vehicletype_unsubscribe(objectID)
vehicletype_unsubscribe = _libtraci.vehicletype_unsubscribe

def vehicletype_subscribeContext(*args, **kwargs):
    return _libtraci.vehicletype_subscribeContext(*args, **kwargs)
vehicletype_subscribeContext = _libtraci.vehicletype_subscribeContext

def vehicletype_unsubscribeContext(objectID, domain, dist):
    return _libtraci.vehicletype_unsubscribeContext(objectID, domain, dist)
vehicletype_unsubscribeContext = _libtraci.vehicletype_unsubscribeContext

def vehicletype_getAllSubscriptionResults():
    return _libtraci.vehicletype_getAllSubscriptionResults()
vehicletype_getAllSubscriptionResults = _libtraci.vehicletype_getAllSubscriptionResults

def vehicletype_getSubscriptionResults(objectID):
    return _libtraci.vehicletype_getSubscriptionResults(objectID)
vehicletype_getSubscriptionResults = _libtraci.vehicletype_getSubscriptionResults

def vehicletype_getAllContextSubscriptionResults():
    return _libtraci.vehicletype_getAllContextSubscriptionResults()
vehicletype_getAllContextSubscriptionResults = _libtraci.vehicletype_getAllContextSubscriptionResults

def vehicletype_getContextSubscriptionResults(objectID):
    return _libtraci.vehicletype_getContextSubscriptionResults(objectID)
vehicletype_getContextSubscriptionResults = _libtraci.vehicletype_getContextSubscriptionResults

def vehicletype_subscribeParameterWithKey(*args, **kwargs):
    return _libtraci.vehicletype_subscribeParameterWithKey(*args, **kwargs)
vehicletype_subscribeParameterWithKey = _libtraci.vehicletype_subscribeParameterWithKey

class vehicle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vehicle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vehicle, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        getSpeed = staticmethod(_libtraci.vehicle_getSpeed)
    else:
        getSpeed = _libtraci.vehicle_getSpeed
    if _newclass:
        getLateralSpeed = staticmethod(_libtraci.vehicle_getLateralSpeed)
    else:
        getLateralSpeed = _libtraci.vehicle_getLateralSpeed
    if _newclass:
        getAcceleration = staticmethod(_libtraci.vehicle_getAcceleration)
    else:
        getAcceleration = _libtraci.vehicle_getAcceleration
    if _newclass:
        getSpeedWithoutTraCI = staticmethod(_libtraci.vehicle_getSpeedWithoutTraCI)
    else:
        getSpeedWithoutTraCI = _libtraci.vehicle_getSpeedWithoutTraCI
    if _newclass:
        getPosition = staticmethod(_libtraci.vehicle_getPosition)
    else:
        getPosition = _libtraci.vehicle_getPosition
    if _newclass:
        getPosition3D = staticmethod(_libtraci.vehicle_getPosition3D)
    else:
        getPosition3D = _libtraci.vehicle_getPosition3D
    if _newclass:
        getAngle = staticmethod(_libtraci.vehicle_getAngle)
    else:
        getAngle = _libtraci.vehicle_getAngle
    if _newclass:
        getSlope = staticmethod(_libtraci.vehicle_getSlope)
    else:
        getSlope = _libtraci.vehicle_getSlope
    if _newclass:
        getRoadID = staticmethod(_libtraci.vehicle_getRoadID)
    else:
        getRoadID = _libtraci.vehicle_getRoadID
    if _newclass:
        getLaneID = staticmethod(_libtraci.vehicle_getLaneID)
    else:
        getLaneID = _libtraci.vehicle_getLaneID
    if _newclass:
        getLaneIndex = staticmethod(_libtraci.vehicle_getLaneIndex)
    else:
        getLaneIndex = _libtraci.vehicle_getLaneIndex
    if _newclass:
        getTypeID = staticmethod(_libtraci.vehicle_getTypeID)
    else:
        getTypeID = _libtraci.vehicle_getTypeID
    if _newclass:
        getRouteID = staticmethod(_libtraci.vehicle_getRouteID)
    else:
        getRouteID = _libtraci.vehicle_getRouteID
    if _newclass:
        getRouteIndex = staticmethod(_libtraci.vehicle_getRouteIndex)
    else:
        getRouteIndex = _libtraci.vehicle_getRouteIndex
    if _newclass:
        getLanePosition = staticmethod(_libtraci.vehicle_getLanePosition)
    else:
        getLanePosition = _libtraci.vehicle_getLanePosition
    if _newclass:
        getLateralLanePosition = staticmethod(_libtraci.vehicle_getLateralLanePosition)
    else:
        getLateralLanePosition = _libtraci.vehicle_getLateralLanePosition
    if _newclass:
        getCO2Emission = staticmethod(_libtraci.vehicle_getCO2Emission)
    else:
        getCO2Emission = _libtraci.vehicle_getCO2Emission
    if _newclass:
        getCOEmission = staticmethod(_libtraci.vehicle_getCOEmission)
    else:
        getCOEmission = _libtraci.vehicle_getCOEmission
    if _newclass:
        getHCEmission = staticmethod(_libtraci.vehicle_getHCEmission)
    else:
        getHCEmission = _libtraci.vehicle_getHCEmission
    if _newclass:
        getPMxEmission = staticmethod(_libtraci.vehicle_getPMxEmission)
    else:
        getPMxEmission = _libtraci.vehicle_getPMxEmission
    if _newclass:
        getNOxEmission = staticmethod(_libtraci.vehicle_getNOxEmission)
    else:
        getNOxEmission = _libtraci.vehicle_getNOxEmission
    if _newclass:
        getFuelConsumption = staticmethod(_libtraci.vehicle_getFuelConsumption)
    else:
        getFuelConsumption = _libtraci.vehicle_getFuelConsumption
    if _newclass:
        getNoiseEmission = staticmethod(_libtraci.vehicle_getNoiseEmission)
    else:
        getNoiseEmission = _libtraci.vehicle_getNoiseEmission
    if _newclass:
        getElectricityConsumption = staticmethod(_libtraci.vehicle_getElectricityConsumption)
    else:
        getElectricityConsumption = _libtraci.vehicle_getElectricityConsumption
    if _newclass:
        getPersonNumber = staticmethod(_libtraci.vehicle_getPersonNumber)
    else:
        getPersonNumber = _libtraci.vehicle_getPersonNumber
    if _newclass:
        getPersonIDList = staticmethod(_libtraci.vehicle_getPersonIDList)
    else:
        getPersonIDList = _libtraci.vehicle_getPersonIDList
    if _newclass:
        getLeader = staticmethod(_libtraci.vehicle_getLeader)
    else:
        getLeader = _libtraci.vehicle_getLeader
    if _newclass:
        getFollower = staticmethod(_libtraci.vehicle_getFollower)
    else:
        getFollower = _libtraci.vehicle_getFollower
    if _newclass:
        getWaitingTime = staticmethod(_libtraci.vehicle_getWaitingTime)
    else:
        getWaitingTime = _libtraci.vehicle_getWaitingTime
    if _newclass:
        getAccumulatedWaitingTime = staticmethod(_libtraci.vehicle_getAccumulatedWaitingTime)
    else:
        getAccumulatedWaitingTime = _libtraci.vehicle_getAccumulatedWaitingTime
    if _newclass:
        getAdaptedTraveltime = staticmethod(_libtraci.vehicle_getAdaptedTraveltime)
    else:
        getAdaptedTraveltime = _libtraci.vehicle_getAdaptedTraveltime
    if _newclass:
        getEffort = staticmethod(_libtraci.vehicle_getEffort)
    else:
        getEffort = _libtraci.vehicle_getEffort
    if _newclass:
        isRouteValid = staticmethod(_libtraci.vehicle_isRouteValid)
    else:
        isRouteValid = _libtraci.vehicle_isRouteValid
    if _newclass:
        getRoute = staticmethod(_libtraci.vehicle_getRoute)
    else:
        getRoute = _libtraci.vehicle_getRoute
    if _newclass:
        getSignals = staticmethod(_libtraci.vehicle_getSignals)
    else:
        getSignals = _libtraci.vehicle_getSignals
    if _newclass:
        getBestLanes = staticmethod(_libtraci.vehicle_getBestLanes)
    else:
        getBestLanes = _libtraci.vehicle_getBestLanes
    if _newclass:
        getNextTLS = staticmethod(_libtraci.vehicle_getNextTLS)
    else:
        getNextTLS = _libtraci.vehicle_getNextTLS
    if _newclass:
        getNextStops = staticmethod(_libtraci.vehicle_getNextStops)
    else:
        getNextStops = _libtraci.vehicle_getNextStops
    if _newclass:
        getStops = staticmethod(_libtraci.vehicle_getStops)
    else:
        getStops = _libtraci.vehicle_getStops
    if _newclass:
        getStopState = staticmethod(_libtraci.vehicle_getStopState)
    else:
        getStopState = _libtraci.vehicle_getStopState
    if _newclass:
        getDistance = staticmethod(_libtraci.vehicle_getDistance)
    else:
        getDistance = _libtraci.vehicle_getDistance
    if _newclass:
        getDrivingDistance = staticmethod(_libtraci.vehicle_getDrivingDistance)
    else:
        getDrivingDistance = _libtraci.vehicle_getDrivingDistance
    if _newclass:
        getDrivingDistance2D = staticmethod(_libtraci.vehicle_getDrivingDistance2D)
    else:
        getDrivingDistance2D = _libtraci.vehicle_getDrivingDistance2D
    if _newclass:
        getAllowedSpeed = staticmethod(_libtraci.vehicle_getAllowedSpeed)
    else:
        getAllowedSpeed = _libtraci.vehicle_getAllowedSpeed
    if _newclass:
        getSpeedMode = staticmethod(_libtraci.vehicle_getSpeedMode)
    else:
        getSpeedMode = _libtraci.vehicle_getSpeedMode
    if _newclass:
        getLaneChangeMode = staticmethod(_libtraci.vehicle_getLaneChangeMode)
    else:
        getLaneChangeMode = _libtraci.vehicle_getLaneChangeMode
    if _newclass:
        getRoutingMode = staticmethod(_libtraci.vehicle_getRoutingMode)
    else:
        getRoutingMode = _libtraci.vehicle_getRoutingMode
    if _newclass:
        getLine = staticmethod(_libtraci.vehicle_getLine)
    else:
        getLine = _libtraci.vehicle_getLine
    if _newclass:
        getVia = staticmethod(_libtraci.vehicle_getVia)
    else:
        getVia = _libtraci.vehicle_getVia
    if _newclass:
        getLaneChangeState = staticmethod(_libtraci.vehicle_getLaneChangeState)
    else:
        getLaneChangeState = _libtraci.vehicle_getLaneChangeState
    if _newclass:
        getLastActionTime = staticmethod(_libtraci.vehicle_getLastActionTime)
    else:
        getLastActionTime = _libtraci.vehicle_getLastActionTime
    if _newclass:
        getNeighbors = staticmethod(_libtraci.vehicle_getNeighbors)
    else:
        getNeighbors = _libtraci.vehicle_getNeighbors
    if _newclass:
        getFollowSpeed = staticmethod(_libtraci.vehicle_getFollowSpeed)
    else:
        getFollowSpeed = _libtraci.vehicle_getFollowSpeed
    if _newclass:
        getSecureGap = staticmethod(_libtraci.vehicle_getSecureGap)
    else:
        getSecureGap = _libtraci.vehicle_getSecureGap
    if _newclass:
        getStopSpeed = staticmethod(_libtraci.vehicle_getStopSpeed)
    else:
        getStopSpeed = _libtraci.vehicle_getStopSpeed
    if _newclass:
        getStopDelay = staticmethod(_libtraci.vehicle_getStopDelay)
    else:
        getStopDelay = _libtraci.vehicle_getStopDelay
    if _newclass:
        getStopArrivalDelay = staticmethod(_libtraci.vehicle_getStopArrivalDelay)
    else:
        getStopArrivalDelay = _libtraci.vehicle_getStopArrivalDelay
    if _newclass:
        getTaxiFleet = staticmethod(_libtraci.vehicle_getTaxiFleet)
    else:
        getTaxiFleet = _libtraci.vehicle_getTaxiFleet
    if _newclass:
        getIDList = staticmethod(_libtraci.vehicle_getIDList)
    else:
        getIDList = _libtraci.vehicle_getIDList
    if _newclass:
        getIDCount = staticmethod(_libtraci.vehicle_getIDCount)
    else:
        getIDCount = _libtraci.vehicle_getIDCount
    if _newclass:
        getParameter = staticmethod(_libtraci.vehicle_getParameter)
    else:
        getParameter = _libtraci.vehicle_getParameter
    if _newclass:
        getParameterWithKey = staticmethod(_libtraci.vehicle_getParameterWithKey)
    else:
        getParameterWithKey = _libtraci.vehicle_getParameterWithKey
    if _newclass:
        setParameter = staticmethod(_libtraci.vehicle_setParameter)
    else:
        setParameter = _libtraci.vehicle_setParameter
    if _newclass:
        getLength = staticmethod(_libtraci.vehicle_getLength)
    else:
        getLength = _libtraci.vehicle_getLength
    if _newclass:
        getMaxSpeed = staticmethod(_libtraci.vehicle_getMaxSpeed)
    else:
        getMaxSpeed = _libtraci.vehicle_getMaxSpeed
    if _newclass:
        getActionStepLength = staticmethod(_libtraci.vehicle_getActionStepLength)
    else:
        getActionStepLength = _libtraci.vehicle_getActionStepLength
    if _newclass:
        getSpeedFactor = staticmethod(_libtraci.vehicle_getSpeedFactor)
    else:
        getSpeedFactor = _libtraci.vehicle_getSpeedFactor
    if _newclass:
        getSpeedDeviation = staticmethod(_libtraci.vehicle_getSpeedDeviation)
    else:
        getSpeedDeviation = _libtraci.vehicle_getSpeedDeviation
    if _newclass:
        getAccel = staticmethod(_libtraci.vehicle_getAccel)
    else:
        getAccel = _libtraci.vehicle_getAccel
    if _newclass:
        getDecel = staticmethod(_libtraci.vehicle_getDecel)
    else:
        getDecel = _libtraci.vehicle_getDecel
    if _newclass:
        getEmergencyDecel = staticmethod(_libtraci.vehicle_getEmergencyDecel)
    else:
        getEmergencyDecel = _libtraci.vehicle_getEmergencyDecel
    if _newclass:
        getApparentDecel = staticmethod(_libtraci.vehicle_getApparentDecel)
    else:
        getApparentDecel = _libtraci.vehicle_getApparentDecel
    if _newclass:
        getImperfection = staticmethod(_libtraci.vehicle_getImperfection)
    else:
        getImperfection = _libtraci.vehicle_getImperfection
    if _newclass:
        getTau = staticmethod(_libtraci.vehicle_getTau)
    else:
        getTau = _libtraci.vehicle_getTau
    if _newclass:
        getVehicleClass = staticmethod(_libtraci.vehicle_getVehicleClass)
    else:
        getVehicleClass = _libtraci.vehicle_getVehicleClass
    if _newclass:
        getEmissionClass = staticmethod(_libtraci.vehicle_getEmissionClass)
    else:
        getEmissionClass = _libtraci.vehicle_getEmissionClass
    if _newclass:
        getShapeClass = staticmethod(_libtraci.vehicle_getShapeClass)
    else:
        getShapeClass = _libtraci.vehicle_getShapeClass
    if _newclass:
        getMinGap = staticmethod(_libtraci.vehicle_getMinGap)
    else:
        getMinGap = _libtraci.vehicle_getMinGap
    if _newclass:
        getWidth = staticmethod(_libtraci.vehicle_getWidth)
    else:
        getWidth = _libtraci.vehicle_getWidth
    if _newclass:
        getHeight = staticmethod(_libtraci.vehicle_getHeight)
    else:
        getHeight = _libtraci.vehicle_getHeight
    if _newclass:
        getColor = staticmethod(_libtraci.vehicle_getColor)
    else:
        getColor = _libtraci.vehicle_getColor
    if _newclass:
        getMinGapLat = staticmethod(_libtraci.vehicle_getMinGapLat)
    else:
        getMinGapLat = _libtraci.vehicle_getMinGapLat
    if _newclass:
        getMaxSpeedLat = staticmethod(_libtraci.vehicle_getMaxSpeedLat)
    else:
        getMaxSpeedLat = _libtraci.vehicle_getMaxSpeedLat
    if _newclass:
        getLateralAlignment = staticmethod(_libtraci.vehicle_getLateralAlignment)
    else:
        getLateralAlignment = _libtraci.vehicle_getLateralAlignment
    if _newclass:
        getPersonCapacity = staticmethod(_libtraci.vehicle_getPersonCapacity)
    else:
        getPersonCapacity = _libtraci.vehicle_getPersonCapacity
    if _newclass:
        setStop = staticmethod(_libtraci.vehicle_setStop)
    else:
        setStop = _libtraci.vehicle_setStop
    if _newclass:
        replaceStop = staticmethod(_libtraci.vehicle_replaceStop)
    else:
        replaceStop = _libtraci.vehicle_replaceStop
    if _newclass:
        rerouteParkingArea = staticmethod(_libtraci.vehicle_rerouteParkingArea)
    else:
        rerouteParkingArea = _libtraci.vehicle_rerouteParkingArea
    if _newclass:
        resume = staticmethod(_libtraci.vehicle_resume)
    else:
        resume = _libtraci.vehicle_resume
    if _newclass:
        add = staticmethod(_libtraci.vehicle_add)
    else:
        add = _libtraci.vehicle_add
    if _newclass:
        changeTarget = staticmethod(_libtraci.vehicle_changeTarget)
    else:
        changeTarget = _libtraci.vehicle_changeTarget
    if _newclass:
        changeLane = staticmethod(_libtraci.vehicle_changeLane)
    else:
        changeLane = _libtraci.vehicle_changeLane
    if _newclass:
        changeLaneRelative = staticmethod(_libtraci.vehicle_changeLaneRelative)
    else:
        changeLaneRelative = _libtraci.vehicle_changeLaneRelative
    if _newclass:
        changeSublane = staticmethod(_libtraci.vehicle_changeSublane)
    else:
        changeSublane = _libtraci.vehicle_changeSublane
    if _newclass:
        slowDown = staticmethod(_libtraci.vehicle_slowDown)
    else:
        slowDown = _libtraci.vehicle_slowDown
    if _newclass:
        openGap = staticmethod(_libtraci.vehicle_openGap)
    else:
        openGap = _libtraci.vehicle_openGap
    if _newclass:
        deactivateGapControl = staticmethod(_libtraci.vehicle_deactivateGapControl)
    else:
        deactivateGapControl = _libtraci.vehicle_deactivateGapControl
    if _newclass:
        requestToC = staticmethod(_libtraci.vehicle_requestToC)
    else:
        requestToC = _libtraci.vehicle_requestToC
    if _newclass:
        setSpeed = staticmethod(_libtraci.vehicle_setSpeed)
    else:
        setSpeed = _libtraci.vehicle_setSpeed
    if _newclass:
        setPreviousSpeed = staticmethod(_libtraci.vehicle_setPreviousSpeed)
    else:
        setPreviousSpeed = _libtraci.vehicle_setPreviousSpeed
    if _newclass:
        setSpeedMode = staticmethod(_libtraci.vehicle_setSpeedMode)
    else:
        setSpeedMode = _libtraci.vehicle_setSpeedMode
    if _newclass:
        setLaneChangeMode = staticmethod(_libtraci.vehicle_setLaneChangeMode)
    else:
        setLaneChangeMode = _libtraci.vehicle_setLaneChangeMode
    if _newclass:
        setRoutingMode = staticmethod(_libtraci.vehicle_setRoutingMode)
    else:
        setRoutingMode = _libtraci.vehicle_setRoutingMode
    if _newclass:
        setType = staticmethod(_libtraci.vehicle_setType)
    else:
        setType = _libtraci.vehicle_setType
    if _newclass:
        setRouteID = staticmethod(_libtraci.vehicle_setRouteID)
    else:
        setRouteID = _libtraci.vehicle_setRouteID
    if _newclass:
        setRoute = staticmethod(_libtraci.vehicle_setRoute)
    else:
        setRoute = _libtraci.vehicle_setRoute
    if _newclass:
        updateBestLanes = staticmethod(_libtraci.vehicle_updateBestLanes)
    else:
        updateBestLanes = _libtraci.vehicle_updateBestLanes
    if _newclass:
        setAdaptedTraveltime = staticmethod(_libtraci.vehicle_setAdaptedTraveltime)
    else:
        setAdaptedTraveltime = _libtraci.vehicle_setAdaptedTraveltime
    if _newclass:
        setEffort = staticmethod(_libtraci.vehicle_setEffort)
    else:
        setEffort = _libtraci.vehicle_setEffort
    if _newclass:
        rerouteTraveltime = staticmethod(_libtraci.vehicle_rerouteTraveltime)
    else:
        rerouteTraveltime = _libtraci.vehicle_rerouteTraveltime
    if _newclass:
        rerouteEffort = staticmethod(_libtraci.vehicle_rerouteEffort)
    else:
        rerouteEffort = _libtraci.vehicle_rerouteEffort
    if _newclass:
        setSignals = staticmethod(_libtraci.vehicle_setSignals)
    else:
        setSignals = _libtraci.vehicle_setSignals
    if _newclass:
        moveTo = staticmethod(_libtraci.vehicle_moveTo)
    else:
        moveTo = _libtraci.vehicle_moveTo
    if _newclass:
        moveToXY = staticmethod(_libtraci.vehicle_moveToXY)
    else:
        moveToXY = _libtraci.vehicle_moveToXY
    if _newclass:
        remove = staticmethod(_libtraci.vehicle_remove)
    else:
        remove = _libtraci.vehicle_remove
    if _newclass:
        setLine = staticmethod(_libtraci.vehicle_setLine)
    else:
        setLine = _libtraci.vehicle_setLine
    if _newclass:
        setVia = staticmethod(_libtraci.vehicle_setVia)
    else:
        setVia = _libtraci.vehicle_setVia
    if _newclass:
        highlight = staticmethod(_libtraci.vehicle_highlight)
    else:
        highlight = _libtraci.vehicle_highlight
    if _newclass:
        dispatchTaxi = staticmethod(_libtraci.vehicle_dispatchTaxi)
    else:
        dispatchTaxi = _libtraci.vehicle_dispatchTaxi
    if _newclass:
        setLength = staticmethod(_libtraci.vehicle_setLength)
    else:
        setLength = _libtraci.vehicle_setLength
    if _newclass:
        setMaxSpeed = staticmethod(_libtraci.vehicle_setMaxSpeed)
    else:
        setMaxSpeed = _libtraci.vehicle_setMaxSpeed
    if _newclass:
        setVehicleClass = staticmethod(_libtraci.vehicle_setVehicleClass)
    else:
        setVehicleClass = _libtraci.vehicle_setVehicleClass
    if _newclass:
        setSpeedFactor = staticmethod(_libtraci.vehicle_setSpeedFactor)
    else:
        setSpeedFactor = _libtraci.vehicle_setSpeedFactor
    if _newclass:
        setEmissionClass = staticmethod(_libtraci.vehicle_setEmissionClass)
    else:
        setEmissionClass = _libtraci.vehicle_setEmissionClass
    if _newclass:
        setShapeClass = staticmethod(_libtraci.vehicle_setShapeClass)
    else:
        setShapeClass = _libtraci.vehicle_setShapeClass
    if _newclass:
        setWidth = staticmethod(_libtraci.vehicle_setWidth)
    else:
        setWidth = _libtraci.vehicle_setWidth
    if _newclass:
        setHeight = staticmethod(_libtraci.vehicle_setHeight)
    else:
        setHeight = _libtraci.vehicle_setHeight
    if _newclass:
        setMinGap = staticmethod(_libtraci.vehicle_setMinGap)
    else:
        setMinGap = _libtraci.vehicle_setMinGap
    if _newclass:
        setAccel = staticmethod(_libtraci.vehicle_setAccel)
    else:
        setAccel = _libtraci.vehicle_setAccel
    if _newclass:
        setDecel = staticmethod(_libtraci.vehicle_setDecel)
    else:
        setDecel = _libtraci.vehicle_setDecel
    if _newclass:
        setEmergencyDecel = staticmethod(_libtraci.vehicle_setEmergencyDecel)
    else:
        setEmergencyDecel = _libtraci.vehicle_setEmergencyDecel
    if _newclass:
        setApparentDecel = staticmethod(_libtraci.vehicle_setApparentDecel)
    else:
        setApparentDecel = _libtraci.vehicle_setApparentDecel
    if _newclass:
        setImperfection = staticmethod(_libtraci.vehicle_setImperfection)
    else:
        setImperfection = _libtraci.vehicle_setImperfection
    if _newclass:
        setTau = staticmethod(_libtraci.vehicle_setTau)
    else:
        setTau = _libtraci.vehicle_setTau
    if _newclass:
        setColor = staticmethod(_libtraci.vehicle_setColor)
    else:
        setColor = _libtraci.vehicle_setColor
    if _newclass:
        setMinGapLat = staticmethod(_libtraci.vehicle_setMinGapLat)
    else:
        setMinGapLat = _libtraci.vehicle_setMinGapLat
    if _newclass:
        setMaxSpeedLat = staticmethod(_libtraci.vehicle_setMaxSpeedLat)
    else:
        setMaxSpeedLat = _libtraci.vehicle_setMaxSpeedLat
    if _newclass:
        setLateralAlignment = staticmethod(_libtraci.vehicle_setLateralAlignment)
    else:
        setLateralAlignment = _libtraci.vehicle_setLateralAlignment
    if _newclass:
        setActionStepLength = staticmethod(_libtraci.vehicle_setActionStepLength)
    else:
        setActionStepLength = _libtraci.vehicle_setActionStepLength
    if _newclass:
        subscribe = staticmethod(_libtraci.vehicle_subscribe)
    else:
        subscribe = _libtraci.vehicle_subscribe
    if _newclass:
        unsubscribe = staticmethod(_libtraci.vehicle_unsubscribe)
    else:
        unsubscribe = _libtraci.vehicle_unsubscribe
    if _newclass:
        subscribeContext = staticmethod(_libtraci.vehicle_subscribeContext)
    else:
        subscribeContext = _libtraci.vehicle_subscribeContext
    if _newclass:
        unsubscribeContext = staticmethod(_libtraci.vehicle_unsubscribeContext)
    else:
        unsubscribeContext = _libtraci.vehicle_unsubscribeContext
    if _newclass:
        getAllSubscriptionResults = staticmethod(_libtraci.vehicle_getAllSubscriptionResults)
    else:
        getAllSubscriptionResults = _libtraci.vehicle_getAllSubscriptionResults
    if _newclass:
        getSubscriptionResults = staticmethod(_libtraci.vehicle_getSubscriptionResults)
    else:
        getSubscriptionResults = _libtraci.vehicle_getSubscriptionResults
    if _newclass:
        getAllContextSubscriptionResults = staticmethod(_libtraci.vehicle_getAllContextSubscriptionResults)
    else:
        getAllContextSubscriptionResults = _libtraci.vehicle_getAllContextSubscriptionResults
    if _newclass:
        getContextSubscriptionResults = staticmethod(_libtraci.vehicle_getContextSubscriptionResults)
    else:
        getContextSubscriptionResults = _libtraci.vehicle_getContextSubscriptionResults
    if _newclass:
        subscribeParameterWithKey = staticmethod(_libtraci.vehicle_subscribeParameterWithKey)
    else:
        subscribeParameterWithKey = _libtraci.vehicle_subscribeParameterWithKey
    if _newclass:
        subscribeLeader = staticmethod(_libtraci.vehicle_subscribeLeader)
    else:
        subscribeLeader = _libtraci.vehicle_subscribeLeader
    if _newclass:
        addSubscriptionFilterLanes = staticmethod(_libtraci.vehicle_addSubscriptionFilterLanes)
    else:
        addSubscriptionFilterLanes = _libtraci.vehicle_addSubscriptionFilterLanes
    if _newclass:
        addSubscriptionFilterNoOpposite = staticmethod(_libtraci.vehicle_addSubscriptionFilterNoOpposite)
    else:
        addSubscriptionFilterNoOpposite = _libtraci.vehicle_addSubscriptionFilterNoOpposite
    if _newclass:
        addSubscriptionFilterDownstreamDistance = staticmethod(_libtraci.vehicle_addSubscriptionFilterDownstreamDistance)
    else:
        addSubscriptionFilterDownstreamDistance = _libtraci.vehicle_addSubscriptionFilterDownstreamDistance
    if _newclass:
        addSubscriptionFilterUpstreamDistance = staticmethod(_libtraci.vehicle_addSubscriptionFilterUpstreamDistance)
    else:
        addSubscriptionFilterUpstreamDistance = _libtraci.vehicle_addSubscriptionFilterUpstreamDistance
    if _newclass:
        addSubscriptionFilterCFManeuver = staticmethod(_libtraci.vehicle_addSubscriptionFilterCFManeuver)
    else:
        addSubscriptionFilterCFManeuver = _libtraci.vehicle_addSubscriptionFilterCFManeuver
    if _newclass:
        addSubscriptionFilterLCManeuver = staticmethod(_libtraci.vehicle_addSubscriptionFilterLCManeuver)
    else:
        addSubscriptionFilterLCManeuver = _libtraci.vehicle_addSubscriptionFilterLCManeuver
    if _newclass:
        addSubscriptionFilterLeadFollow = staticmethod(_libtraci.vehicle_addSubscriptionFilterLeadFollow)
    else:
        addSubscriptionFilterLeadFollow = _libtraci.vehicle_addSubscriptionFilterLeadFollow
    if _newclass:
        addSubscriptionFilterTurn = staticmethod(_libtraci.vehicle_addSubscriptionFilterTurn)
    else:
        addSubscriptionFilterTurn = _libtraci.vehicle_addSubscriptionFilterTurn
    if _newclass:
        addSubscriptionFilterVClass = staticmethod(_libtraci.vehicle_addSubscriptionFilterVClass)
    else:
        addSubscriptionFilterVClass = _libtraci.vehicle_addSubscriptionFilterVClass
    if _newclass:
        addSubscriptionFilterVType = staticmethod(_libtraci.vehicle_addSubscriptionFilterVType)
    else:
        addSubscriptionFilterVType = _libtraci.vehicle_addSubscriptionFilterVType
    if _newclass:
        addSubscriptionFilterFieldOfVision = staticmethod(_libtraci.vehicle_addSubscriptionFilterFieldOfVision)
    else:
        addSubscriptionFilterFieldOfVision = _libtraci.vehicle_addSubscriptionFilterFieldOfVision
    if _newclass:
        addSubscriptionFilterLateralDistance = staticmethod(_libtraci.vehicle_addSubscriptionFilterLateralDistance)
    else:
        addSubscriptionFilterLateralDistance = _libtraci.vehicle_addSubscriptionFilterLateralDistance
    __swig_destroy__ = _libtraci.delete_vehicle
    __del__ = lambda self: None
vehicle_swigregister = _libtraci.vehicle_swigregister
vehicle_swigregister(vehicle)

def vehicle_getSpeed(vehID):
    return _libtraci.vehicle_getSpeed(vehID)
vehicle_getSpeed = _libtraci.vehicle_getSpeed

def vehicle_getLateralSpeed(vehID):
    return _libtraci.vehicle_getLateralSpeed(vehID)
vehicle_getLateralSpeed = _libtraci.vehicle_getLateralSpeed

def vehicle_getAcceleration(vehID):
    return _libtraci.vehicle_getAcceleration(vehID)
vehicle_getAcceleration = _libtraci.vehicle_getAcceleration

def vehicle_getSpeedWithoutTraCI(vehID):
    return _libtraci.vehicle_getSpeedWithoutTraCI(vehID)
vehicle_getSpeedWithoutTraCI = _libtraci.vehicle_getSpeedWithoutTraCI

def vehicle_getPosition(vehID, includeZ=False):
    return _libtraci.vehicle_getPosition(vehID, includeZ)
vehicle_getPosition = _libtraci.vehicle_getPosition

def vehicle_getPosition3D(vehID):
    return _libtraci.vehicle_getPosition3D(vehID)
vehicle_getPosition3D = _libtraci.vehicle_getPosition3D

def vehicle_getAngle(vehID):
    return _libtraci.vehicle_getAngle(vehID)
vehicle_getAngle = _libtraci.vehicle_getAngle

def vehicle_getSlope(vehID):
    return _libtraci.vehicle_getSlope(vehID)
vehicle_getSlope = _libtraci.vehicle_getSlope

def vehicle_getRoadID(vehID):
    return _libtraci.vehicle_getRoadID(vehID)
vehicle_getRoadID = _libtraci.vehicle_getRoadID

def vehicle_getLaneID(vehID):
    return _libtraci.vehicle_getLaneID(vehID)
vehicle_getLaneID = _libtraci.vehicle_getLaneID

def vehicle_getLaneIndex(vehID):
    return _libtraci.vehicle_getLaneIndex(vehID)
vehicle_getLaneIndex = _libtraci.vehicle_getLaneIndex

def vehicle_getTypeID(vehID):
    return _libtraci.vehicle_getTypeID(vehID)
vehicle_getTypeID = _libtraci.vehicle_getTypeID

def vehicle_getRouteID(vehID):
    return _libtraci.vehicle_getRouteID(vehID)
vehicle_getRouteID = _libtraci.vehicle_getRouteID

def vehicle_getRouteIndex(vehID):
    return _libtraci.vehicle_getRouteIndex(vehID)
vehicle_getRouteIndex = _libtraci.vehicle_getRouteIndex

def vehicle_getLanePosition(vehID):
    return _libtraci.vehicle_getLanePosition(vehID)
vehicle_getLanePosition = _libtraci.vehicle_getLanePosition

def vehicle_getLateralLanePosition(vehID):
    return _libtraci.vehicle_getLateralLanePosition(vehID)
vehicle_getLateralLanePosition = _libtraci.vehicle_getLateralLanePosition

def vehicle_getCO2Emission(vehID):
    return _libtraci.vehicle_getCO2Emission(vehID)
vehicle_getCO2Emission = _libtraci.vehicle_getCO2Emission

def vehicle_getCOEmission(vehID):
    return _libtraci.vehicle_getCOEmission(vehID)
vehicle_getCOEmission = _libtraci.vehicle_getCOEmission

def vehicle_getHCEmission(vehID):
    return _libtraci.vehicle_getHCEmission(vehID)
vehicle_getHCEmission = _libtraci.vehicle_getHCEmission

def vehicle_getPMxEmission(vehID):
    return _libtraci.vehicle_getPMxEmission(vehID)
vehicle_getPMxEmission = _libtraci.vehicle_getPMxEmission

def vehicle_getNOxEmission(vehID):
    return _libtraci.vehicle_getNOxEmission(vehID)
vehicle_getNOxEmission = _libtraci.vehicle_getNOxEmission

def vehicle_getFuelConsumption(vehID):
    return _libtraci.vehicle_getFuelConsumption(vehID)
vehicle_getFuelConsumption = _libtraci.vehicle_getFuelConsumption

def vehicle_getNoiseEmission(vehID):
    return _libtraci.vehicle_getNoiseEmission(vehID)
vehicle_getNoiseEmission = _libtraci.vehicle_getNoiseEmission

def vehicle_getElectricityConsumption(vehID):
    return _libtraci.vehicle_getElectricityConsumption(vehID)
vehicle_getElectricityConsumption = _libtraci.vehicle_getElectricityConsumption

def vehicle_getPersonNumber(vehID):
    return _libtraci.vehicle_getPersonNumber(vehID)
vehicle_getPersonNumber = _libtraci.vehicle_getPersonNumber

def vehicle_getPersonIDList(vehID):
    return _libtraci.vehicle_getPersonIDList(vehID)
vehicle_getPersonIDList = _libtraci.vehicle_getPersonIDList

def vehicle_getLeader(vehID, dist=0.):
    return _libtraci.vehicle_getLeader(vehID, dist)
vehicle_getLeader = _libtraci.vehicle_getLeader

def vehicle_getFollower(vehID, dist=0.):
    return _libtraci.vehicle_getFollower(vehID, dist)
vehicle_getFollower = _libtraci.vehicle_getFollower

def vehicle_getWaitingTime(vehID):
    return _libtraci.vehicle_getWaitingTime(vehID)
vehicle_getWaitingTime = _libtraci.vehicle_getWaitingTime

def vehicle_getAccumulatedWaitingTime(vehID):
    return _libtraci.vehicle_getAccumulatedWaitingTime(vehID)
vehicle_getAccumulatedWaitingTime = _libtraci.vehicle_getAccumulatedWaitingTime

def vehicle_getAdaptedTraveltime(vehID, time, edgeID):
    return _libtraci.vehicle_getAdaptedTraveltime(vehID, time, edgeID)
vehicle_getAdaptedTraveltime = _libtraci.vehicle_getAdaptedTraveltime

def vehicle_getEffort(vehID, time, edgeID):
    return _libtraci.vehicle_getEffort(vehID, time, edgeID)
vehicle_getEffort = _libtraci.vehicle_getEffort

def vehicle_isRouteValid(vehID):
    return _libtraci.vehicle_isRouteValid(vehID)
vehicle_isRouteValid = _libtraci.vehicle_isRouteValid

def vehicle_getRoute(vehID):
    return _libtraci.vehicle_getRoute(vehID)
vehicle_getRoute = _libtraci.vehicle_getRoute

def vehicle_getSignals(vehID):
    return _libtraci.vehicle_getSignals(vehID)
vehicle_getSignals = _libtraci.vehicle_getSignals

def vehicle_getBestLanes(vehID):
    return _libtraci.vehicle_getBestLanes(vehID)
vehicle_getBestLanes = _libtraci.vehicle_getBestLanes

def vehicle_getNextTLS(vehID):
    return _libtraci.vehicle_getNextTLS(vehID)
vehicle_getNextTLS = _libtraci.vehicle_getNextTLS

def vehicle_getNextStops(vehID):
    return _libtraci.vehicle_getNextStops(vehID)
vehicle_getNextStops = _libtraci.vehicle_getNextStops

def vehicle_getStops(vehID, limit=0):
    return _libtraci.vehicle_getStops(vehID, limit)
vehicle_getStops = _libtraci.vehicle_getStops

def vehicle_getStopState(vehID):
    return _libtraci.vehicle_getStopState(vehID)
vehicle_getStopState = _libtraci.vehicle_getStopState

def vehicle_getDistance(vehID):
    return _libtraci.vehicle_getDistance(vehID)
vehicle_getDistance = _libtraci.vehicle_getDistance

def vehicle_getDrivingDistance(vehID, edgeID, position, laneIndex=0):
    return _libtraci.vehicle_getDrivingDistance(vehID, edgeID, position, laneIndex)
vehicle_getDrivingDistance = _libtraci.vehicle_getDrivingDistance

def vehicle_getDrivingDistance2D(vehID, x, y):
    return _libtraci.vehicle_getDrivingDistance2D(vehID, x, y)
vehicle_getDrivingDistance2D = _libtraci.vehicle_getDrivingDistance2D

def vehicle_getAllowedSpeed(vehID):
    return _libtraci.vehicle_getAllowedSpeed(vehID)
vehicle_getAllowedSpeed = _libtraci.vehicle_getAllowedSpeed

def vehicle_getSpeedMode(vehID):
    return _libtraci.vehicle_getSpeedMode(vehID)
vehicle_getSpeedMode = _libtraci.vehicle_getSpeedMode

def vehicle_getLaneChangeMode(vehID):
    return _libtraci.vehicle_getLaneChangeMode(vehID)
vehicle_getLaneChangeMode = _libtraci.vehicle_getLaneChangeMode

def vehicle_getRoutingMode(vehID):
    return _libtraci.vehicle_getRoutingMode(vehID)
vehicle_getRoutingMode = _libtraci.vehicle_getRoutingMode

def vehicle_getLine(vehID):
    return _libtraci.vehicle_getLine(vehID)
vehicle_getLine = _libtraci.vehicle_getLine

def vehicle_getVia(vehID):
    return _libtraci.vehicle_getVia(vehID)
vehicle_getVia = _libtraci.vehicle_getVia

def vehicle_getLaneChangeState(vehID, direction):
    return _libtraci.vehicle_getLaneChangeState(vehID, direction)
vehicle_getLaneChangeState = _libtraci.vehicle_getLaneChangeState

def vehicle_getLastActionTime(vehID):
    return _libtraci.vehicle_getLastActionTime(vehID)
vehicle_getLastActionTime = _libtraci.vehicle_getLastActionTime

def vehicle_getNeighbors(vehID, mode):
    return _libtraci.vehicle_getNeighbors(vehID, mode)
vehicle_getNeighbors = _libtraci.vehicle_getNeighbors

def vehicle_getFollowSpeed(*args, **kwargs):
    return _libtraci.vehicle_getFollowSpeed(*args, **kwargs)
vehicle_getFollowSpeed = _libtraci.vehicle_getFollowSpeed

def vehicle_getSecureGap(*args, **kwargs):
    return _libtraci.vehicle_getSecureGap(*args, **kwargs)
vehicle_getSecureGap = _libtraci.vehicle_getSecureGap

def vehicle_getStopSpeed(vehID, speed, gap):
    return _libtraci.vehicle_getStopSpeed(vehID, speed, gap)
vehicle_getStopSpeed = _libtraci.vehicle_getStopSpeed

def vehicle_getStopDelay(vehID):
    return _libtraci.vehicle_getStopDelay(vehID)
vehicle_getStopDelay = _libtraci.vehicle_getStopDelay

def vehicle_getStopArrivalDelay(vehID):
    return _libtraci.vehicle_getStopArrivalDelay(vehID)
vehicle_getStopArrivalDelay = _libtraci.vehicle_getStopArrivalDelay

def vehicle_getTaxiFleet(taxiState=0):
    return _libtraci.vehicle_getTaxiFleet(taxiState)
vehicle_getTaxiFleet = _libtraci.vehicle_getTaxiFleet

def vehicle_getIDList():
    return _libtraci.vehicle_getIDList()
vehicle_getIDList = _libtraci.vehicle_getIDList

def vehicle_getIDCount():
    return _libtraci.vehicle_getIDCount()
vehicle_getIDCount = _libtraci.vehicle_getIDCount

def vehicle_getParameter(objectID, param):
    return _libtraci.vehicle_getParameter(objectID, param)
vehicle_getParameter = _libtraci.vehicle_getParameter

def vehicle_getParameterWithKey(objectID, key):
    return _libtraci.vehicle_getParameterWithKey(objectID, key)
vehicle_getParameterWithKey = _libtraci.vehicle_getParameterWithKey

def vehicle_setParameter(objectID, param, value):
    return _libtraci.vehicle_setParameter(objectID, param, value)
vehicle_setParameter = _libtraci.vehicle_setParameter

def vehicle_getLength(typeID):
    return _libtraci.vehicle_getLength(typeID)
vehicle_getLength = _libtraci.vehicle_getLength

def vehicle_getMaxSpeed(typeID):
    return _libtraci.vehicle_getMaxSpeed(typeID)
vehicle_getMaxSpeed = _libtraci.vehicle_getMaxSpeed

def vehicle_getActionStepLength(typeID):
    return _libtraci.vehicle_getActionStepLength(typeID)
vehicle_getActionStepLength = _libtraci.vehicle_getActionStepLength

def vehicle_getSpeedFactor(typeID):
    return _libtraci.vehicle_getSpeedFactor(typeID)
vehicle_getSpeedFactor = _libtraci.vehicle_getSpeedFactor

def vehicle_getSpeedDeviation(typeID):
    return _libtraci.vehicle_getSpeedDeviation(typeID)
vehicle_getSpeedDeviation = _libtraci.vehicle_getSpeedDeviation

def vehicle_getAccel(typeID):
    return _libtraci.vehicle_getAccel(typeID)
vehicle_getAccel = _libtraci.vehicle_getAccel

def vehicle_getDecel(typeID):
    return _libtraci.vehicle_getDecel(typeID)
vehicle_getDecel = _libtraci.vehicle_getDecel

def vehicle_getEmergencyDecel(typeID):
    return _libtraci.vehicle_getEmergencyDecel(typeID)
vehicle_getEmergencyDecel = _libtraci.vehicle_getEmergencyDecel

def vehicle_getApparentDecel(typeID):
    return _libtraci.vehicle_getApparentDecel(typeID)
vehicle_getApparentDecel = _libtraci.vehicle_getApparentDecel

def vehicle_getImperfection(typeID):
    return _libtraci.vehicle_getImperfection(typeID)
vehicle_getImperfection = _libtraci.vehicle_getImperfection

def vehicle_getTau(typeID):
    return _libtraci.vehicle_getTau(typeID)
vehicle_getTau = _libtraci.vehicle_getTau

def vehicle_getVehicleClass(typeID):
    return _libtraci.vehicle_getVehicleClass(typeID)
vehicle_getVehicleClass = _libtraci.vehicle_getVehicleClass

def vehicle_getEmissionClass(typeID):
    return _libtraci.vehicle_getEmissionClass(typeID)
vehicle_getEmissionClass = _libtraci.vehicle_getEmissionClass

def vehicle_getShapeClass(typeID):
    return _libtraci.vehicle_getShapeClass(typeID)
vehicle_getShapeClass = _libtraci.vehicle_getShapeClass

def vehicle_getMinGap(typeID):
    return _libtraci.vehicle_getMinGap(typeID)
vehicle_getMinGap = _libtraci.vehicle_getMinGap

def vehicle_getWidth(typeID):
    return _libtraci.vehicle_getWidth(typeID)
vehicle_getWidth = _libtraci.vehicle_getWidth

def vehicle_getHeight(typeID):
    return _libtraci.vehicle_getHeight(typeID)
vehicle_getHeight = _libtraci.vehicle_getHeight

def vehicle_getColor(typeID):
    return _libtraci.vehicle_getColor(typeID)
vehicle_getColor = _libtraci.vehicle_getColor

def vehicle_getMinGapLat(typeID):
    return _libtraci.vehicle_getMinGapLat(typeID)
vehicle_getMinGapLat = _libtraci.vehicle_getMinGapLat

def vehicle_getMaxSpeedLat(typeID):
    return _libtraci.vehicle_getMaxSpeedLat(typeID)
vehicle_getMaxSpeedLat = _libtraci.vehicle_getMaxSpeedLat

def vehicle_getLateralAlignment(typeID):
    return _libtraci.vehicle_getLateralAlignment(typeID)
vehicle_getLateralAlignment = _libtraci.vehicle_getLateralAlignment

def vehicle_getPersonCapacity(typeID):
    return _libtraci.vehicle_getPersonCapacity(typeID)
vehicle_getPersonCapacity = _libtraci.vehicle_getPersonCapacity

def vehicle_setStop(*args, **kwargs):
    return _libtraci.vehicle_setStop(*args, **kwargs)
vehicle_setStop = _libtraci.vehicle_setStop

def vehicle_replaceStop(*args, **kwargs):
    return _libtraci.vehicle_replaceStop(*args, **kwargs)
vehicle_replaceStop = _libtraci.vehicle_replaceStop

def vehicle_rerouteParkingArea(vehID, parkingAreaID):
    return _libtraci.vehicle_rerouteParkingArea(vehID, parkingAreaID)
vehicle_rerouteParkingArea = _libtraci.vehicle_rerouteParkingArea

def vehicle_resume(vehID):
    return _libtraci.vehicle_resume(vehID)
vehicle_resume = _libtraci.vehicle_resume

def vehicle_add(*args, **kwargs):
    return _libtraci.vehicle_add(*args, **kwargs)
vehicle_add = _libtraci.vehicle_add

def vehicle_changeTarget(vehID, edgeID):
    return _libtraci.vehicle_changeTarget(vehID, edgeID)
vehicle_changeTarget = _libtraci.vehicle_changeTarget

def vehicle_changeLane(vehID, laneIndex, duration):
    return _libtraci.vehicle_changeLane(vehID, laneIndex, duration)
vehicle_changeLane = _libtraci.vehicle_changeLane

def vehicle_changeLaneRelative(vehID, indexOffset, duration):
    return _libtraci.vehicle_changeLaneRelative(vehID, indexOffset, duration)
vehicle_changeLaneRelative = _libtraci.vehicle_changeLaneRelative

def vehicle_changeSublane(vehID, latDist):
    return _libtraci.vehicle_changeSublane(vehID, latDist)
vehicle_changeSublane = _libtraci.vehicle_changeSublane

def vehicle_slowDown(vehID, speed, duration):
    return _libtraci.vehicle_slowDown(vehID, speed, duration)
vehicle_slowDown = _libtraci.vehicle_slowDown

def vehicle_openGap(*args, **kwargs):
    return _libtraci.vehicle_openGap(*args, **kwargs)
vehicle_openGap = _libtraci.vehicle_openGap

def vehicle_deactivateGapControl(vehID):
    return _libtraci.vehicle_deactivateGapControl(vehID)
vehicle_deactivateGapControl = _libtraci.vehicle_deactivateGapControl

def vehicle_requestToC(vehID, leadTime):
    return _libtraci.vehicle_requestToC(vehID, leadTime)
vehicle_requestToC = _libtraci.vehicle_requestToC

def vehicle_setSpeed(vehID, speed):
    return _libtraci.vehicle_setSpeed(vehID, speed)
vehicle_setSpeed = _libtraci.vehicle_setSpeed

def vehicle_setPreviousSpeed(vehID, prevspeed):
    return _libtraci.vehicle_setPreviousSpeed(vehID, prevspeed)
vehicle_setPreviousSpeed = _libtraci.vehicle_setPreviousSpeed

def vehicle_setSpeedMode(vehID, speedMode):
    return _libtraci.vehicle_setSpeedMode(vehID, speedMode)
vehicle_setSpeedMode = _libtraci.vehicle_setSpeedMode

def vehicle_setLaneChangeMode(vehID, laneChangeMode):
    return _libtraci.vehicle_setLaneChangeMode(vehID, laneChangeMode)
vehicle_setLaneChangeMode = _libtraci.vehicle_setLaneChangeMode

def vehicle_setRoutingMode(vehID, routingMode):
    return _libtraci.vehicle_setRoutingMode(vehID, routingMode)
vehicle_setRoutingMode = _libtraci.vehicle_setRoutingMode

def vehicle_setType(vehID, typeID):
    return _libtraci.vehicle_setType(vehID, typeID)
vehicle_setType = _libtraci.vehicle_setType

def vehicle_setRouteID(vehID, routeID):
    return _libtraci.vehicle_setRouteID(vehID, routeID)
vehicle_setRouteID = _libtraci.vehicle_setRouteID

def vehicle_setRoute(*args):
    return _libtraci.vehicle_setRoute(*args)
vehicle_setRoute = _libtraci.vehicle_setRoute

def vehicle_updateBestLanes(vehID):
    return _libtraci.vehicle_updateBestLanes(vehID)
vehicle_updateBestLanes = _libtraci.vehicle_updateBestLanes

def vehicle_setAdaptedTraveltime(*args, **kwargs):
    return _libtraci.vehicle_setAdaptedTraveltime(*args, **kwargs)
vehicle_setAdaptedTraveltime = _libtraci.vehicle_setAdaptedTraveltime

def vehicle_setEffort(*args, **kwargs):
    return _libtraci.vehicle_setEffort(*args, **kwargs)
vehicle_setEffort = _libtraci.vehicle_setEffort

def vehicle_rerouteTraveltime(vehID, currentTravelTimes=True):
    return _libtraci.vehicle_rerouteTraveltime(vehID, currentTravelTimes)
vehicle_rerouteTraveltime = _libtraci.vehicle_rerouteTraveltime

def vehicle_rerouteEffort(vehID):
    return _libtraci.vehicle_rerouteEffort(vehID)
vehicle_rerouteEffort = _libtraci.vehicle_rerouteEffort

def vehicle_setSignals(vehID, signals):
    return _libtraci.vehicle_setSignals(vehID, signals)
vehicle_setSignals = _libtraci.vehicle_setSignals

def vehicle_moveTo(*args, **kwargs):
    return _libtraci.vehicle_moveTo(*args, **kwargs)
vehicle_moveTo = _libtraci.vehicle_moveTo

def vehicle_moveToXY(*args, **kwargs):
    return _libtraci.vehicle_moveToXY(*args, **kwargs)
vehicle_moveToXY = _libtraci.vehicle_moveToXY

def vehicle_remove(*args, **kwargs):
    return _libtraci.vehicle_remove(*args, **kwargs)
vehicle_remove = _libtraci.vehicle_remove

def vehicle_setLine(vehID, line):
    return _libtraci.vehicle_setLine(vehID, line)
vehicle_setLine = _libtraci.vehicle_setLine

def vehicle_setVia(vehID, via):
    return _libtraci.vehicle_setVia(vehID, via)
vehicle_setVia = _libtraci.vehicle_setVia

def vehicle_highlight(*args, **kwargs):
    return _libtraci.vehicle_highlight(*args, **kwargs)
vehicle_highlight = _libtraci.vehicle_highlight

def vehicle_dispatchTaxi(vehID, reservations):
    return _libtraci.vehicle_dispatchTaxi(vehID, reservations)
vehicle_dispatchTaxi = _libtraci.vehicle_dispatchTaxi

def vehicle_setLength(typeID, length):
    return _libtraci.vehicle_setLength(typeID, length)
vehicle_setLength = _libtraci.vehicle_setLength

def vehicle_setMaxSpeed(typeID, speed):
    return _libtraci.vehicle_setMaxSpeed(typeID, speed)
vehicle_setMaxSpeed = _libtraci.vehicle_setMaxSpeed

def vehicle_setVehicleClass(typeID, clazz):
    return _libtraci.vehicle_setVehicleClass(typeID, clazz)
vehicle_setVehicleClass = _libtraci.vehicle_setVehicleClass

def vehicle_setSpeedFactor(typeID, factor):
    return _libtraci.vehicle_setSpeedFactor(typeID, factor)
vehicle_setSpeedFactor = _libtraci.vehicle_setSpeedFactor

def vehicle_setEmissionClass(typeID, clazz):
    return _libtraci.vehicle_setEmissionClass(typeID, clazz)
vehicle_setEmissionClass = _libtraci.vehicle_setEmissionClass

def vehicle_setShapeClass(typeID, shapeClass):
    return _libtraci.vehicle_setShapeClass(typeID, shapeClass)
vehicle_setShapeClass = _libtraci.vehicle_setShapeClass

def vehicle_setWidth(typeID, width):
    return _libtraci.vehicle_setWidth(typeID, width)
vehicle_setWidth = _libtraci.vehicle_setWidth

def vehicle_setHeight(typeID, height):
    return _libtraci.vehicle_setHeight(typeID, height)
vehicle_setHeight = _libtraci.vehicle_setHeight

def vehicle_setMinGap(typeID, minGap):
    return _libtraci.vehicle_setMinGap(typeID, minGap)
vehicle_setMinGap = _libtraci.vehicle_setMinGap

def vehicle_setAccel(typeID, accel):
    return _libtraci.vehicle_setAccel(typeID, accel)
vehicle_setAccel = _libtraci.vehicle_setAccel

def vehicle_setDecel(typeID, decel):
    return _libtraci.vehicle_setDecel(typeID, decel)
vehicle_setDecel = _libtraci.vehicle_setDecel

def vehicle_setEmergencyDecel(typeID, decel):
    return _libtraci.vehicle_setEmergencyDecel(typeID, decel)
vehicle_setEmergencyDecel = _libtraci.vehicle_setEmergencyDecel

def vehicle_setApparentDecel(typeID, decel):
    return _libtraci.vehicle_setApparentDecel(typeID, decel)
vehicle_setApparentDecel = _libtraci.vehicle_setApparentDecel

def vehicle_setImperfection(typeID, imperfection):
    return _libtraci.vehicle_setImperfection(typeID, imperfection)
vehicle_setImperfection = _libtraci.vehicle_setImperfection

def vehicle_setTau(typeID, tau):
    return _libtraci.vehicle_setTau(typeID, tau)
vehicle_setTau = _libtraci.vehicle_setTau

def vehicle_setColor(typeID, color):
    return _libtraci.vehicle_setColor(typeID, color)
vehicle_setColor = _libtraci.vehicle_setColor

def vehicle_setMinGapLat(typeID, minGapLat):
    return _libtraci.vehicle_setMinGapLat(typeID, minGapLat)
vehicle_setMinGapLat = _libtraci.vehicle_setMinGapLat

def vehicle_setMaxSpeedLat(typeID, speed):
    return _libtraci.vehicle_setMaxSpeedLat(typeID, speed)
vehicle_setMaxSpeedLat = _libtraci.vehicle_setMaxSpeedLat

def vehicle_setLateralAlignment(typeID, latAlignment):
    return _libtraci.vehicle_setLateralAlignment(typeID, latAlignment)
vehicle_setLateralAlignment = _libtraci.vehicle_setLateralAlignment

def vehicle_setActionStepLength(typeID, actionStepLength, resetActionOffset=True):
    return _libtraci.vehicle_setActionStepLength(typeID, actionStepLength, resetActionOffset)
vehicle_setActionStepLength = _libtraci.vehicle_setActionStepLength

def vehicle_subscribe(*args, **kwargs):
    return _libtraci.vehicle_subscribe(*args, **kwargs)
vehicle_subscribe = _libtraci.vehicle_subscribe

def vehicle_unsubscribe(objectID):
    return _libtraci.vehicle_unsubscribe(objectID)
vehicle_unsubscribe = _libtraci.vehicle_unsubscribe

def vehicle_subscribeContext(*args, **kwargs):
    return _libtraci.vehicle_subscribeContext(*args, **kwargs)
vehicle_subscribeContext = _libtraci.vehicle_subscribeContext

def vehicle_unsubscribeContext(objectID, domain, dist):
    return _libtraci.vehicle_unsubscribeContext(objectID, domain, dist)
vehicle_unsubscribeContext = _libtraci.vehicle_unsubscribeContext

def vehicle_getAllSubscriptionResults():
    return _libtraci.vehicle_getAllSubscriptionResults()
vehicle_getAllSubscriptionResults = _libtraci.vehicle_getAllSubscriptionResults

def vehicle_getSubscriptionResults(objectID):
    return _libtraci.vehicle_getSubscriptionResults(objectID)
vehicle_getSubscriptionResults = _libtraci.vehicle_getSubscriptionResults

def vehicle_getAllContextSubscriptionResults():
    return _libtraci.vehicle_getAllContextSubscriptionResults()
vehicle_getAllContextSubscriptionResults = _libtraci.vehicle_getAllContextSubscriptionResults

def vehicle_getContextSubscriptionResults(objectID):
    return _libtraci.vehicle_getContextSubscriptionResults(objectID)
vehicle_getContextSubscriptionResults = _libtraci.vehicle_getContextSubscriptionResults

def vehicle_subscribeParameterWithKey(*args, **kwargs):
    return _libtraci.vehicle_subscribeParameterWithKey(*args, **kwargs)
vehicle_subscribeParameterWithKey = _libtraci.vehicle_subscribeParameterWithKey

def vehicle_subscribeLeader(*args, **kwargs):
    return _libtraci.vehicle_subscribeLeader(*args, **kwargs)
vehicle_subscribeLeader = _libtraci.vehicle_subscribeLeader

def vehicle_addSubscriptionFilterLanes(*args, **kwargs):
    return _libtraci.vehicle_addSubscriptionFilterLanes(*args, **kwargs)
vehicle_addSubscriptionFilterLanes = _libtraci.vehicle_addSubscriptionFilterLanes

def vehicle_addSubscriptionFilterNoOpposite():
    return _libtraci.vehicle_addSubscriptionFilterNoOpposite()
vehicle_addSubscriptionFilterNoOpposite = _libtraci.vehicle_addSubscriptionFilterNoOpposite

def vehicle_addSubscriptionFilterDownstreamDistance(dist):
    return _libtraci.vehicle_addSubscriptionFilterDownstreamDistance(dist)
vehicle_addSubscriptionFilterDownstreamDistance = _libtraci.vehicle_addSubscriptionFilterDownstreamDistance

def vehicle_addSubscriptionFilterUpstreamDistance(dist):
    return _libtraci.vehicle_addSubscriptionFilterUpstreamDistance(dist)
vehicle_addSubscriptionFilterUpstreamDistance = _libtraci.vehicle_addSubscriptionFilterUpstreamDistance

def vehicle_addSubscriptionFilterCFManeuver(*args, **kwargs):
    return _libtraci.vehicle_addSubscriptionFilterCFManeuver(*args, **kwargs)
vehicle_addSubscriptionFilterCFManeuver = _libtraci.vehicle_addSubscriptionFilterCFManeuver

def vehicle_addSubscriptionFilterLCManeuver(*args, **kwargs):
    return _libtraci.vehicle_addSubscriptionFilterLCManeuver(*args, **kwargs)
vehicle_addSubscriptionFilterLCManeuver = _libtraci.vehicle_addSubscriptionFilterLCManeuver

def vehicle_addSubscriptionFilterLeadFollow(lanes):
    return _libtraci.vehicle_addSubscriptionFilterLeadFollow(lanes)
vehicle_addSubscriptionFilterLeadFollow = _libtraci.vehicle_addSubscriptionFilterLeadFollow

def vehicle_addSubscriptionFilterTurn(*args, **kwargs):
    return _libtraci.vehicle_addSubscriptionFilterTurn(*args, **kwargs)
vehicle_addSubscriptionFilterTurn = _libtraci.vehicle_addSubscriptionFilterTurn

def vehicle_addSubscriptionFilterVClass(vClasses):
    return _libtraci.vehicle_addSubscriptionFilterVClass(vClasses)
vehicle_addSubscriptionFilterVClass = _libtraci.vehicle_addSubscriptionFilterVClass

def vehicle_addSubscriptionFilterVType(vTypes):
    return _libtraci.vehicle_addSubscriptionFilterVType(vTypes)
vehicle_addSubscriptionFilterVType = _libtraci.vehicle_addSubscriptionFilterVType

def vehicle_addSubscriptionFilterFieldOfVision(openingAngle):
    return _libtraci.vehicle_addSubscriptionFilterFieldOfVision(openingAngle)
vehicle_addSubscriptionFilterFieldOfVision = _libtraci.vehicle_addSubscriptionFilterFieldOfVision

def vehicle_addSubscriptionFilterLateralDistance(*args, **kwargs):
    return _libtraci.vehicle_addSubscriptionFilterLateralDistance(*args, **kwargs)
vehicle_addSubscriptionFilterLateralDistance = _libtraci.vehicle_addSubscriptionFilterLateralDistance

class person(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, person, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, person, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        getSpeed = staticmethod(_libtraci.person_getSpeed)
    else:
        getSpeed = _libtraci.person_getSpeed
    if _newclass:
        getPosition = staticmethod(_libtraci.person_getPosition)
    else:
        getPosition = _libtraci.person_getPosition
    if _newclass:
        getPosition3D = staticmethod(_libtraci.person_getPosition3D)
    else:
        getPosition3D = _libtraci.person_getPosition3D
    if _newclass:
        getRoadID = staticmethod(_libtraci.person_getRoadID)
    else:
        getRoadID = _libtraci.person_getRoadID
    if _newclass:
        getLaneID = staticmethod(_libtraci.person_getLaneID)
    else:
        getLaneID = _libtraci.person_getLaneID
    if _newclass:
        getTypeID = staticmethod(_libtraci.person_getTypeID)
    else:
        getTypeID = _libtraci.person_getTypeID
    if _newclass:
        getWaitingTime = staticmethod(_libtraci.person_getWaitingTime)
    else:
        getWaitingTime = _libtraci.person_getWaitingTime
    if _newclass:
        getNextEdge = staticmethod(_libtraci.person_getNextEdge)
    else:
        getNextEdge = _libtraci.person_getNextEdge
    if _newclass:
        getVehicle = staticmethod(_libtraci.person_getVehicle)
    else:
        getVehicle = _libtraci.person_getVehicle
    if _newclass:
        getRemainingStages = staticmethod(_libtraci.person_getRemainingStages)
    else:
        getRemainingStages = _libtraci.person_getRemainingStages
    if _newclass:
        getStage = staticmethod(_libtraci.person_getStage)
    else:
        getStage = _libtraci.person_getStage
    if _newclass:
        getEdges = staticmethod(_libtraci.person_getEdges)
    else:
        getEdges = _libtraci.person_getEdges
    if _newclass:
        getAngle = staticmethod(_libtraci.person_getAngle)
    else:
        getAngle = _libtraci.person_getAngle
    if _newclass:
        getSlope = staticmethod(_libtraci.person_getSlope)
    else:
        getSlope = _libtraci.person_getSlope
    if _newclass:
        getLanePosition = staticmethod(_libtraci.person_getLanePosition)
    else:
        getLanePosition = _libtraci.person_getLanePosition
    if _newclass:
        getTaxiReservations = staticmethod(_libtraci.person_getTaxiReservations)
    else:
        getTaxiReservations = _libtraci.person_getTaxiReservations
    if _newclass:
        getIDList = staticmethod(_libtraci.person_getIDList)
    else:
        getIDList = _libtraci.person_getIDList
    if _newclass:
        getIDCount = staticmethod(_libtraci.person_getIDCount)
    else:
        getIDCount = _libtraci.person_getIDCount
    if _newclass:
        getParameter = staticmethod(_libtraci.person_getParameter)
    else:
        getParameter = _libtraci.person_getParameter
    if _newclass:
        getParameterWithKey = staticmethod(_libtraci.person_getParameterWithKey)
    else:
        getParameterWithKey = _libtraci.person_getParameterWithKey
    if _newclass:
        setParameter = staticmethod(_libtraci.person_setParameter)
    else:
        setParameter = _libtraci.person_setParameter
    if _newclass:
        getLength = staticmethod(_libtraci.person_getLength)
    else:
        getLength = _libtraci.person_getLength
    if _newclass:
        getMaxSpeed = staticmethod(_libtraci.person_getMaxSpeed)
    else:
        getMaxSpeed = _libtraci.person_getMaxSpeed
    if _newclass:
        getActionStepLength = staticmethod(_libtraci.person_getActionStepLength)
    else:
        getActionStepLength = _libtraci.person_getActionStepLength
    if _newclass:
        getSpeedFactor = staticmethod(_libtraci.person_getSpeedFactor)
    else:
        getSpeedFactor = _libtraci.person_getSpeedFactor
    if _newclass:
        getSpeedDeviation = staticmethod(_libtraci.person_getSpeedDeviation)
    else:
        getSpeedDeviation = _libtraci.person_getSpeedDeviation
    if _newclass:
        getAccel = staticmethod(_libtraci.person_getAccel)
    else:
        getAccel = _libtraci.person_getAccel
    if _newclass:
        getDecel = staticmethod(_libtraci.person_getDecel)
    else:
        getDecel = _libtraci.person_getDecel
    if _newclass:
        getEmergencyDecel = staticmethod(_libtraci.person_getEmergencyDecel)
    else:
        getEmergencyDecel = _libtraci.person_getEmergencyDecel
    if _newclass:
        getApparentDecel = staticmethod(_libtraci.person_getApparentDecel)
    else:
        getApparentDecel = _libtraci.person_getApparentDecel
    if _newclass:
        getImperfection = staticmethod(_libtraci.person_getImperfection)
    else:
        getImperfection = _libtraci.person_getImperfection
    if _newclass:
        getTau = staticmethod(_libtraci.person_getTau)
    else:
        getTau = _libtraci.person_getTau
    if _newclass:
        getVehicleClass = staticmethod(_libtraci.person_getVehicleClass)
    else:
        getVehicleClass = _libtraci.person_getVehicleClass
    if _newclass:
        getEmissionClass = staticmethod(_libtraci.person_getEmissionClass)
    else:
        getEmissionClass = _libtraci.person_getEmissionClass
    if _newclass:
        getShapeClass = staticmethod(_libtraci.person_getShapeClass)
    else:
        getShapeClass = _libtraci.person_getShapeClass
    if _newclass:
        getMinGap = staticmethod(_libtraci.person_getMinGap)
    else:
        getMinGap = _libtraci.person_getMinGap
    if _newclass:
        getWidth = staticmethod(_libtraci.person_getWidth)
    else:
        getWidth = _libtraci.person_getWidth
    if _newclass:
        getHeight = staticmethod(_libtraci.person_getHeight)
    else:
        getHeight = _libtraci.person_getHeight
    if _newclass:
        getColor = staticmethod(_libtraci.person_getColor)
    else:
        getColor = _libtraci.person_getColor
    if _newclass:
        getMinGapLat = staticmethod(_libtraci.person_getMinGapLat)
    else:
        getMinGapLat = _libtraci.person_getMinGapLat
    if _newclass:
        getMaxSpeedLat = staticmethod(_libtraci.person_getMaxSpeedLat)
    else:
        getMaxSpeedLat = _libtraci.person_getMaxSpeedLat
    if _newclass:
        getLateralAlignment = staticmethod(_libtraci.person_getLateralAlignment)
    else:
        getLateralAlignment = _libtraci.person_getLateralAlignment
    if _newclass:
        getPersonCapacity = staticmethod(_libtraci.person_getPersonCapacity)
    else:
        getPersonCapacity = _libtraci.person_getPersonCapacity
    if _newclass:
        add = staticmethod(_libtraci.person_add)
    else:
        add = _libtraci.person_add
    if _newclass:
        appendStage = staticmethod(_libtraci.person_appendStage)
    else:
        appendStage = _libtraci.person_appendStage
    if _newclass:
        replaceStage = staticmethod(_libtraci.person_replaceStage)
    else:
        replaceStage = _libtraci.person_replaceStage
    if _newclass:
        appendWaitingStage = staticmethod(_libtraci.person_appendWaitingStage)
    else:
        appendWaitingStage = _libtraci.person_appendWaitingStage
    if _newclass:
        appendWalkingStage = staticmethod(_libtraci.person_appendWalkingStage)
    else:
        appendWalkingStage = _libtraci.person_appendWalkingStage
    if _newclass:
        appendDrivingStage = staticmethod(_libtraci.person_appendDrivingStage)
    else:
        appendDrivingStage = _libtraci.person_appendDrivingStage
    if _newclass:
        removeStage = staticmethod(_libtraci.person_removeStage)
    else:
        removeStage = _libtraci.person_removeStage
    if _newclass:
        rerouteTraveltime = staticmethod(_libtraci.person_rerouteTraveltime)
    else:
        rerouteTraveltime = _libtraci.person_rerouteTraveltime
    if _newclass:
        moveTo = staticmethod(_libtraci.person_moveTo)
    else:
        moveTo = _libtraci.person_moveTo
    if _newclass:
        moveToXY = staticmethod(_libtraci.person_moveToXY)
    else:
        moveToXY = _libtraci.person_moveToXY
    if _newclass:
        setSpeed = staticmethod(_libtraci.person_setSpeed)
    else:
        setSpeed = _libtraci.person_setSpeed
    if _newclass:
        setType = staticmethod(_libtraci.person_setType)
    else:
        setType = _libtraci.person_setType
    if _newclass:
        setLength = staticmethod(_libtraci.person_setLength)
    else:
        setLength = _libtraci.person_setLength
    if _newclass:
        setMaxSpeed = staticmethod(_libtraci.person_setMaxSpeed)
    else:
        setMaxSpeed = _libtraci.person_setMaxSpeed
    if _newclass:
        setVehicleClass = staticmethod(_libtraci.person_setVehicleClass)
    else:
        setVehicleClass = _libtraci.person_setVehicleClass
    if _newclass:
        setSpeedFactor = staticmethod(_libtraci.person_setSpeedFactor)
    else:
        setSpeedFactor = _libtraci.person_setSpeedFactor
    if _newclass:
        setEmissionClass = staticmethod(_libtraci.person_setEmissionClass)
    else:
        setEmissionClass = _libtraci.person_setEmissionClass
    if _newclass:
        setShapeClass = staticmethod(_libtraci.person_setShapeClass)
    else:
        setShapeClass = _libtraci.person_setShapeClass
    if _newclass:
        setWidth = staticmethod(_libtraci.person_setWidth)
    else:
        setWidth = _libtraci.person_setWidth
    if _newclass:
        setHeight = staticmethod(_libtraci.person_setHeight)
    else:
        setHeight = _libtraci.person_setHeight
    if _newclass:
        setMinGap = staticmethod(_libtraci.person_setMinGap)
    else:
        setMinGap = _libtraci.person_setMinGap
    if _newclass:
        setAccel = staticmethod(_libtraci.person_setAccel)
    else:
        setAccel = _libtraci.person_setAccel
    if _newclass:
        setDecel = staticmethod(_libtraci.person_setDecel)
    else:
        setDecel = _libtraci.person_setDecel
    if _newclass:
        setEmergencyDecel = staticmethod(_libtraci.person_setEmergencyDecel)
    else:
        setEmergencyDecel = _libtraci.person_setEmergencyDecel
    if _newclass:
        setApparentDecel = staticmethod(_libtraci.person_setApparentDecel)
    else:
        setApparentDecel = _libtraci.person_setApparentDecel
    if _newclass:
        setImperfection = staticmethod(_libtraci.person_setImperfection)
    else:
        setImperfection = _libtraci.person_setImperfection
    if _newclass:
        setTau = staticmethod(_libtraci.person_setTau)
    else:
        setTau = _libtraci.person_setTau
    if _newclass:
        setColor = staticmethod(_libtraci.person_setColor)
    else:
        setColor = _libtraci.person_setColor
    if _newclass:
        setMinGapLat = staticmethod(_libtraci.person_setMinGapLat)
    else:
        setMinGapLat = _libtraci.person_setMinGapLat
    if _newclass:
        setMaxSpeedLat = staticmethod(_libtraci.person_setMaxSpeedLat)
    else:
        setMaxSpeedLat = _libtraci.person_setMaxSpeedLat
    if _newclass:
        setLateralAlignment = staticmethod(_libtraci.person_setLateralAlignment)
    else:
        setLateralAlignment = _libtraci.person_setLateralAlignment
    if _newclass:
        setActionStepLength = staticmethod(_libtraci.person_setActionStepLength)
    else:
        setActionStepLength = _libtraci.person_setActionStepLength
    if _newclass:
        subscribe = staticmethod(_libtraci.person_subscribe)
    else:
        subscribe = _libtraci.person_subscribe
    if _newclass:
        unsubscribe = staticmethod(_libtraci.person_unsubscribe)
    else:
        unsubscribe = _libtraci.person_unsubscribe
    if _newclass:
        subscribeContext = staticmethod(_libtraci.person_subscribeContext)
    else:
        subscribeContext = _libtraci.person_subscribeContext
    if _newclass:
        unsubscribeContext = staticmethod(_libtraci.person_unsubscribeContext)
    else:
        unsubscribeContext = _libtraci.person_unsubscribeContext
    if _newclass:
        getAllSubscriptionResults = staticmethod(_libtraci.person_getAllSubscriptionResults)
    else:
        getAllSubscriptionResults = _libtraci.person_getAllSubscriptionResults
    if _newclass:
        getSubscriptionResults = staticmethod(_libtraci.person_getSubscriptionResults)
    else:
        getSubscriptionResults = _libtraci.person_getSubscriptionResults
    if _newclass:
        getAllContextSubscriptionResults = staticmethod(_libtraci.person_getAllContextSubscriptionResults)
    else:
        getAllContextSubscriptionResults = _libtraci.person_getAllContextSubscriptionResults
    if _newclass:
        getContextSubscriptionResults = staticmethod(_libtraci.person_getContextSubscriptionResults)
    else:
        getContextSubscriptionResults = _libtraci.person_getContextSubscriptionResults
    if _newclass:
        subscribeParameterWithKey = staticmethod(_libtraci.person_subscribeParameterWithKey)
    else:
        subscribeParameterWithKey = _libtraci.person_subscribeParameterWithKey
    if _newclass:
        writeStage = staticmethod(_libtraci.person_writeStage)
    else:
        writeStage = _libtraci.person_writeStage
    __swig_destroy__ = _libtraci.delete_person
    __del__ = lambda self: None
person_swigregister = _libtraci.person_swigregister
person_swigregister(person)

def person_getSpeed(personID):
    return _libtraci.person_getSpeed(personID)
person_getSpeed = _libtraci.person_getSpeed

def person_getPosition(personID, includeZ=False):
    return _libtraci.person_getPosition(personID, includeZ)
person_getPosition = _libtraci.person_getPosition

def person_getPosition3D(personID):
    return _libtraci.person_getPosition3D(personID)
person_getPosition3D = _libtraci.person_getPosition3D

def person_getRoadID(personID):
    return _libtraci.person_getRoadID(personID)
person_getRoadID = _libtraci.person_getRoadID

def person_getLaneID(personID):
    return _libtraci.person_getLaneID(personID)
person_getLaneID = _libtraci.person_getLaneID

def person_getTypeID(personID):
    return _libtraci.person_getTypeID(personID)
person_getTypeID = _libtraci.person_getTypeID

def person_getWaitingTime(personID):
    return _libtraci.person_getWaitingTime(personID)
person_getWaitingTime = _libtraci.person_getWaitingTime

def person_getNextEdge(personID):
    return _libtraci.person_getNextEdge(personID)
person_getNextEdge = _libtraci.person_getNextEdge

def person_getVehicle(personID):
    return _libtraci.person_getVehicle(personID)
person_getVehicle = _libtraci.person_getVehicle

def person_getRemainingStages(personID):
    return _libtraci.person_getRemainingStages(personID)
person_getRemainingStages = _libtraci.person_getRemainingStages

def person_getStage(personID, nextStageIndex=0):
    return _libtraci.person_getStage(personID, nextStageIndex)
person_getStage = _libtraci.person_getStage

def person_getEdges(personID, nextStageIndex=0):
    return _libtraci.person_getEdges(personID, nextStageIndex)
person_getEdges = _libtraci.person_getEdges

def person_getAngle(personID):
    return _libtraci.person_getAngle(personID)
person_getAngle = _libtraci.person_getAngle

def person_getSlope(personID):
    return _libtraci.person_getSlope(personID)
person_getSlope = _libtraci.person_getSlope

def person_getLanePosition(personID):
    return _libtraci.person_getLanePosition(personID)
person_getLanePosition = _libtraci.person_getLanePosition

def person_getTaxiReservations(onlyNew=False):
    return _libtraci.person_getTaxiReservations(onlyNew)
person_getTaxiReservations = _libtraci.person_getTaxiReservations

def person_getIDList():
    return _libtraci.person_getIDList()
person_getIDList = _libtraci.person_getIDList

def person_getIDCount():
    return _libtraci.person_getIDCount()
person_getIDCount = _libtraci.person_getIDCount

def person_getParameter(objectID, param):
    return _libtraci.person_getParameter(objectID, param)
person_getParameter = _libtraci.person_getParameter

def person_getParameterWithKey(objectID, key):
    return _libtraci.person_getParameterWithKey(objectID, key)
person_getParameterWithKey = _libtraci.person_getParameterWithKey

def person_setParameter(objectID, param, value):
    return _libtraci.person_setParameter(objectID, param, value)
person_setParameter = _libtraci.person_setParameter

def person_getLength(typeID):
    return _libtraci.person_getLength(typeID)
person_getLength = _libtraci.person_getLength

def person_getMaxSpeed(typeID):
    return _libtraci.person_getMaxSpeed(typeID)
person_getMaxSpeed = _libtraci.person_getMaxSpeed

def person_getActionStepLength(typeID):
    return _libtraci.person_getActionStepLength(typeID)
person_getActionStepLength = _libtraci.person_getActionStepLength

def person_getSpeedFactor(typeID):
    return _libtraci.person_getSpeedFactor(typeID)
person_getSpeedFactor = _libtraci.person_getSpeedFactor

def person_getSpeedDeviation(typeID):
    return _libtraci.person_getSpeedDeviation(typeID)
person_getSpeedDeviation = _libtraci.person_getSpeedDeviation

def person_getAccel(typeID):
    return _libtraci.person_getAccel(typeID)
person_getAccel = _libtraci.person_getAccel

def person_getDecel(typeID):
    return _libtraci.person_getDecel(typeID)
person_getDecel = _libtraci.person_getDecel

def person_getEmergencyDecel(typeID):
    return _libtraci.person_getEmergencyDecel(typeID)
person_getEmergencyDecel = _libtraci.person_getEmergencyDecel

def person_getApparentDecel(typeID):
    return _libtraci.person_getApparentDecel(typeID)
person_getApparentDecel = _libtraci.person_getApparentDecel

def person_getImperfection(typeID):
    return _libtraci.person_getImperfection(typeID)
person_getImperfection = _libtraci.person_getImperfection

def person_getTau(typeID):
    return _libtraci.person_getTau(typeID)
person_getTau = _libtraci.person_getTau

def person_getVehicleClass(typeID):
    return _libtraci.person_getVehicleClass(typeID)
person_getVehicleClass = _libtraci.person_getVehicleClass

def person_getEmissionClass(typeID):
    return _libtraci.person_getEmissionClass(typeID)
person_getEmissionClass = _libtraci.person_getEmissionClass

def person_getShapeClass(typeID):
    return _libtraci.person_getShapeClass(typeID)
person_getShapeClass = _libtraci.person_getShapeClass

def person_getMinGap(typeID):
    return _libtraci.person_getMinGap(typeID)
person_getMinGap = _libtraci.person_getMinGap

def person_getWidth(typeID):
    return _libtraci.person_getWidth(typeID)
person_getWidth = _libtraci.person_getWidth

def person_getHeight(typeID):
    return _libtraci.person_getHeight(typeID)
person_getHeight = _libtraci.person_getHeight

def person_getColor(typeID):
    return _libtraci.person_getColor(typeID)
person_getColor = _libtraci.person_getColor

def person_getMinGapLat(typeID):
    return _libtraci.person_getMinGapLat(typeID)
person_getMinGapLat = _libtraci.person_getMinGapLat

def person_getMaxSpeedLat(typeID):
    return _libtraci.person_getMaxSpeedLat(typeID)
person_getMaxSpeedLat = _libtraci.person_getMaxSpeedLat

def person_getLateralAlignment(typeID):
    return _libtraci.person_getLateralAlignment(typeID)
person_getLateralAlignment = _libtraci.person_getLateralAlignment

def person_getPersonCapacity(typeID):
    return _libtraci.person_getPersonCapacity(typeID)
person_getPersonCapacity = _libtraci.person_getPersonCapacity

def person_add(*args, **kwargs):
    return _libtraci.person_add(*args, **kwargs)
person_add = _libtraci.person_add

def person_appendStage(personID, stage):
    return _libtraci.person_appendStage(personID, stage)
person_appendStage = _libtraci.person_appendStage

def person_replaceStage(personID, stageIndex, stage):
    return _libtraci.person_replaceStage(personID, stageIndex, stage)
person_replaceStage = _libtraci.person_replaceStage

def person_appendWaitingStage(*args, **kwargs):
    return _libtraci.person_appendWaitingStage(*args, **kwargs)
person_appendWaitingStage = _libtraci.person_appendWaitingStage

def person_appendWalkingStage(*args, **kwargs):
    return _libtraci.person_appendWalkingStage(*args, **kwargs)
person_appendWalkingStage = _libtraci.person_appendWalkingStage

def person_appendDrivingStage(*args, **kwargs):
    return _libtraci.person_appendDrivingStage(*args, **kwargs)
person_appendDrivingStage = _libtraci.person_appendDrivingStage

def person_removeStage(personID, nextStageIndex):
    return _libtraci.person_removeStage(personID, nextStageIndex)
person_removeStage = _libtraci.person_removeStage

def person_rerouteTraveltime(personID):
    return _libtraci.person_rerouteTraveltime(personID)
person_rerouteTraveltime = _libtraci.person_rerouteTraveltime

def person_moveTo(personID, edgeID, position):
    return _libtraci.person_moveTo(personID, edgeID, position)
person_moveTo = _libtraci.person_moveTo

def person_moveToXY(*args, **kwargs):
    return _libtraci.person_moveToXY(*args, **kwargs)
person_moveToXY = _libtraci.person_moveToXY

def person_setSpeed(personID, speed):
    return _libtraci.person_setSpeed(personID, speed)
person_setSpeed = _libtraci.person_setSpeed

def person_setType(personID, typeID):
    return _libtraci.person_setType(personID, typeID)
person_setType = _libtraci.person_setType

def person_setLength(typeID, length):
    return _libtraci.person_setLength(typeID, length)
person_setLength = _libtraci.person_setLength

def person_setMaxSpeed(typeID, speed):
    return _libtraci.person_setMaxSpeed(typeID, speed)
person_setMaxSpeed = _libtraci.person_setMaxSpeed

def person_setVehicleClass(typeID, clazz):
    return _libtraci.person_setVehicleClass(typeID, clazz)
person_setVehicleClass = _libtraci.person_setVehicleClass

def person_setSpeedFactor(typeID, factor):
    return _libtraci.person_setSpeedFactor(typeID, factor)
person_setSpeedFactor = _libtraci.person_setSpeedFactor

def person_setEmissionClass(typeID, clazz):
    return _libtraci.person_setEmissionClass(typeID, clazz)
person_setEmissionClass = _libtraci.person_setEmissionClass

def person_setShapeClass(typeID, shapeClass):
    return _libtraci.person_setShapeClass(typeID, shapeClass)
person_setShapeClass = _libtraci.person_setShapeClass

def person_setWidth(typeID, width):
    return _libtraci.person_setWidth(typeID, width)
person_setWidth = _libtraci.person_setWidth

def person_setHeight(typeID, height):
    return _libtraci.person_setHeight(typeID, height)
person_setHeight = _libtraci.person_setHeight

def person_setMinGap(typeID, minGap):
    return _libtraci.person_setMinGap(typeID, minGap)
person_setMinGap = _libtraci.person_setMinGap

def person_setAccel(typeID, accel):
    return _libtraci.person_setAccel(typeID, accel)
person_setAccel = _libtraci.person_setAccel

def person_setDecel(typeID, decel):
    return _libtraci.person_setDecel(typeID, decel)
person_setDecel = _libtraci.person_setDecel

def person_setEmergencyDecel(typeID, decel):
    return _libtraci.person_setEmergencyDecel(typeID, decel)
person_setEmergencyDecel = _libtraci.person_setEmergencyDecel

def person_setApparentDecel(typeID, decel):
    return _libtraci.person_setApparentDecel(typeID, decel)
person_setApparentDecel = _libtraci.person_setApparentDecel

def person_setImperfection(typeID, imperfection):
    return _libtraci.person_setImperfection(typeID, imperfection)
person_setImperfection = _libtraci.person_setImperfection

def person_setTau(typeID, tau):
    return _libtraci.person_setTau(typeID, tau)
person_setTau = _libtraci.person_setTau

def person_setColor(typeID, color):
    return _libtraci.person_setColor(typeID, color)
person_setColor = _libtraci.person_setColor

def person_setMinGapLat(typeID, minGapLat):
    return _libtraci.person_setMinGapLat(typeID, minGapLat)
person_setMinGapLat = _libtraci.person_setMinGapLat

def person_setMaxSpeedLat(typeID, speed):
    return _libtraci.person_setMaxSpeedLat(typeID, speed)
person_setMaxSpeedLat = _libtraci.person_setMaxSpeedLat

def person_setLateralAlignment(typeID, latAlignment):
    return _libtraci.person_setLateralAlignment(typeID, latAlignment)
person_setLateralAlignment = _libtraci.person_setLateralAlignment

def person_setActionStepLength(typeID, actionStepLength, resetActionOffset=True):
    return _libtraci.person_setActionStepLength(typeID, actionStepLength, resetActionOffset)
person_setActionStepLength = _libtraci.person_setActionStepLength

def person_subscribe(*args, **kwargs):
    return _libtraci.person_subscribe(*args, **kwargs)
person_subscribe = _libtraci.person_subscribe

def person_unsubscribe(objectID):
    return _libtraci.person_unsubscribe(objectID)
person_unsubscribe = _libtraci.person_unsubscribe

def person_subscribeContext(*args, **kwargs):
    return _libtraci.person_subscribeContext(*args, **kwargs)
person_subscribeContext = _libtraci.person_subscribeContext

def person_unsubscribeContext(objectID, domain, dist):
    return _libtraci.person_unsubscribeContext(objectID, domain, dist)
person_unsubscribeContext = _libtraci.person_unsubscribeContext

def person_getAllSubscriptionResults():
    return _libtraci.person_getAllSubscriptionResults()
person_getAllSubscriptionResults = _libtraci.person_getAllSubscriptionResults

def person_getSubscriptionResults(objectID):
    return _libtraci.person_getSubscriptionResults(objectID)
person_getSubscriptionResults = _libtraci.person_getSubscriptionResults

def person_getAllContextSubscriptionResults():
    return _libtraci.person_getAllContextSubscriptionResults()
person_getAllContextSubscriptionResults = _libtraci.person_getAllContextSubscriptionResults

def person_getContextSubscriptionResults(objectID):
    return _libtraci.person_getContextSubscriptionResults(objectID)
person_getContextSubscriptionResults = _libtraci.person_getContextSubscriptionResults

def person_subscribeParameterWithKey(*args, **kwargs):
    return _libtraci.person_subscribeParameterWithKey(*args, **kwargs)
person_subscribeParameterWithKey = _libtraci.person_subscribeParameterWithKey

def person_writeStage(stage, content):
    return _libtraci.person_writeStage(stage, content)
person_writeStage = _libtraci.person_writeStage

class calibrator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, calibrator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, calibrator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        getEdgeID = staticmethod(_libtraci.calibrator_getEdgeID)
    else:
        getEdgeID = _libtraci.calibrator_getEdgeID
    if _newclass:
        getLaneID = staticmethod(_libtraci.calibrator_getLaneID)
    else:
        getLaneID = _libtraci.calibrator_getLaneID
    if _newclass:
        getVehsPerHour = staticmethod(_libtraci.calibrator_getVehsPerHour)
    else:
        getVehsPerHour = _libtraci.calibrator_getVehsPerHour
    if _newclass:
        getSpeed = staticmethod(_libtraci.calibrator_getSpeed)
    else:
        getSpeed = _libtraci.calibrator_getSpeed
    if _newclass:
        getTypeID = staticmethod(_libtraci.calibrator_getTypeID)
    else:
        getTypeID = _libtraci.calibrator_getTypeID
    if _newclass:
        getBegin = staticmethod(_libtraci.calibrator_getBegin)
    else:
        getBegin = _libtraci.calibrator_getBegin
    if _newclass:
        getEnd = staticmethod(_libtraci.calibrator_getEnd)
    else:
        getEnd = _libtraci.calibrator_getEnd
    if _newclass:
        getRouteID = staticmethod(_libtraci.calibrator_getRouteID)
    else:
        getRouteID = _libtraci.calibrator_getRouteID
    if _newclass:
        getRouteProbeID = staticmethod(_libtraci.calibrator_getRouteProbeID)
    else:
        getRouteProbeID = _libtraci.calibrator_getRouteProbeID
    if _newclass:
        getVTypes = staticmethod(_libtraci.calibrator_getVTypes)
    else:
        getVTypes = _libtraci.calibrator_getVTypes
    if _newclass:
        getPassed = staticmethod(_libtraci.calibrator_getPassed)
    else:
        getPassed = _libtraci.calibrator_getPassed
    if _newclass:
        getInserted = staticmethod(_libtraci.calibrator_getInserted)
    else:
        getInserted = _libtraci.calibrator_getInserted
    if _newclass:
        getRemoved = staticmethod(_libtraci.calibrator_getRemoved)
    else:
        getRemoved = _libtraci.calibrator_getRemoved
    if _newclass:
        getIDList = staticmethod(_libtraci.calibrator_getIDList)
    else:
        getIDList = _libtraci.calibrator_getIDList
    if _newclass:
        getIDCount = staticmethod(_libtraci.calibrator_getIDCount)
    else:
        getIDCount = _libtraci.calibrator_getIDCount
    if _newclass:
        getParameter = staticmethod(_libtraci.calibrator_getParameter)
    else:
        getParameter = _libtraci.calibrator_getParameter
    if _newclass:
        getParameterWithKey = staticmethod(_libtraci.calibrator_getParameterWithKey)
    else:
        getParameterWithKey = _libtraci.calibrator_getParameterWithKey
    if _newclass:
        setParameter = staticmethod(_libtraci.calibrator_setParameter)
    else:
        setParameter = _libtraci.calibrator_setParameter
    if _newclass:
        subscribe = staticmethod(_libtraci.calibrator_subscribe)
    else:
        subscribe = _libtraci.calibrator_subscribe
    if _newclass:
        unsubscribe = staticmethod(_libtraci.calibrator_unsubscribe)
    else:
        unsubscribe = _libtraci.calibrator_unsubscribe
    if _newclass:
        subscribeContext = staticmethod(_libtraci.calibrator_subscribeContext)
    else:
        subscribeContext = _libtraci.calibrator_subscribeContext
    if _newclass:
        unsubscribeContext = staticmethod(_libtraci.calibrator_unsubscribeContext)
    else:
        unsubscribeContext = _libtraci.calibrator_unsubscribeContext
    if _newclass:
        getAllSubscriptionResults = staticmethod(_libtraci.calibrator_getAllSubscriptionResults)
    else:
        getAllSubscriptionResults = _libtraci.calibrator_getAllSubscriptionResults
    if _newclass:
        getSubscriptionResults = staticmethod(_libtraci.calibrator_getSubscriptionResults)
    else:
        getSubscriptionResults = _libtraci.calibrator_getSubscriptionResults
    if _newclass:
        getAllContextSubscriptionResults = staticmethod(_libtraci.calibrator_getAllContextSubscriptionResults)
    else:
        getAllContextSubscriptionResults = _libtraci.calibrator_getAllContextSubscriptionResults
    if _newclass:
        getContextSubscriptionResults = staticmethod(_libtraci.calibrator_getContextSubscriptionResults)
    else:
        getContextSubscriptionResults = _libtraci.calibrator_getContextSubscriptionResults
    if _newclass:
        subscribeParameterWithKey = staticmethod(_libtraci.calibrator_subscribeParameterWithKey)
    else:
        subscribeParameterWithKey = _libtraci.calibrator_subscribeParameterWithKey
    if _newclass:
        setFlow = staticmethod(_libtraci.calibrator_setFlow)
    else:
        setFlow = _libtraci.calibrator_setFlow
    __swig_destroy__ = _libtraci.delete_calibrator
    __del__ = lambda self: None
calibrator_swigregister = _libtraci.calibrator_swigregister
calibrator_swigregister(calibrator)

def calibrator_getEdgeID(calibratorID):
    return _libtraci.calibrator_getEdgeID(calibratorID)
calibrator_getEdgeID = _libtraci.calibrator_getEdgeID

def calibrator_getLaneID(calibratorID):
    return _libtraci.calibrator_getLaneID(calibratorID)
calibrator_getLaneID = _libtraci.calibrator_getLaneID

def calibrator_getVehsPerHour(calibratorID):
    return _libtraci.calibrator_getVehsPerHour(calibratorID)
calibrator_getVehsPerHour = _libtraci.calibrator_getVehsPerHour

def calibrator_getSpeed(calibratorID):
    return _libtraci.calibrator_getSpeed(calibratorID)
calibrator_getSpeed = _libtraci.calibrator_getSpeed

def calibrator_getTypeID(calibratorID):
    return _libtraci.calibrator_getTypeID(calibratorID)
calibrator_getTypeID = _libtraci.calibrator_getTypeID

def calibrator_getBegin(calibratorID):
    return _libtraci.calibrator_getBegin(calibratorID)
calibrator_getBegin = _libtraci.calibrator_getBegin

def calibrator_getEnd(calibratorID):
    return _libtraci.calibrator_getEnd(calibratorID)
calibrator_getEnd = _libtraci.calibrator_getEnd

def calibrator_getRouteID(calibratorID):
    return _libtraci.calibrator_getRouteID(calibratorID)
calibrator_getRouteID = _libtraci.calibrator_getRouteID

def calibrator_getRouteProbeID(calibratorID):
    return _libtraci.calibrator_getRouteProbeID(calibratorID)
calibrator_getRouteProbeID = _libtraci.calibrator_getRouteProbeID

def calibrator_getVTypes(routeID):
    return _libtraci.calibrator_getVTypes(routeID)
calibrator_getVTypes = _libtraci.calibrator_getVTypes

def calibrator_getPassed(calibratorID):
    return _libtraci.calibrator_getPassed(calibratorID)
calibrator_getPassed = _libtraci.calibrator_getPassed

def calibrator_getInserted(calibratorID):
    return _libtraci.calibrator_getInserted(calibratorID)
calibrator_getInserted = _libtraci.calibrator_getInserted

def calibrator_getRemoved(calibratorID):
    return _libtraci.calibrator_getRemoved(calibratorID)
calibrator_getRemoved = _libtraci.calibrator_getRemoved

def calibrator_getIDList():
    return _libtraci.calibrator_getIDList()
calibrator_getIDList = _libtraci.calibrator_getIDList

def calibrator_getIDCount():
    return _libtraci.calibrator_getIDCount()
calibrator_getIDCount = _libtraci.calibrator_getIDCount

def calibrator_getParameter(objectID, param):
    return _libtraci.calibrator_getParameter(objectID, param)
calibrator_getParameter = _libtraci.calibrator_getParameter

def calibrator_getParameterWithKey(objectID, key):
    return _libtraci.calibrator_getParameterWithKey(objectID, key)
calibrator_getParameterWithKey = _libtraci.calibrator_getParameterWithKey

def calibrator_setParameter(objectID, param, value):
    return _libtraci.calibrator_setParameter(objectID, param, value)
calibrator_setParameter = _libtraci.calibrator_setParameter

def calibrator_subscribe(*args, **kwargs):
    return _libtraci.calibrator_subscribe(*args, **kwargs)
calibrator_subscribe = _libtraci.calibrator_subscribe

def calibrator_unsubscribe(objectID):
    return _libtraci.calibrator_unsubscribe(objectID)
calibrator_unsubscribe = _libtraci.calibrator_unsubscribe

def calibrator_subscribeContext(*args, **kwargs):
    return _libtraci.calibrator_subscribeContext(*args, **kwargs)
calibrator_subscribeContext = _libtraci.calibrator_subscribeContext

def calibrator_unsubscribeContext(objectID, domain, dist):
    return _libtraci.calibrator_unsubscribeContext(objectID, domain, dist)
calibrator_unsubscribeContext = _libtraci.calibrator_unsubscribeContext

def calibrator_getAllSubscriptionResults():
    return _libtraci.calibrator_getAllSubscriptionResults()
calibrator_getAllSubscriptionResults = _libtraci.calibrator_getAllSubscriptionResults

def calibrator_getSubscriptionResults(objectID):
    return _libtraci.calibrator_getSubscriptionResults(objectID)
calibrator_getSubscriptionResults = _libtraci.calibrator_getSubscriptionResults

def calibrator_getAllContextSubscriptionResults():
    return _libtraci.calibrator_getAllContextSubscriptionResults()
calibrator_getAllContextSubscriptionResults = _libtraci.calibrator_getAllContextSubscriptionResults

def calibrator_getContextSubscriptionResults(objectID):
    return _libtraci.calibrator_getContextSubscriptionResults(objectID)
calibrator_getContextSubscriptionResults = _libtraci.calibrator_getContextSubscriptionResults

def calibrator_subscribeParameterWithKey(*args, **kwargs):
    return _libtraci.calibrator_subscribeParameterWithKey(*args, **kwargs)
calibrator_subscribeParameterWithKey = _libtraci.calibrator_subscribeParameterWithKey

def calibrator_setFlow(*args, **kwargs):
    return _libtraci.calibrator_setFlow(*args, **kwargs)
calibrator_setFlow = _libtraci.calibrator_setFlow

class busstop(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, busstop, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, busstop, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        getLaneID = staticmethod(_libtraci.busstop_getLaneID)
    else:
        getLaneID = _libtraci.busstop_getLaneID
    if _newclass:
        getStartPos = staticmethod(_libtraci.busstop_getStartPos)
    else:
        getStartPos = _libtraci.busstop_getStartPos
    if _newclass:
        getEndPos = staticmethod(_libtraci.busstop_getEndPos)
    else:
        getEndPos = _libtraci.busstop_getEndPos
    if _newclass:
        getName = staticmethod(_libtraci.busstop_getName)
    else:
        getName = _libtraci.busstop_getName
    if _newclass:
        getVehicleCount = staticmethod(_libtraci.busstop_getVehicleCount)
    else:
        getVehicleCount = _libtraci.busstop_getVehicleCount
    if _newclass:
        getVehicleIDs = staticmethod(_libtraci.busstop_getVehicleIDs)
    else:
        getVehicleIDs = _libtraci.busstop_getVehicleIDs
    if _newclass:
        getPersonCount = staticmethod(_libtraci.busstop_getPersonCount)
    else:
        getPersonCount = _libtraci.busstop_getPersonCount
    if _newclass:
        getPersonIDs = staticmethod(_libtraci.busstop_getPersonIDs)
    else:
        getPersonIDs = _libtraci.busstop_getPersonIDs
    if _newclass:
        getIDList = staticmethod(_libtraci.busstop_getIDList)
    else:
        getIDList = _libtraci.busstop_getIDList
    if _newclass:
        getIDCount = staticmethod(_libtraci.busstop_getIDCount)
    else:
        getIDCount = _libtraci.busstop_getIDCount
    if _newclass:
        getParameter = staticmethod(_libtraci.busstop_getParameter)
    else:
        getParameter = _libtraci.busstop_getParameter
    if _newclass:
        getParameterWithKey = staticmethod(_libtraci.busstop_getParameterWithKey)
    else:
        getParameterWithKey = _libtraci.busstop_getParameterWithKey
    if _newclass:
        setParameter = staticmethod(_libtraci.busstop_setParameter)
    else:
        setParameter = _libtraci.busstop_setParameter
    if _newclass:
        subscribe = staticmethod(_libtraci.busstop_subscribe)
    else:
        subscribe = _libtraci.busstop_subscribe
    if _newclass:
        unsubscribe = staticmethod(_libtraci.busstop_unsubscribe)
    else:
        unsubscribe = _libtraci.busstop_unsubscribe
    if _newclass:
        subscribeContext = staticmethod(_libtraci.busstop_subscribeContext)
    else:
        subscribeContext = _libtraci.busstop_subscribeContext
    if _newclass:
        unsubscribeContext = staticmethod(_libtraci.busstop_unsubscribeContext)
    else:
        unsubscribeContext = _libtraci.busstop_unsubscribeContext
    if _newclass:
        getAllSubscriptionResults = staticmethod(_libtraci.busstop_getAllSubscriptionResults)
    else:
        getAllSubscriptionResults = _libtraci.busstop_getAllSubscriptionResults
    if _newclass:
        getSubscriptionResults = staticmethod(_libtraci.busstop_getSubscriptionResults)
    else:
        getSubscriptionResults = _libtraci.busstop_getSubscriptionResults
    if _newclass:
        getAllContextSubscriptionResults = staticmethod(_libtraci.busstop_getAllContextSubscriptionResults)
    else:
        getAllContextSubscriptionResults = _libtraci.busstop_getAllContextSubscriptionResults
    if _newclass:
        getContextSubscriptionResults = staticmethod(_libtraci.busstop_getContextSubscriptionResults)
    else:
        getContextSubscriptionResults = _libtraci.busstop_getContextSubscriptionResults
    if _newclass:
        subscribeParameterWithKey = staticmethod(_libtraci.busstop_subscribeParameterWithKey)
    else:
        subscribeParameterWithKey = _libtraci.busstop_subscribeParameterWithKey
    __swig_destroy__ = _libtraci.delete_busstop
    __del__ = lambda self: None
busstop_swigregister = _libtraci.busstop_swigregister
busstop_swigregister(busstop)

def busstop_getLaneID(stopID):
    return _libtraci.busstop_getLaneID(stopID)
busstop_getLaneID = _libtraci.busstop_getLaneID

def busstop_getStartPos(stopID):
    return _libtraci.busstop_getStartPos(stopID)
busstop_getStartPos = _libtraci.busstop_getStartPos

def busstop_getEndPos(stopID):
    return _libtraci.busstop_getEndPos(stopID)
busstop_getEndPos = _libtraci.busstop_getEndPos

def busstop_getName(stopID):
    return _libtraci.busstop_getName(stopID)
busstop_getName = _libtraci.busstop_getName

def busstop_getVehicleCount(stopID):
    return _libtraci.busstop_getVehicleCount(stopID)
busstop_getVehicleCount = _libtraci.busstop_getVehicleCount

def busstop_getVehicleIDs(stopID):
    return _libtraci.busstop_getVehicleIDs(stopID)
busstop_getVehicleIDs = _libtraci.busstop_getVehicleIDs

def busstop_getPersonCount(stopID):
    return _libtraci.busstop_getPersonCount(stopID)
busstop_getPersonCount = _libtraci.busstop_getPersonCount

def busstop_getPersonIDs(stopID):
    return _libtraci.busstop_getPersonIDs(stopID)
busstop_getPersonIDs = _libtraci.busstop_getPersonIDs

def busstop_getIDList():
    return _libtraci.busstop_getIDList()
busstop_getIDList = _libtraci.busstop_getIDList

def busstop_getIDCount():
    return _libtraci.busstop_getIDCount()
busstop_getIDCount = _libtraci.busstop_getIDCount

def busstop_getParameter(objectID, param):
    return _libtraci.busstop_getParameter(objectID, param)
busstop_getParameter = _libtraci.busstop_getParameter

def busstop_getParameterWithKey(objectID, key):
    return _libtraci.busstop_getParameterWithKey(objectID, key)
busstop_getParameterWithKey = _libtraci.busstop_getParameterWithKey

def busstop_setParameter(objectID, param, value):
    return _libtraci.busstop_setParameter(objectID, param, value)
busstop_setParameter = _libtraci.busstop_setParameter

def busstop_subscribe(*args, **kwargs):
    return _libtraci.busstop_subscribe(*args, **kwargs)
busstop_subscribe = _libtraci.busstop_subscribe

def busstop_unsubscribe(objectID):
    return _libtraci.busstop_unsubscribe(objectID)
busstop_unsubscribe = _libtraci.busstop_unsubscribe

def busstop_subscribeContext(*args, **kwargs):
    return _libtraci.busstop_subscribeContext(*args, **kwargs)
busstop_subscribeContext = _libtraci.busstop_subscribeContext

def busstop_unsubscribeContext(objectID, domain, dist):
    return _libtraci.busstop_unsubscribeContext(objectID, domain, dist)
busstop_unsubscribeContext = _libtraci.busstop_unsubscribeContext

def busstop_getAllSubscriptionResults():
    return _libtraci.busstop_getAllSubscriptionResults()
busstop_getAllSubscriptionResults = _libtraci.busstop_getAllSubscriptionResults

def busstop_getSubscriptionResults(objectID):
    return _libtraci.busstop_getSubscriptionResults(objectID)
busstop_getSubscriptionResults = _libtraci.busstop_getSubscriptionResults

def busstop_getAllContextSubscriptionResults():
    return _libtraci.busstop_getAllContextSubscriptionResults()
busstop_getAllContextSubscriptionResults = _libtraci.busstop_getAllContextSubscriptionResults

def busstop_getContextSubscriptionResults(objectID):
    return _libtraci.busstop_getContextSubscriptionResults(objectID)
busstop_getContextSubscriptionResults = _libtraci.busstop_getContextSubscriptionResults

def busstop_subscribeParameterWithKey(*args, **kwargs):
    return _libtraci.busstop_subscribeParameterWithKey(*args, **kwargs)
busstop_subscribeParameterWithKey = _libtraci.busstop_subscribeParameterWithKey

class parkingarea(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, parkingarea, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, parkingarea, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        getLaneID = staticmethod(_libtraci.parkingarea_getLaneID)
    else:
        getLaneID = _libtraci.parkingarea_getLaneID
    if _newclass:
        getStartPos = staticmethod(_libtraci.parkingarea_getStartPos)
    else:
        getStartPos = _libtraci.parkingarea_getStartPos
    if _newclass:
        getEndPos = staticmethod(_libtraci.parkingarea_getEndPos)
    else:
        getEndPos = _libtraci.parkingarea_getEndPos
    if _newclass:
        getName = staticmethod(_libtraci.parkingarea_getName)
    else:
        getName = _libtraci.parkingarea_getName
    if _newclass:
        getVehicleCount = staticmethod(_libtraci.parkingarea_getVehicleCount)
    else:
        getVehicleCount = _libtraci.parkingarea_getVehicleCount
    if _newclass:
        getVehicleIDs = staticmethod(_libtraci.parkingarea_getVehicleIDs)
    else:
        getVehicleIDs = _libtraci.parkingarea_getVehicleIDs
    if _newclass:
        getIDList = staticmethod(_libtraci.parkingarea_getIDList)
    else:
        getIDList = _libtraci.parkingarea_getIDList
    if _newclass:
        getIDCount = staticmethod(_libtraci.parkingarea_getIDCount)
    else:
        getIDCount = _libtraci.parkingarea_getIDCount
    if _newclass:
        getParameter = staticmethod(_libtraci.parkingarea_getParameter)
    else:
        getParameter = _libtraci.parkingarea_getParameter
    if _newclass:
        getParameterWithKey = staticmethod(_libtraci.parkingarea_getParameterWithKey)
    else:
        getParameterWithKey = _libtraci.parkingarea_getParameterWithKey
    if _newclass:
        setParameter = staticmethod(_libtraci.parkingarea_setParameter)
    else:
        setParameter = _libtraci.parkingarea_setParameter
    if _newclass:
        subscribe = staticmethod(_libtraci.parkingarea_subscribe)
    else:
        subscribe = _libtraci.parkingarea_subscribe
    if _newclass:
        unsubscribe = staticmethod(_libtraci.parkingarea_unsubscribe)
    else:
        unsubscribe = _libtraci.parkingarea_unsubscribe
    if _newclass:
        subscribeContext = staticmethod(_libtraci.parkingarea_subscribeContext)
    else:
        subscribeContext = _libtraci.parkingarea_subscribeContext
    if _newclass:
        unsubscribeContext = staticmethod(_libtraci.parkingarea_unsubscribeContext)
    else:
        unsubscribeContext = _libtraci.parkingarea_unsubscribeContext
    if _newclass:
        getAllSubscriptionResults = staticmethod(_libtraci.parkingarea_getAllSubscriptionResults)
    else:
        getAllSubscriptionResults = _libtraci.parkingarea_getAllSubscriptionResults
    if _newclass:
        getSubscriptionResults = staticmethod(_libtraci.parkingarea_getSubscriptionResults)
    else:
        getSubscriptionResults = _libtraci.parkingarea_getSubscriptionResults
    if _newclass:
        getAllContextSubscriptionResults = staticmethod(_libtraci.parkingarea_getAllContextSubscriptionResults)
    else:
        getAllContextSubscriptionResults = _libtraci.parkingarea_getAllContextSubscriptionResults
    if _newclass:
        getContextSubscriptionResults = staticmethod(_libtraci.parkingarea_getContextSubscriptionResults)
    else:
        getContextSubscriptionResults = _libtraci.parkingarea_getContextSubscriptionResults
    if _newclass:
        subscribeParameterWithKey = staticmethod(_libtraci.parkingarea_subscribeParameterWithKey)
    else:
        subscribeParameterWithKey = _libtraci.parkingarea_subscribeParameterWithKey
    __swig_destroy__ = _libtraci.delete_parkingarea
    __del__ = lambda self: None
parkingarea_swigregister = _libtraci.parkingarea_swigregister
parkingarea_swigregister(parkingarea)

def parkingarea_getLaneID(stopID):
    return _libtraci.parkingarea_getLaneID(stopID)
parkingarea_getLaneID = _libtraci.parkingarea_getLaneID

def parkingarea_getStartPos(stopID):
    return _libtraci.parkingarea_getStartPos(stopID)
parkingarea_getStartPos = _libtraci.parkingarea_getStartPos

def parkingarea_getEndPos(stopID):
    return _libtraci.parkingarea_getEndPos(stopID)
parkingarea_getEndPos = _libtraci.parkingarea_getEndPos

def parkingarea_getName(stopID):
    return _libtraci.parkingarea_getName(stopID)
parkingarea_getName = _libtraci.parkingarea_getName

def parkingarea_getVehicleCount(stopID):
    return _libtraci.parkingarea_getVehicleCount(stopID)
parkingarea_getVehicleCount = _libtraci.parkingarea_getVehicleCount

def parkingarea_getVehicleIDs(stopID):
    return _libtraci.parkingarea_getVehicleIDs(stopID)
parkingarea_getVehicleIDs = _libtraci.parkingarea_getVehicleIDs

def parkingarea_getIDList():
    return _libtraci.parkingarea_getIDList()
parkingarea_getIDList = _libtraci.parkingarea_getIDList

def parkingarea_getIDCount():
    return _libtraci.parkingarea_getIDCount()
parkingarea_getIDCount = _libtraci.parkingarea_getIDCount

def parkingarea_getParameter(objectID, param):
    return _libtraci.parkingarea_getParameter(objectID, param)
parkingarea_getParameter = _libtraci.parkingarea_getParameter

def parkingarea_getParameterWithKey(objectID, key):
    return _libtraci.parkingarea_getParameterWithKey(objectID, key)
parkingarea_getParameterWithKey = _libtraci.parkingarea_getParameterWithKey

def parkingarea_setParameter(objectID, param, value):
    return _libtraci.parkingarea_setParameter(objectID, param, value)
parkingarea_setParameter = _libtraci.parkingarea_setParameter

def parkingarea_subscribe(*args, **kwargs):
    return _libtraci.parkingarea_subscribe(*args, **kwargs)
parkingarea_subscribe = _libtraci.parkingarea_subscribe

def parkingarea_unsubscribe(objectID):
    return _libtraci.parkingarea_unsubscribe(objectID)
parkingarea_unsubscribe = _libtraci.parkingarea_unsubscribe

def parkingarea_subscribeContext(*args, **kwargs):
    return _libtraci.parkingarea_subscribeContext(*args, **kwargs)
parkingarea_subscribeContext = _libtraci.parkingarea_subscribeContext

def parkingarea_unsubscribeContext(objectID, domain, dist):
    return _libtraci.parkingarea_unsubscribeContext(objectID, domain, dist)
parkingarea_unsubscribeContext = _libtraci.parkingarea_unsubscribeContext

def parkingarea_getAllSubscriptionResults():
    return _libtraci.parkingarea_getAllSubscriptionResults()
parkingarea_getAllSubscriptionResults = _libtraci.parkingarea_getAllSubscriptionResults

def parkingarea_getSubscriptionResults(objectID):
    return _libtraci.parkingarea_getSubscriptionResults(objectID)
parkingarea_getSubscriptionResults = _libtraci.parkingarea_getSubscriptionResults

def parkingarea_getAllContextSubscriptionResults():
    return _libtraci.parkingarea_getAllContextSubscriptionResults()
parkingarea_getAllContextSubscriptionResults = _libtraci.parkingarea_getAllContextSubscriptionResults

def parkingarea_getContextSubscriptionResults(objectID):
    return _libtraci.parkingarea_getContextSubscriptionResults(objectID)
parkingarea_getContextSubscriptionResults = _libtraci.parkingarea_getContextSubscriptionResults

def parkingarea_subscribeParameterWithKey(*args, **kwargs):
    return _libtraci.parkingarea_subscribeParameterWithKey(*args, **kwargs)
parkingarea_subscribeParameterWithKey = _libtraci.parkingarea_subscribeParameterWithKey

class chargingstation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, chargingstation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, chargingstation, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        getLaneID = staticmethod(_libtraci.chargingstation_getLaneID)
    else:
        getLaneID = _libtraci.chargingstation_getLaneID
    if _newclass:
        getStartPos = staticmethod(_libtraci.chargingstation_getStartPos)
    else:
        getStartPos = _libtraci.chargingstation_getStartPos
    if _newclass:
        getEndPos = staticmethod(_libtraci.chargingstation_getEndPos)
    else:
        getEndPos = _libtraci.chargingstation_getEndPos
    if _newclass:
        getName = staticmethod(_libtraci.chargingstation_getName)
    else:
        getName = _libtraci.chargingstation_getName
    if _newclass:
        getVehicleCount = staticmethod(_libtraci.chargingstation_getVehicleCount)
    else:
        getVehicleCount = _libtraci.chargingstation_getVehicleCount
    if _newclass:
        getVehicleIDs = staticmethod(_libtraci.chargingstation_getVehicleIDs)
    else:
        getVehicleIDs = _libtraci.chargingstation_getVehicleIDs
    if _newclass:
        getIDList = staticmethod(_libtraci.chargingstation_getIDList)
    else:
        getIDList = _libtraci.chargingstation_getIDList
    if _newclass:
        getIDCount = staticmethod(_libtraci.chargingstation_getIDCount)
    else:
        getIDCount = _libtraci.chargingstation_getIDCount
    if _newclass:
        getParameter = staticmethod(_libtraci.chargingstation_getParameter)
    else:
        getParameter = _libtraci.chargingstation_getParameter
    if _newclass:
        getParameterWithKey = staticmethod(_libtraci.chargingstation_getParameterWithKey)
    else:
        getParameterWithKey = _libtraci.chargingstation_getParameterWithKey
    if _newclass:
        setParameter = staticmethod(_libtraci.chargingstation_setParameter)
    else:
        setParameter = _libtraci.chargingstation_setParameter
    if _newclass:
        subscribe = staticmethod(_libtraci.chargingstation_subscribe)
    else:
        subscribe = _libtraci.chargingstation_subscribe
    if _newclass:
        unsubscribe = staticmethod(_libtraci.chargingstation_unsubscribe)
    else:
        unsubscribe = _libtraci.chargingstation_unsubscribe
    if _newclass:
        subscribeContext = staticmethod(_libtraci.chargingstation_subscribeContext)
    else:
        subscribeContext = _libtraci.chargingstation_subscribeContext
    if _newclass:
        unsubscribeContext = staticmethod(_libtraci.chargingstation_unsubscribeContext)
    else:
        unsubscribeContext = _libtraci.chargingstation_unsubscribeContext
    if _newclass:
        getAllSubscriptionResults = staticmethod(_libtraci.chargingstation_getAllSubscriptionResults)
    else:
        getAllSubscriptionResults = _libtraci.chargingstation_getAllSubscriptionResults
    if _newclass:
        getSubscriptionResults = staticmethod(_libtraci.chargingstation_getSubscriptionResults)
    else:
        getSubscriptionResults = _libtraci.chargingstation_getSubscriptionResults
    if _newclass:
        getAllContextSubscriptionResults = staticmethod(_libtraci.chargingstation_getAllContextSubscriptionResults)
    else:
        getAllContextSubscriptionResults = _libtraci.chargingstation_getAllContextSubscriptionResults
    if _newclass:
        getContextSubscriptionResults = staticmethod(_libtraci.chargingstation_getContextSubscriptionResults)
    else:
        getContextSubscriptionResults = _libtraci.chargingstation_getContextSubscriptionResults
    if _newclass:
        subscribeParameterWithKey = staticmethod(_libtraci.chargingstation_subscribeParameterWithKey)
    else:
        subscribeParameterWithKey = _libtraci.chargingstation_subscribeParameterWithKey
    __swig_destroy__ = _libtraci.delete_chargingstation
    __del__ = lambda self: None
chargingstation_swigregister = _libtraci.chargingstation_swigregister
chargingstation_swigregister(chargingstation)

def chargingstation_getLaneID(stopID):
    return _libtraci.chargingstation_getLaneID(stopID)
chargingstation_getLaneID = _libtraci.chargingstation_getLaneID

def chargingstation_getStartPos(stopID):
    return _libtraci.chargingstation_getStartPos(stopID)
chargingstation_getStartPos = _libtraci.chargingstation_getStartPos

def chargingstation_getEndPos(stopID):
    return _libtraci.chargingstation_getEndPos(stopID)
chargingstation_getEndPos = _libtraci.chargingstation_getEndPos

def chargingstation_getName(stopID):
    return _libtraci.chargingstation_getName(stopID)
chargingstation_getName = _libtraci.chargingstation_getName

def chargingstation_getVehicleCount(stopID):
    return _libtraci.chargingstation_getVehicleCount(stopID)
chargingstation_getVehicleCount = _libtraci.chargingstation_getVehicleCount

def chargingstation_getVehicleIDs(stopID):
    return _libtraci.chargingstation_getVehicleIDs(stopID)
chargingstation_getVehicleIDs = _libtraci.chargingstation_getVehicleIDs

def chargingstation_getIDList():
    return _libtraci.chargingstation_getIDList()
chargingstation_getIDList = _libtraci.chargingstation_getIDList

def chargingstation_getIDCount():
    return _libtraci.chargingstation_getIDCount()
chargingstation_getIDCount = _libtraci.chargingstation_getIDCount

def chargingstation_getParameter(objectID, param):
    return _libtraci.chargingstation_getParameter(objectID, param)
chargingstation_getParameter = _libtraci.chargingstation_getParameter

def chargingstation_getParameterWithKey(objectID, key):
    return _libtraci.chargingstation_getParameterWithKey(objectID, key)
chargingstation_getParameterWithKey = _libtraci.chargingstation_getParameterWithKey

def chargingstation_setParameter(objectID, param, value):
    return _libtraci.chargingstation_setParameter(objectID, param, value)
chargingstation_setParameter = _libtraci.chargingstation_setParameter

def chargingstation_subscribe(*args, **kwargs):
    return _libtraci.chargingstation_subscribe(*args, **kwargs)
chargingstation_subscribe = _libtraci.chargingstation_subscribe

def chargingstation_unsubscribe(objectID):
    return _libtraci.chargingstation_unsubscribe(objectID)
chargingstation_unsubscribe = _libtraci.chargingstation_unsubscribe

def chargingstation_subscribeContext(*args, **kwargs):
    return _libtraci.chargingstation_subscribeContext(*args, **kwargs)
chargingstation_subscribeContext = _libtraci.chargingstation_subscribeContext

def chargingstation_unsubscribeContext(objectID, domain, dist):
    return _libtraci.chargingstation_unsubscribeContext(objectID, domain, dist)
chargingstation_unsubscribeContext = _libtraci.chargingstation_unsubscribeContext

def chargingstation_getAllSubscriptionResults():
    return _libtraci.chargingstation_getAllSubscriptionResults()
chargingstation_getAllSubscriptionResults = _libtraci.chargingstation_getAllSubscriptionResults

def chargingstation_getSubscriptionResults(objectID):
    return _libtraci.chargingstation_getSubscriptionResults(objectID)
chargingstation_getSubscriptionResults = _libtraci.chargingstation_getSubscriptionResults

def chargingstation_getAllContextSubscriptionResults():
    return _libtraci.chargingstation_getAllContextSubscriptionResults()
chargingstation_getAllContextSubscriptionResults = _libtraci.chargingstation_getAllContextSubscriptionResults

def chargingstation_getContextSubscriptionResults(objectID):
    return _libtraci.chargingstation_getContextSubscriptionResults(objectID)
chargingstation_getContextSubscriptionResults = _libtraci.chargingstation_getContextSubscriptionResults

def chargingstation_subscribeParameterWithKey(*args, **kwargs):
    return _libtraci.chargingstation_subscribeParameterWithKey(*args, **kwargs)
chargingstation_subscribeParameterWithKey = _libtraci.chargingstation_subscribeParameterWithKey

class overheadwire(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, overheadwire, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, overheadwire, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        getLaneID = staticmethod(_libtraci.overheadwire_getLaneID)
    else:
        getLaneID = _libtraci.overheadwire_getLaneID
    if _newclass:
        getStartPos = staticmethod(_libtraci.overheadwire_getStartPos)
    else:
        getStartPos = _libtraci.overheadwire_getStartPos
    if _newclass:
        getEndPos = staticmethod(_libtraci.overheadwire_getEndPos)
    else:
        getEndPos = _libtraci.overheadwire_getEndPos
    if _newclass:
        getName = staticmethod(_libtraci.overheadwire_getName)
    else:
        getName = _libtraci.overheadwire_getName
    if _newclass:
        getVehicleCount = staticmethod(_libtraci.overheadwire_getVehicleCount)
    else:
        getVehicleCount = _libtraci.overheadwire_getVehicleCount
    if _newclass:
        getVehicleIDs = staticmethod(_libtraci.overheadwire_getVehicleIDs)
    else:
        getVehicleIDs = _libtraci.overheadwire_getVehicleIDs
    if _newclass:
        getIDList = staticmethod(_libtraci.overheadwire_getIDList)
    else:
        getIDList = _libtraci.overheadwire_getIDList
    if _newclass:
        getIDCount = staticmethod(_libtraci.overheadwire_getIDCount)
    else:
        getIDCount = _libtraci.overheadwire_getIDCount
    if _newclass:
        getParameter = staticmethod(_libtraci.overheadwire_getParameter)
    else:
        getParameter = _libtraci.overheadwire_getParameter
    if _newclass:
        getParameterWithKey = staticmethod(_libtraci.overheadwire_getParameterWithKey)
    else:
        getParameterWithKey = _libtraci.overheadwire_getParameterWithKey
    if _newclass:
        setParameter = staticmethod(_libtraci.overheadwire_setParameter)
    else:
        setParameter = _libtraci.overheadwire_setParameter
    if _newclass:
        subscribe = staticmethod(_libtraci.overheadwire_subscribe)
    else:
        subscribe = _libtraci.overheadwire_subscribe
    if _newclass:
        unsubscribe = staticmethod(_libtraci.overheadwire_unsubscribe)
    else:
        unsubscribe = _libtraci.overheadwire_unsubscribe
    if _newclass:
        subscribeContext = staticmethod(_libtraci.overheadwire_subscribeContext)
    else:
        subscribeContext = _libtraci.overheadwire_subscribeContext
    if _newclass:
        unsubscribeContext = staticmethod(_libtraci.overheadwire_unsubscribeContext)
    else:
        unsubscribeContext = _libtraci.overheadwire_unsubscribeContext
    if _newclass:
        getAllSubscriptionResults = staticmethod(_libtraci.overheadwire_getAllSubscriptionResults)
    else:
        getAllSubscriptionResults = _libtraci.overheadwire_getAllSubscriptionResults
    if _newclass:
        getSubscriptionResults = staticmethod(_libtraci.overheadwire_getSubscriptionResults)
    else:
        getSubscriptionResults = _libtraci.overheadwire_getSubscriptionResults
    if _newclass:
        getAllContextSubscriptionResults = staticmethod(_libtraci.overheadwire_getAllContextSubscriptionResults)
    else:
        getAllContextSubscriptionResults = _libtraci.overheadwire_getAllContextSubscriptionResults
    if _newclass:
        getContextSubscriptionResults = staticmethod(_libtraci.overheadwire_getContextSubscriptionResults)
    else:
        getContextSubscriptionResults = _libtraci.overheadwire_getContextSubscriptionResults
    if _newclass:
        subscribeParameterWithKey = staticmethod(_libtraci.overheadwire_subscribeParameterWithKey)
    else:
        subscribeParameterWithKey = _libtraci.overheadwire_subscribeParameterWithKey
    __swig_destroy__ = _libtraci.delete_overheadwire
    __del__ = lambda self: None
overheadwire_swigregister = _libtraci.overheadwire_swigregister
overheadwire_swigregister(overheadwire)

def overheadwire_getLaneID(stopID):
    return _libtraci.overheadwire_getLaneID(stopID)
overheadwire_getLaneID = _libtraci.overheadwire_getLaneID

def overheadwire_getStartPos(stopID):
    return _libtraci.overheadwire_getStartPos(stopID)
overheadwire_getStartPos = _libtraci.overheadwire_getStartPos

def overheadwire_getEndPos(stopID):
    return _libtraci.overheadwire_getEndPos(stopID)
overheadwire_getEndPos = _libtraci.overheadwire_getEndPos

def overheadwire_getName(stopID):
    return _libtraci.overheadwire_getName(stopID)
overheadwire_getName = _libtraci.overheadwire_getName

def overheadwire_getVehicleCount(stopID):
    return _libtraci.overheadwire_getVehicleCount(stopID)
overheadwire_getVehicleCount = _libtraci.overheadwire_getVehicleCount

def overheadwire_getVehicleIDs(stopID):
    return _libtraci.overheadwire_getVehicleIDs(stopID)
overheadwire_getVehicleIDs = _libtraci.overheadwire_getVehicleIDs

def overheadwire_getIDList():
    return _libtraci.overheadwire_getIDList()
overheadwire_getIDList = _libtraci.overheadwire_getIDList

def overheadwire_getIDCount():
    return _libtraci.overheadwire_getIDCount()
overheadwire_getIDCount = _libtraci.overheadwire_getIDCount

def overheadwire_getParameter(objectID, param):
    return _libtraci.overheadwire_getParameter(objectID, param)
overheadwire_getParameter = _libtraci.overheadwire_getParameter

def overheadwire_getParameterWithKey(objectID, key):
    return _libtraci.overheadwire_getParameterWithKey(objectID, key)
overheadwire_getParameterWithKey = _libtraci.overheadwire_getParameterWithKey

def overheadwire_setParameter(objectID, param, value):
    return _libtraci.overheadwire_setParameter(objectID, param, value)
overheadwire_setParameter = _libtraci.overheadwire_setParameter

def overheadwire_subscribe(*args, **kwargs):
    return _libtraci.overheadwire_subscribe(*args, **kwargs)
overheadwire_subscribe = _libtraci.overheadwire_subscribe

def overheadwire_unsubscribe(objectID):
    return _libtraci.overheadwire_unsubscribe(objectID)
overheadwire_unsubscribe = _libtraci.overheadwire_unsubscribe

def overheadwire_subscribeContext(*args, **kwargs):
    return _libtraci.overheadwire_subscribeContext(*args, **kwargs)
overheadwire_subscribeContext = _libtraci.overheadwire_subscribeContext

def overheadwire_unsubscribeContext(objectID, domain, dist):
    return _libtraci.overheadwire_unsubscribeContext(objectID, domain, dist)
overheadwire_unsubscribeContext = _libtraci.overheadwire_unsubscribeContext

def overheadwire_getAllSubscriptionResults():
    return _libtraci.overheadwire_getAllSubscriptionResults()
overheadwire_getAllSubscriptionResults = _libtraci.overheadwire_getAllSubscriptionResults

def overheadwire_getSubscriptionResults(objectID):
    return _libtraci.overheadwire_getSubscriptionResults(objectID)
overheadwire_getSubscriptionResults = _libtraci.overheadwire_getSubscriptionResults

def overheadwire_getAllContextSubscriptionResults():
    return _libtraci.overheadwire_getAllContextSubscriptionResults()
overheadwire_getAllContextSubscriptionResults = _libtraci.overheadwire_getAllContextSubscriptionResults

def overheadwire_getContextSubscriptionResults(objectID):
    return _libtraci.overheadwire_getContextSubscriptionResults(objectID)
overheadwire_getContextSubscriptionResults = _libtraci.overheadwire_getContextSubscriptionResults

def overheadwire_subscribeParameterWithKey(*args, **kwargs):
    return _libtraci.overheadwire_subscribeParameterWithKey(*args, **kwargs)
overheadwire_subscribeParameterWithKey = _libtraci.overheadwire_subscribeParameterWithKey

class rerouter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rerouter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rerouter, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        getIDList = staticmethod(_libtraci.rerouter_getIDList)
    else:
        getIDList = _libtraci.rerouter_getIDList
    if _newclass:
        getIDCount = staticmethod(_libtraci.rerouter_getIDCount)
    else:
        getIDCount = _libtraci.rerouter_getIDCount
    if _newclass:
        getParameter = staticmethod(_libtraci.rerouter_getParameter)
    else:
        getParameter = _libtraci.rerouter_getParameter
    if _newclass:
        getParameterWithKey = staticmethod(_libtraci.rerouter_getParameterWithKey)
    else:
        getParameterWithKey = _libtraci.rerouter_getParameterWithKey
    if _newclass:
        setParameter = staticmethod(_libtraci.rerouter_setParameter)
    else:
        setParameter = _libtraci.rerouter_setParameter
    if _newclass:
        subscribe = staticmethod(_libtraci.rerouter_subscribe)
    else:
        subscribe = _libtraci.rerouter_subscribe
    if _newclass:
        unsubscribe = staticmethod(_libtraci.rerouter_unsubscribe)
    else:
        unsubscribe = _libtraci.rerouter_unsubscribe
    if _newclass:
        subscribeContext = staticmethod(_libtraci.rerouter_subscribeContext)
    else:
        subscribeContext = _libtraci.rerouter_subscribeContext
    if _newclass:
        unsubscribeContext = staticmethod(_libtraci.rerouter_unsubscribeContext)
    else:
        unsubscribeContext = _libtraci.rerouter_unsubscribeContext
    if _newclass:
        getAllSubscriptionResults = staticmethod(_libtraci.rerouter_getAllSubscriptionResults)
    else:
        getAllSubscriptionResults = _libtraci.rerouter_getAllSubscriptionResults
    if _newclass:
        getSubscriptionResults = staticmethod(_libtraci.rerouter_getSubscriptionResults)
    else:
        getSubscriptionResults = _libtraci.rerouter_getSubscriptionResults
    if _newclass:
        getAllContextSubscriptionResults = staticmethod(_libtraci.rerouter_getAllContextSubscriptionResults)
    else:
        getAllContextSubscriptionResults = _libtraci.rerouter_getAllContextSubscriptionResults
    if _newclass:
        getContextSubscriptionResults = staticmethod(_libtraci.rerouter_getContextSubscriptionResults)
    else:
        getContextSubscriptionResults = _libtraci.rerouter_getContextSubscriptionResults
    if _newclass:
        subscribeParameterWithKey = staticmethod(_libtraci.rerouter_subscribeParameterWithKey)
    else:
        subscribeParameterWithKey = _libtraci.rerouter_subscribeParameterWithKey
    __swig_destroy__ = _libtraci.delete_rerouter
    __del__ = lambda self: None
rerouter_swigregister = _libtraci.rerouter_swigregister
rerouter_swigregister(rerouter)

def rerouter_getIDList():
    return _libtraci.rerouter_getIDList()
rerouter_getIDList = _libtraci.rerouter_getIDList

def rerouter_getIDCount():
    return _libtraci.rerouter_getIDCount()
rerouter_getIDCount = _libtraci.rerouter_getIDCount

def rerouter_getParameter(objectID, param):
    return _libtraci.rerouter_getParameter(objectID, param)
rerouter_getParameter = _libtraci.rerouter_getParameter

def rerouter_getParameterWithKey(objectID, key):
    return _libtraci.rerouter_getParameterWithKey(objectID, key)
rerouter_getParameterWithKey = _libtraci.rerouter_getParameterWithKey

def rerouter_setParameter(objectID, param, value):
    return _libtraci.rerouter_setParameter(objectID, param, value)
rerouter_setParameter = _libtraci.rerouter_setParameter

def rerouter_subscribe(*args, **kwargs):
    return _libtraci.rerouter_subscribe(*args, **kwargs)
rerouter_subscribe = _libtraci.rerouter_subscribe

def rerouter_unsubscribe(objectID):
    return _libtraci.rerouter_unsubscribe(objectID)
rerouter_unsubscribe = _libtraci.rerouter_unsubscribe

def rerouter_subscribeContext(*args, **kwargs):
    return _libtraci.rerouter_subscribeContext(*args, **kwargs)
rerouter_subscribeContext = _libtraci.rerouter_subscribeContext

def rerouter_unsubscribeContext(objectID, domain, dist):
    return _libtraci.rerouter_unsubscribeContext(objectID, domain, dist)
rerouter_unsubscribeContext = _libtraci.rerouter_unsubscribeContext

def rerouter_getAllSubscriptionResults():
    return _libtraci.rerouter_getAllSubscriptionResults()
rerouter_getAllSubscriptionResults = _libtraci.rerouter_getAllSubscriptionResults

def rerouter_getSubscriptionResults(objectID):
    return _libtraci.rerouter_getSubscriptionResults(objectID)
rerouter_getSubscriptionResults = _libtraci.rerouter_getSubscriptionResults

def rerouter_getAllContextSubscriptionResults():
    return _libtraci.rerouter_getAllContextSubscriptionResults()
rerouter_getAllContextSubscriptionResults = _libtraci.rerouter_getAllContextSubscriptionResults

def rerouter_getContextSubscriptionResults(objectID):
    return _libtraci.rerouter_getContextSubscriptionResults(objectID)
rerouter_getContextSubscriptionResults = _libtraci.rerouter_getContextSubscriptionResults

def rerouter_subscribeParameterWithKey(*args, **kwargs):
    return _libtraci.rerouter_subscribeParameterWithKey(*args, **kwargs)
rerouter_subscribeParameterWithKey = _libtraci.rerouter_subscribeParameterWithKey

class meandata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, meandata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, meandata, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        getIDList = staticmethod(_libtraci.meandata_getIDList)
    else:
        getIDList = _libtraci.meandata_getIDList
    if _newclass:
        getIDCount = staticmethod(_libtraci.meandata_getIDCount)
    else:
        getIDCount = _libtraci.meandata_getIDCount
    if _newclass:
        getParameter = staticmethod(_libtraci.meandata_getParameter)
    else:
        getParameter = _libtraci.meandata_getParameter
    if _newclass:
        getParameterWithKey = staticmethod(_libtraci.meandata_getParameterWithKey)
    else:
        getParameterWithKey = _libtraci.meandata_getParameterWithKey
    if _newclass:
        setParameter = staticmethod(_libtraci.meandata_setParameter)
    else:
        setParameter = _libtraci.meandata_setParameter
    if _newclass:
        subscribe = staticmethod(_libtraci.meandata_subscribe)
    else:
        subscribe = _libtraci.meandata_subscribe
    if _newclass:
        unsubscribe = staticmethod(_libtraci.meandata_unsubscribe)
    else:
        unsubscribe = _libtraci.meandata_unsubscribe
    if _newclass:
        subscribeContext = staticmethod(_libtraci.meandata_subscribeContext)
    else:
        subscribeContext = _libtraci.meandata_subscribeContext
    if _newclass:
        unsubscribeContext = staticmethod(_libtraci.meandata_unsubscribeContext)
    else:
        unsubscribeContext = _libtraci.meandata_unsubscribeContext
    if _newclass:
        getAllSubscriptionResults = staticmethod(_libtraci.meandata_getAllSubscriptionResults)
    else:
        getAllSubscriptionResults = _libtraci.meandata_getAllSubscriptionResults
    if _newclass:
        getSubscriptionResults = staticmethod(_libtraci.meandata_getSubscriptionResults)
    else:
        getSubscriptionResults = _libtraci.meandata_getSubscriptionResults
    if _newclass:
        getAllContextSubscriptionResults = staticmethod(_libtraci.meandata_getAllContextSubscriptionResults)
    else:
        getAllContextSubscriptionResults = _libtraci.meandata_getAllContextSubscriptionResults
    if _newclass:
        getContextSubscriptionResults = staticmethod(_libtraci.meandata_getContextSubscriptionResults)
    else:
        getContextSubscriptionResults = _libtraci.meandata_getContextSubscriptionResults
    if _newclass:
        subscribeParameterWithKey = staticmethod(_libtraci.meandata_subscribeParameterWithKey)
    else:
        subscribeParameterWithKey = _libtraci.meandata_subscribeParameterWithKey
    __swig_destroy__ = _libtraci.delete_meandata
    __del__ = lambda self: None
meandata_swigregister = _libtraci.meandata_swigregister
meandata_swigregister(meandata)

def meandata_getIDList():
    return _libtraci.meandata_getIDList()
meandata_getIDList = _libtraci.meandata_getIDList

def meandata_getIDCount():
    return _libtraci.meandata_getIDCount()
meandata_getIDCount = _libtraci.meandata_getIDCount

def meandata_getParameter(objectID, param):
    return _libtraci.meandata_getParameter(objectID, param)
meandata_getParameter = _libtraci.meandata_getParameter

def meandata_getParameterWithKey(objectID, key):
    return _libtraci.meandata_getParameterWithKey(objectID, key)
meandata_getParameterWithKey = _libtraci.meandata_getParameterWithKey

def meandata_setParameter(objectID, param, value):
    return _libtraci.meandata_setParameter(objectID, param, value)
meandata_setParameter = _libtraci.meandata_setParameter

def meandata_subscribe(*args, **kwargs):
    return _libtraci.meandata_subscribe(*args, **kwargs)
meandata_subscribe = _libtraci.meandata_subscribe

def meandata_unsubscribe(objectID):
    return _libtraci.meandata_unsubscribe(objectID)
meandata_unsubscribe = _libtraci.meandata_unsubscribe

def meandata_subscribeContext(*args, **kwargs):
    return _libtraci.meandata_subscribeContext(*args, **kwargs)
meandata_subscribeContext = _libtraci.meandata_subscribeContext

def meandata_unsubscribeContext(objectID, domain, dist):
    return _libtraci.meandata_unsubscribeContext(objectID, domain, dist)
meandata_unsubscribeContext = _libtraci.meandata_unsubscribeContext

def meandata_getAllSubscriptionResults():
    return _libtraci.meandata_getAllSubscriptionResults()
meandata_getAllSubscriptionResults = _libtraci.meandata_getAllSubscriptionResults

def meandata_getSubscriptionResults(objectID):
    return _libtraci.meandata_getSubscriptionResults(objectID)
meandata_getSubscriptionResults = _libtraci.meandata_getSubscriptionResults

def meandata_getAllContextSubscriptionResults():
    return _libtraci.meandata_getAllContextSubscriptionResults()
meandata_getAllContextSubscriptionResults = _libtraci.meandata_getAllContextSubscriptionResults

def meandata_getContextSubscriptionResults(objectID):
    return _libtraci.meandata_getContextSubscriptionResults(objectID)
meandata_getContextSubscriptionResults = _libtraci.meandata_getContextSubscriptionResults

def meandata_subscribeParameterWithKey(*args, **kwargs):
    return _libtraci.meandata_subscribeParameterWithKey(*args, **kwargs)
meandata_subscribeParameterWithKey = _libtraci.meandata_subscribeParameterWithKey

class variablespeedsign(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, variablespeedsign, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, variablespeedsign, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        getLanes = staticmethod(_libtraci.variablespeedsign_getLanes)
    else:
        getLanes = _libtraci.variablespeedsign_getLanes
    if _newclass:
        getIDList = staticmethod(_libtraci.variablespeedsign_getIDList)
    else:
        getIDList = _libtraci.variablespeedsign_getIDList
    if _newclass:
        getIDCount = staticmethod(_libtraci.variablespeedsign_getIDCount)
    else:
        getIDCount = _libtraci.variablespeedsign_getIDCount
    if _newclass:
        getParameter = staticmethod(_libtraci.variablespeedsign_getParameter)
    else:
        getParameter = _libtraci.variablespeedsign_getParameter
    if _newclass:
        getParameterWithKey = staticmethod(_libtraci.variablespeedsign_getParameterWithKey)
    else:
        getParameterWithKey = _libtraci.variablespeedsign_getParameterWithKey
    if _newclass:
        setParameter = staticmethod(_libtraci.variablespeedsign_setParameter)
    else:
        setParameter = _libtraci.variablespeedsign_setParameter
    if _newclass:
        subscribe = staticmethod(_libtraci.variablespeedsign_subscribe)
    else:
        subscribe = _libtraci.variablespeedsign_subscribe
    if _newclass:
        unsubscribe = staticmethod(_libtraci.variablespeedsign_unsubscribe)
    else:
        unsubscribe = _libtraci.variablespeedsign_unsubscribe
    if _newclass:
        subscribeContext = staticmethod(_libtraci.variablespeedsign_subscribeContext)
    else:
        subscribeContext = _libtraci.variablespeedsign_subscribeContext
    if _newclass:
        unsubscribeContext = staticmethod(_libtraci.variablespeedsign_unsubscribeContext)
    else:
        unsubscribeContext = _libtraci.variablespeedsign_unsubscribeContext
    if _newclass:
        getAllSubscriptionResults = staticmethod(_libtraci.variablespeedsign_getAllSubscriptionResults)
    else:
        getAllSubscriptionResults = _libtraci.variablespeedsign_getAllSubscriptionResults
    if _newclass:
        getSubscriptionResults = staticmethod(_libtraci.variablespeedsign_getSubscriptionResults)
    else:
        getSubscriptionResults = _libtraci.variablespeedsign_getSubscriptionResults
    if _newclass:
        getAllContextSubscriptionResults = staticmethod(_libtraci.variablespeedsign_getAllContextSubscriptionResults)
    else:
        getAllContextSubscriptionResults = _libtraci.variablespeedsign_getAllContextSubscriptionResults
    if _newclass:
        getContextSubscriptionResults = staticmethod(_libtraci.variablespeedsign_getContextSubscriptionResults)
    else:
        getContextSubscriptionResults = _libtraci.variablespeedsign_getContextSubscriptionResults
    if _newclass:
        subscribeParameterWithKey = staticmethod(_libtraci.variablespeedsign_subscribeParameterWithKey)
    else:
        subscribeParameterWithKey = _libtraci.variablespeedsign_subscribeParameterWithKey
    __swig_destroy__ = _libtraci.delete_variablespeedsign
    __del__ = lambda self: None
variablespeedsign_swigregister = _libtraci.variablespeedsign_swigregister
variablespeedsign_swigregister(variablespeedsign)

def variablespeedsign_getLanes(vssID):
    return _libtraci.variablespeedsign_getLanes(vssID)
variablespeedsign_getLanes = _libtraci.variablespeedsign_getLanes

def variablespeedsign_getIDList():
    return _libtraci.variablespeedsign_getIDList()
variablespeedsign_getIDList = _libtraci.variablespeedsign_getIDList

def variablespeedsign_getIDCount():
    return _libtraci.variablespeedsign_getIDCount()
variablespeedsign_getIDCount = _libtraci.variablespeedsign_getIDCount

def variablespeedsign_getParameter(objectID, param):
    return _libtraci.variablespeedsign_getParameter(objectID, param)
variablespeedsign_getParameter = _libtraci.variablespeedsign_getParameter

def variablespeedsign_getParameterWithKey(objectID, key):
    return _libtraci.variablespeedsign_getParameterWithKey(objectID, key)
variablespeedsign_getParameterWithKey = _libtraci.variablespeedsign_getParameterWithKey

def variablespeedsign_setParameter(objectID, param, value):
    return _libtraci.variablespeedsign_setParameter(objectID, param, value)
variablespeedsign_setParameter = _libtraci.variablespeedsign_setParameter

def variablespeedsign_subscribe(*args, **kwargs):
    return _libtraci.variablespeedsign_subscribe(*args, **kwargs)
variablespeedsign_subscribe = _libtraci.variablespeedsign_subscribe

def variablespeedsign_unsubscribe(objectID):
    return _libtraci.variablespeedsign_unsubscribe(objectID)
variablespeedsign_unsubscribe = _libtraci.variablespeedsign_unsubscribe

def variablespeedsign_subscribeContext(*args, **kwargs):
    return _libtraci.variablespeedsign_subscribeContext(*args, **kwargs)
variablespeedsign_subscribeContext = _libtraci.variablespeedsign_subscribeContext

def variablespeedsign_unsubscribeContext(objectID, domain, dist):
    return _libtraci.variablespeedsign_unsubscribeContext(objectID, domain, dist)
variablespeedsign_unsubscribeContext = _libtraci.variablespeedsign_unsubscribeContext

def variablespeedsign_getAllSubscriptionResults():
    return _libtraci.variablespeedsign_getAllSubscriptionResults()
variablespeedsign_getAllSubscriptionResults = _libtraci.variablespeedsign_getAllSubscriptionResults

def variablespeedsign_getSubscriptionResults(objectID):
    return _libtraci.variablespeedsign_getSubscriptionResults(objectID)
variablespeedsign_getSubscriptionResults = _libtraci.variablespeedsign_getSubscriptionResults

def variablespeedsign_getAllContextSubscriptionResults():
    return _libtraci.variablespeedsign_getAllContextSubscriptionResults()
variablespeedsign_getAllContextSubscriptionResults = _libtraci.variablespeedsign_getAllContextSubscriptionResults

def variablespeedsign_getContextSubscriptionResults(objectID):
    return _libtraci.variablespeedsign_getContextSubscriptionResults(objectID)
variablespeedsign_getContextSubscriptionResults = _libtraci.variablespeedsign_getContextSubscriptionResults

def variablespeedsign_subscribeParameterWithKey(*args, **kwargs):
    return _libtraci.variablespeedsign_subscribeParameterWithKey(*args, **kwargs)
variablespeedsign_subscribeParameterWithKey = _libtraci.variablespeedsign_subscribeParameterWithKey

class routeprobe(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, routeprobe, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, routeprobe, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        getEdgeID = staticmethod(_libtraci.routeprobe_getEdgeID)
    else:
        getEdgeID = _libtraci.routeprobe_getEdgeID
    if _newclass:
        sampleLastRouteID = staticmethod(_libtraci.routeprobe_sampleLastRouteID)
    else:
        sampleLastRouteID = _libtraci.routeprobe_sampleLastRouteID
    if _newclass:
        sampleCurrentRouteID = staticmethod(_libtraci.routeprobe_sampleCurrentRouteID)
    else:
        sampleCurrentRouteID = _libtraci.routeprobe_sampleCurrentRouteID
    if _newclass:
        getIDList = staticmethod(_libtraci.routeprobe_getIDList)
    else:
        getIDList = _libtraci.routeprobe_getIDList
    if _newclass:
        getIDCount = staticmethod(_libtraci.routeprobe_getIDCount)
    else:
        getIDCount = _libtraci.routeprobe_getIDCount
    if _newclass:
        getParameter = staticmethod(_libtraci.routeprobe_getParameter)
    else:
        getParameter = _libtraci.routeprobe_getParameter
    if _newclass:
        getParameterWithKey = staticmethod(_libtraci.routeprobe_getParameterWithKey)
    else:
        getParameterWithKey = _libtraci.routeprobe_getParameterWithKey
    if _newclass:
        setParameter = staticmethod(_libtraci.routeprobe_setParameter)
    else:
        setParameter = _libtraci.routeprobe_setParameter
    if _newclass:
        subscribe = staticmethod(_libtraci.routeprobe_subscribe)
    else:
        subscribe = _libtraci.routeprobe_subscribe
    if _newclass:
        unsubscribe = staticmethod(_libtraci.routeprobe_unsubscribe)
    else:
        unsubscribe = _libtraci.routeprobe_unsubscribe
    if _newclass:
        subscribeContext = staticmethod(_libtraci.routeprobe_subscribeContext)
    else:
        subscribeContext = _libtraci.routeprobe_subscribeContext
    if _newclass:
        unsubscribeContext = staticmethod(_libtraci.routeprobe_unsubscribeContext)
    else:
        unsubscribeContext = _libtraci.routeprobe_unsubscribeContext
    if _newclass:
        getAllSubscriptionResults = staticmethod(_libtraci.routeprobe_getAllSubscriptionResults)
    else:
        getAllSubscriptionResults = _libtraci.routeprobe_getAllSubscriptionResults
    if _newclass:
        getSubscriptionResults = staticmethod(_libtraci.routeprobe_getSubscriptionResults)
    else:
        getSubscriptionResults = _libtraci.routeprobe_getSubscriptionResults
    if _newclass:
        getAllContextSubscriptionResults = staticmethod(_libtraci.routeprobe_getAllContextSubscriptionResults)
    else:
        getAllContextSubscriptionResults = _libtraci.routeprobe_getAllContextSubscriptionResults
    if _newclass:
        getContextSubscriptionResults = staticmethod(_libtraci.routeprobe_getContextSubscriptionResults)
    else:
        getContextSubscriptionResults = _libtraci.routeprobe_getContextSubscriptionResults
    if _newclass:
        subscribeParameterWithKey = staticmethod(_libtraci.routeprobe_subscribeParameterWithKey)
    else:
        subscribeParameterWithKey = _libtraci.routeprobe_subscribeParameterWithKey
    __swig_destroy__ = _libtraci.delete_routeprobe
    __del__ = lambda self: None
routeprobe_swigregister = _libtraci.routeprobe_swigregister
routeprobe_swigregister(routeprobe)

def routeprobe_getEdgeID(probeID):
    return _libtraci.routeprobe_getEdgeID(probeID)
routeprobe_getEdgeID = _libtraci.routeprobe_getEdgeID

def routeprobe_sampleLastRouteID(probeID):
    return _libtraci.routeprobe_sampleLastRouteID(probeID)
routeprobe_sampleLastRouteID = _libtraci.routeprobe_sampleLastRouteID

def routeprobe_sampleCurrentRouteID(probeID):
    return _libtraci.routeprobe_sampleCurrentRouteID(probeID)
routeprobe_sampleCurrentRouteID = _libtraci.routeprobe_sampleCurrentRouteID

def routeprobe_getIDList():
    return _libtraci.routeprobe_getIDList()
routeprobe_getIDList = _libtraci.routeprobe_getIDList

def routeprobe_getIDCount():
    return _libtraci.routeprobe_getIDCount()
routeprobe_getIDCount = _libtraci.routeprobe_getIDCount

def routeprobe_getParameter(objectID, param):
    return _libtraci.routeprobe_getParameter(objectID, param)
routeprobe_getParameter = _libtraci.routeprobe_getParameter

def routeprobe_getParameterWithKey(objectID, key):
    return _libtraci.routeprobe_getParameterWithKey(objectID, key)
routeprobe_getParameterWithKey = _libtraci.routeprobe_getParameterWithKey

def routeprobe_setParameter(objectID, param, value):
    return _libtraci.routeprobe_setParameter(objectID, param, value)
routeprobe_setParameter = _libtraci.routeprobe_setParameter

def routeprobe_subscribe(*args, **kwargs):
    return _libtraci.routeprobe_subscribe(*args, **kwargs)
routeprobe_subscribe = _libtraci.routeprobe_subscribe

def routeprobe_unsubscribe(objectID):
    return _libtraci.routeprobe_unsubscribe(objectID)
routeprobe_unsubscribe = _libtraci.routeprobe_unsubscribe

def routeprobe_subscribeContext(*args, **kwargs):
    return _libtraci.routeprobe_subscribeContext(*args, **kwargs)
routeprobe_subscribeContext = _libtraci.routeprobe_subscribeContext

def routeprobe_unsubscribeContext(objectID, domain, dist):
    return _libtraci.routeprobe_unsubscribeContext(objectID, domain, dist)
routeprobe_unsubscribeContext = _libtraci.routeprobe_unsubscribeContext

def routeprobe_getAllSubscriptionResults():
    return _libtraci.routeprobe_getAllSubscriptionResults()
routeprobe_getAllSubscriptionResults = _libtraci.routeprobe_getAllSubscriptionResults

def routeprobe_getSubscriptionResults(objectID):
    return _libtraci.routeprobe_getSubscriptionResults(objectID)
routeprobe_getSubscriptionResults = _libtraci.routeprobe_getSubscriptionResults

def routeprobe_getAllContextSubscriptionResults():
    return _libtraci.routeprobe_getAllContextSubscriptionResults()
routeprobe_getAllContextSubscriptionResults = _libtraci.routeprobe_getAllContextSubscriptionResults

def routeprobe_getContextSubscriptionResults(objectID):
    return _libtraci.routeprobe_getContextSubscriptionResults(objectID)
routeprobe_getContextSubscriptionResults = _libtraci.routeprobe_getContextSubscriptionResults

def routeprobe_subscribeParameterWithKey(*args, **kwargs):
    return _libtraci.routeprobe_subscribeParameterWithKey(*args, **kwargs)
routeprobe_subscribeParameterWithKey = _libtraci.routeprobe_subscribeParameterWithKey

# This file is compatible with both classic and new-style classes.


